
nucleo-l432-adc-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a48  08006a48  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c60  2000005c  08006aac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  08006aac  00020cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185e8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032cd  00000000  00000000  000386b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010db  00000000  00000000  0003cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002407d  00000000  00000000  0003e00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c1b  00000000  00000000  00062088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dead8  00000000  00000000  0007bca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f34  00000000  00000000  0015a77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001606b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006998 	.word	0x08006998

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	08006998 	.word	0x08006998

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b09b      	sub	sp, #108	; 0x6c
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]
  ili9341_t *lcd = NULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	667b      	str	r3, [r7, #100]	; 0x64

  if (NULL != spi_hal) {
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f000 8107 	beq.w	80006f2 <ili9341_new+0x22a>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 8103 	beq.w	80006f2 <ili9341_new+0x22a>
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	f000 80ff 	beq.w	80006f2 <ili9341_new+0x22a>
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	041b      	lsls	r3, r3, #16
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 80f9 	bne.w	80006f2 <ili9341_new+0x22a>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	f000 80f5 	beq.w	80006f2 <ili9341_new+0x22a>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 8000508:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800050c:	2b00      	cmp	r3, #0
 800050e:	f000 80f0 	beq.w	80006f2 <ili9341_new+0x22a>
 8000512:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	041b      	lsls	r3, r3, #16
 800051a:	2b00      	cmp	r3, #0
 800051c:	f040 80e9 	bne.w	80006f2 <ili9341_new+0x22a>
 8000520:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000522:	2b00      	cmp	r3, #0
 8000524:	f000 80e5 	beq.w	80006f2 <ili9341_new+0x22a>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 8000528:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 80e0 	beq.w	80006f2 <ili9341_new+0x22a>
 8000532:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000536:	0c1b      	lsrs	r3, r3, #16
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	2b00      	cmp	r3, #0
 800053c:	f040 80d9 	bne.w	80006f2 <ili9341_new+0x22a>
 8000540:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8000544:	2b00      	cmp	r3, #0
 8000546:	f2c0 80d4 	blt.w	80006f2 <ili9341_new+0x22a>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 800054a:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 800054e:	2b03      	cmp	r3, #3
 8000550:	f300 80cf 	bgt.w	80006f2 <ili9341_new+0x22a>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8000554:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 8000558:	2b01      	cmp	r3, #1
 800055a:	d121      	bne.n	80005a0 <ili9341_new+0xd8>
 800055c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000560:	2b00      	cmp	r3, #0
 8000562:	f000 80c6 	beq.w	80006f2 <ili9341_new+0x22a>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8000566:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 80c1 	beq.w	80006f2 <ili9341_new+0x22a>
 8000570:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000574:	0c1b      	lsrs	r3, r3, #16
 8000576:	041b      	lsls	r3, r3, #16
 8000578:	2b00      	cmp	r3, #0
 800057a:	f040 80ba 	bne.w	80006f2 <ili9341_new+0x22a>
 800057e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000582:	2b00      	cmp	r3, #0
 8000584:	f000 80b5 	beq.w	80006f2 <ili9341_new+0x22a>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 8000588:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800058c:	2b00      	cmp	r3, #0
 800058e:	f000 80b0 	beq.w	80006f2 <ili9341_new+0x22a>
 8000592:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	2b00      	cmp	r3, #0
 800059c:	f040 80a9 	bne.w	80006f2 <ili9341_new+0x22a>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 80005a0:	2068      	movs	r0, #104	; 0x68
 80005a2:	f006 f901 	bl	80067a8 <malloc>
 80005a6:	4603      	mov	r3, r0
 80005a8:	667b      	str	r3, [r7, #100]	; 0x64
 80005aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 80a0 	beq.w	80006f2 <ili9341_new+0x22a>

          lcd->spi_hal              = spi_hal;
 80005b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	601a      	str	r2, [r3, #0]

          lcd->reset_port           = reset_port;
 80005b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	605a      	str	r2, [r3, #4]
          lcd->reset_pin            = reset_pin;
 80005be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005c0:	88fa      	ldrh	r2, [r7, #6]
 80005c2:	811a      	strh	r2, [r3, #8]
          lcd->tft_select_port      = tft_select_port;
 80005c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	60da      	str	r2, [r3, #12]
          lcd->tft_select_pin       = tft_select_pin;
 80005ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005cc:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80005d0:	821a      	strh	r2, [r3, #16]
          lcd->data_command_port    = data_command_port;
 80005d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80005d6:	615a      	str	r2, [r3, #20]
          lcd->data_command_pin     = data_command_pin;
 80005d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005da:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80005de:	831a      	strh	r2, [r3, #24]

          lcd->orientation          = orientation;
 80005e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80005e2:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80005e6:	769a      	strb	r2, [r3, #26]
          lcd->screen_size          = ili9341_screen_size(orientation);
 80005e8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80005ea:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fb24 	bl	8000c3c <ili9341_screen_size>
 80005f4:	4603      	mov	r3, r0
 80005f6:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 80005f8:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d03d      	beq.n	800067c <ili9341_new+0x1b4>

            lcd->touch_select_port    = touch_select_port;
 8000600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000602:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000606:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = touch_select_pin;
 8000608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800060a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800060e:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = touch_irq_port;
 8000610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000612:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = touch_irq_pin;
 8000618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800061a:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800061e:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 8000620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000622:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8000626:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = touch_normalize;
 800062a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800062c:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8000630:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000636:	2200      	movs	r2, #0
 8000638:	861a      	strh	r2, [r3, #48]	; 0x30
 800063a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800063c:	2200      	movs	r2, #0
 800063e:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 8000640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800064a:	3336      	adds	r3, #54	; 0x36
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000654:	3340      	adds	r3, #64	; 0x40
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNotPressed;
 8000666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000668:	2200      	movs	r2, #0
 800066a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 800066e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000670:	2200      	movs	r2, #0
 8000672:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 8000674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000676:	2200      	movs	r2, #0
 8000678:	665a      	str	r2, [r3, #100]	; 0x64
 800067a:	e037      	b.n	80006ec <ili9341_new+0x224>

          } else {

            lcd->touch_select_port    = NULL;
 800067c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = 0;
 8000682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000684:	2200      	movs	r2, #0
 8000686:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = NULL;
 8000688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = 0;
 800068e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000690:	2200      	movs	r2, #0
 8000692:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 8000694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000696:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 800069a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = itnNONE;
 800069e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 80006a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a8:	2200      	movs	r2, #0
 80006aa:	861a      	strh	r2, [r3, #48]	; 0x30
 80006ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006ae:	2200      	movs	r2, #0
 80006b0:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 80006b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80006ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006bc:	3336      	adds	r3, #54	; 0x36
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80006c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006c6:	3340      	adds	r3, #64	; 0x40
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNONE;
 80006d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006da:	22ff      	movs	r2, #255	; 0xff
 80006dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 80006e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006e2:	2200      	movs	r2, #0
 80006e4:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 80006e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006e8:	2200      	movs	r2, #0
 80006ea:	665a      	str	r2, [r3, #100]	; 0x64
          }

          ili9341_initialize(lcd);
 80006ec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80006ee:	f000 f945 	bl	800097c <ili9341_initialize>
        }
      }
    }
  }

  return lcd;
 80006f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	376c      	adds	r7, #108	; 0x6c
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68d8      	ldr	r0, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	8a1b      	ldrh	r3, [r3, #16]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f003 f9c4 	bl	8003a9c <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_t *lcd)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68d8      	ldr	r0, [r3, #12]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	8a1b      	ldrh	r3, [r3, #16]
 800072c:	2201      	movs	r2, #1
 800072e:	4619      	mov	r1, r3
 8000730:	f003 f9b4 	bl	8003a9c <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_t *lcd)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a18      	ldr	r0, [r3, #32]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	f003 f9a4 	bl	8003a9c <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_t *lcd)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a18      	ldr	r0, [r3, #32]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	f003 f994 	bl	8003a9c <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8000788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <ili9341_spi_slave_select+0x1a>
 8000790:	2b01      	cmp	r3, #1
 8000792:	d004      	beq.n	800079e <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
    default: break;
 8000794:	e007      	b.n	80007a6 <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffb0 	bl	80006fc <ili9341_spi_tft_select>
 800079c:	e003      	b.n	80007a6 <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffcc 	bl	800073c <ili9341_spi_touch_select>
 80007a4:	bf00      	nop
  }
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	460b      	mov	r3, r1
 80007b8:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 80007ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <ili9341_spi_slave_release+0x1a>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d004      	beq.n	80007d0 <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
    default: break;
 80007c6:	e007      	b.n	80007d8 <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ffa7 	bl	800071c <ili9341_spi_tft_release>
 80007ce:	e003      	b.n	80007d8 <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ffc3 	bl	800075c <ili9341_spi_touch_release>
 80007d6:	bf00      	nop
  }
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
 80007ec:	4613      	mov	r3, r2
 80007ee:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(lcd, spi_slave);
 80007f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db09      	blt.n	800080c <ili9341_spi_write_command+0x2c>
 80007f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dc05      	bgt.n	800080c <ili9341_spi_write_command+0x2c>
 8000800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffb8 	bl	800077c <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6958      	ldr	r0, [r3, #20]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	8b1b      	ldrh	r3, [r3, #24]
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	f003 f940 	bl	8003a9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	1cb9      	adds	r1, r7, #2
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2201      	movs	r2, #1
 8000828:	f004 fc6d 	bl	8005106 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 800082c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db09      	blt.n	8000848 <ili9341_spi_write_command+0x68>
 8000834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000838:	2b01      	cmp	r3, #1
 800083a:	dc05      	bgt.n	8000848 <ili9341_spi_write_command+0x68>
 800083c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000840:	4619      	mov	r1, r3
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb3 	bl	80007ae <ili9341_spi_slave_release>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	460b      	mov	r3, r1
 800085c:	72fb      	strb	r3, [r7, #11]
 800085e:	4613      	mov	r3, r2
 8000860:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(lcd, spi_slave);
 8000862:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000866:	2b00      	cmp	r3, #0
 8000868:	db09      	blt.n	800087e <ili9341_spi_write_data+0x2e>
 800086a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800086e:	2b01      	cmp	r3, #1
 8000870:	dc05      	bgt.n	800087e <ili9341_spi_write_data+0x2e>
 8000872:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000876:	4619      	mov	r1, r3
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff ff7f 	bl	800077c <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6958      	ldr	r0, [r3, #20]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	8b1b      	ldrh	r3, [r3, #24]
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	f003 f907 	bl	8003a9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	893a      	ldrh	r2, [r7, #8]
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	f004 fc34 	bl	8005106 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 800089e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db09      	blt.n	80008ba <ili9341_spi_write_data+0x6a>
 80008a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	dc05      	bgt.n	80008ba <ili9341_spi_write_data+0x6a>
 80008ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008b2:	4619      	mov	r1, r3
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff ff7a 	bl	80007ae <ili9341_spi_slave_release>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	4608      	mov	r0, r1
 80008cc:	4611      	mov	r1, r2
 80008ce:	461a      	mov	r2, r3
 80008d0:	4603      	mov	r3, r0
 80008d2:	70fb      	strb	r3, [r7, #3]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70bb      	strb	r3, [r7, #2]
 80008d8:	4613      	mov	r3, r2
 80008da:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(lcd, spi_slave);
 80008dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db09      	blt.n	80008f8 <ili9341_spi_write_command_data+0x36>
 80008e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	dc05      	bgt.n	80008f8 <ili9341_spi_write_command_data+0x36>
 80008ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008f0:	4619      	mov	r1, r3
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ff42 	bl	800077c <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff6d 	bl	80007e0 <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 8000906:	883a      	ldrh	r2, [r7, #0]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	f04f 31ff 	mov.w	r1, #4294967295
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff9e 	bl	8000850 <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db09      	blt.n	8000930 <ili9341_spi_write_command_data+0x6e>
 800091c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000920:	2b01      	cmp	r3, #1
 8000922:	dc05      	bgt.n	8000930 <ili9341_spi_write_command_data+0x6e>
 8000924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ff3f 	bl	80007ae <ili9341_spi_slave_release>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_t *lcd)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6858      	ldr	r0, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	891b      	ldrh	r3, [r3, #8]
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	f003 f8a6 	bl	8003a9c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000950:	20c8      	movs	r0, #200	; 0xc8
 8000952:	f001 fb55 	bl	8002000 <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6858      	ldr	r0, [r3, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	891b      	ldrh	r3, [r3, #8]
 800095e:	2201      	movs	r2, #1
 8000960:	4619      	mov	r1, r3
 8000962:	f003 f89b 	bl	8003a9c <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(lcd);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fed8 	bl	800071c <ili9341_spi_tft_release>
  ili9341_spi_touch_release(lcd);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fef5 	bl	800075c <ili9341_spi_touch_release>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <ili9341_initialize>:

static void ili9341_initialize(ili9341_t *lcd)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b09f      	sub	sp, #124	; 0x7c
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
  ili9341_reset(lcd);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffd7 	bl	8000938 <ili9341_reset>
  ili9341_spi_tft_select(lcd);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff feb6 	bl	80006fc <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 8000990:	2201      	movs	r2, #1
 8000992:	f04f 31ff 	mov.w	r1, #4294967295
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff22 	bl	80007e0 <ili9341_spi_write_command>
  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f001 fb2e 	bl	8002000 <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 80009a4:	4a9d      	ldr	r2, [pc, #628]	; (8000c1c <ili9341_initialize+0x2a0>)
 80009a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ae:	6018      	str	r0, [r3, #0]
 80009b0:	3304      	adds	r3, #4
 80009b2:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80009b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2305      	movs	r3, #5
 80009bc:	22cb      	movs	r2, #203	; 0xcb
 80009be:	f04f 31ff 	mov.w	r1, #4294967295
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff7d 	bl	80008c2 <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 80009c8:	4a95      	ldr	r2, [pc, #596]	; (8000c20 <ili9341_initialize+0x2a4>)
 80009ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	4611      	mov	r1, r2
 80009d2:	8019      	strh	r1, [r3, #0]
 80009d4:	3302      	adds	r3, #2
 80009d6:	0c12      	lsrs	r2, r2, #16
 80009d8:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80009da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2303      	movs	r3, #3
 80009e2:	22cf      	movs	r2, #207	; 0xcf
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff6a 	bl	80008c2 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 80009ee:	4a8d      	ldr	r2, [pc, #564]	; (8000c24 <ili9341_initialize+0x2a8>)
 80009f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	4611      	mov	r1, r2
 80009f8:	8019      	strh	r1, [r3, #0]
 80009fa:	3302      	adds	r3, #2
 80009fc:	0c12      	lsrs	r2, r2, #16
 80009fe:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000a00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2303      	movs	r3, #3
 8000a08:	22e8      	movs	r2, #232	; 0xe8
 8000a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff57 	bl	80008c2 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ili9341_spi_write_command_data(lcd, issNONE,
 8000a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2302      	movs	r3, #2
 8000a28:	22ea      	movs	r2, #234	; 0xea
 8000a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff47 	bl	80008c2 <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8000a34:	4b7c      	ldr	r3, [pc, #496]	; (8000c28 <ili9341_initialize+0x2ac>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	65bb      	str	r3, [r7, #88]	; 0x58
  ili9341_spi_write_command_data(lcd, issNONE,
 8000a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2304      	movs	r3, #4
 8000a42:	22ed      	movs	r2, #237	; 0xed
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff3a 	bl	80008c2 <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 8000a4e:	2320      	movs	r3, #32
 8000a50:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  ili9341_spi_write_command_data(lcd, issNONE,
 8000a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	22f7      	movs	r2, #247	; 0xf7
 8000a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ff2d 	bl	80008c2 <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8000a68:	2323      	movs	r3, #35	; 0x23
 8000a6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  ili9341_spi_write_command_data(lcd, issNONE,
 8000a6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2301      	movs	r3, #1
 8000a76:	22c0      	movs	r2, #192	; 0xc0
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff20 	bl	80008c2 <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 8000a82:	2310      	movs	r3, #16
 8000a84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000a88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	22c1      	movs	r2, #193	; 0xc1
 8000a92:	f04f 31ff 	mov.w	r1, #4294967295
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff13 	bl	80008c2 <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8000a9c:	4b63      	ldr	r3, [pc, #396]	; (8000c2c <ili9341_initialize+0x2b0>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 8000aa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	22c5      	movs	r2, #197	; 0xc5
 8000aae:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff05 	bl	80008c2 <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 8000ab8:	2386      	movs	r3, #134	; 0x86
 8000aba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 8000abe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	22c7      	movs	r2, #199	; 0xc7
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fef8 	bl	80008c2 <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 8000ad2:	2348      	movs	r3, #72	; 0x48
 8000ad4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	2236      	movs	r2, #54	; 0x36
 8000ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff feeb 	bl	80008c2 <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(lcd, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8000aec:	2355      	movs	r3, #85	; 0x55
 8000aee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000af2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2301      	movs	r3, #1
 8000afa:	223a      	movs	r2, #58	; 0x3a
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fede 	bl	80008c2 <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000b0c:	2318      	movs	r3, #24
 8000b0e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  ili9341_spi_write_command_data(lcd, issNONE,
 8000b12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2302      	movs	r3, #2
 8000b1a:	22b1      	movs	r2, #177	; 0xb1
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fece 	bl	80008c2 <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8000b26:	4a42      	ldr	r2, [pc, #264]	; (8000c30 <ili9341_initialize+0x2b4>)
 8000b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	8019      	strh	r1, [r3, #0]
 8000b32:	3302      	adds	r3, #2
 8000b34:	0c12      	lsrs	r2, r2, #16
 8000b36:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2303      	movs	r3, #3
 8000b40:	22b6      	movs	r2, #182	; 0xb6
 8000b42:	f04f 31ff 	mov.w	r1, #4294967295
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff febb 	bl	80008c2 <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 8000b52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	22f2      	movs	r2, #242	; 0xf2
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff feae 	bl	80008c2 <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(lcd, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 8000b66:	2301      	movs	r3, #1
 8000b68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	2226      	movs	r2, #38	; 0x26
 8000b76:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fea1 	bl	80008c2 <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <ili9341_initialize+0x2b8>)
 8000b82:	f107 041c 	add.w	r4, r7, #28
 8000b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b88:	c407      	stmia	r4!, {r0, r1, r2}
 8000b8a:	8023      	strh	r3, [r4, #0]
 8000b8c:	3402      	adds	r4, #2
 8000b8e:	0c1b      	lsrs	r3, r3, #16
 8000b90:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	230f      	movs	r3, #15
 8000b9a:	22e0      	movs	r2, #224	; 0xe0
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fe8e 	bl	80008c2 <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <ili9341_initialize+0x2bc>)
 8000ba8:	f107 040c 	add.w	r4, r7, #12
 8000bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bae:	c407      	stmia	r4!, {r0, r1, r2}
 8000bb0:	8023      	strh	r3, [r4, #0]
 8000bb2:	3402      	adds	r4, #2
 8000bb4:	0c1b      	lsrs	r3, r3, #16
 8000bb6:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	22e1      	movs	r2, #225	; 0xe1
 8000bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe7b 	bl	80008c2 <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 8000bcc:	2211      	movs	r2, #17
 8000bce:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fe04 	bl	80007e0 <ili9341_spi_write_command>
  HAL_Delay(120);
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f001 fa11 	bl	8002000 <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 8000bde:	2229      	movs	r2, #41	; 0x29
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fdfb 	bl	80007e0 <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f853 	bl	8000c9c <ili9341_screen_rotation>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	723b      	strb	r3, [r7, #8]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	2236      	movs	r2, #54	; 0x36
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fe5a 	bl	80008c2 <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(lcd);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fd84 	bl	800071c <ili9341_spi_tft_release>
}
 8000c14:	bf00      	nop
 8000c16:	3774      	adds	r7, #116	; 0x74
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	080069b0 	.word	0x080069b0
 8000c20:	080069b8 	.word	0x080069b8
 8000c24:	080069bc 	.word	0x080069bc
 8000c28:	080069c0 	.word	0x080069c0
 8000c2c:	080069c4 	.word	0x080069c4
 8000c30:	080069c8 	.word	0x080069c8
 8000c34:	080069cc 	.word	0x080069cc
 8000c38:	080069dc 	.word	0x080069dc

08000c3c <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d011      	beq.n	8000c72 <ili9341_screen_size+0x36>
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	dc03      	bgt.n	8000c5a <ili9341_screen_size+0x1e>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d005      	beq.n	8000c62 <ili9341_screen_size+0x26>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d007      	beq.n	8000c6a <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <ili9341_screen_size+0x58>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	e00a      	b.n	8000c78 <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <ili9341_screen_size+0x5c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	e006      	b.n	8000c78 <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <ili9341_screen_size+0x58>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	e002      	b.n	8000c78 <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <ili9341_screen_size+0x5c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	61fb      	str	r3, [r7, #28]
  }
}
 8000c78:	2300      	movs	r3, #0
 8000c7a:	8bba      	ldrh	r2, [r7, #28]
 8000c7c:	f362 030f 	bfi	r3, r2, #0, #16
 8000c80:	8bfa      	ldrh	r2, [r7, #30]
 8000c82:	f362 431f 	bfi	r3, r2, #16, #16
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	080069ec 	.word	0x080069ec
 8000c98:	080069f0 	.word	0x080069f0

08000c9c <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d00b      	beq.n	8000cc6 <ili9341_screen_rotation+0x2a>
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	dc03      	bgt.n	8000cba <ili9341_screen_rotation+0x1e>
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d003      	beq.n	8000cbe <ili9341_screen_rotation+0x22>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d003      	beq.n	8000cc2 <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 8000cba:	2348      	movs	r3, #72	; 0x48
 8000cbc:	e004      	b.n	8000cc8 <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 8000cbe:	23e8      	movs	r3, #232	; 0xe8
 8000cc0:	e002      	b.n	8000cc8 <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 8000cc2:	2388      	movs	r3, #136	; 0x88
 8000cc4:	e000      	b.n	8000cc8 <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 8000cc6:	2328      	movs	r3, #40	; 0x28
  }
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(ili9341_t *lcd,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	817b      	strh	r3, [r7, #10]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	813b      	strh	r3, [r7, #8]
 8000cea:	4613      	mov	r3, r2
 8000cec:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(lcd);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fd04 	bl	80006fc <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8000cf4:	897b      	ldrh	r3, [r7, #10]
 8000cf6:	0a1b      	lsrs	r3, r3, #8
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	753b      	strb	r3, [r7, #20]
 8000cfe:	897b      	ldrh	r3, [r7, #10]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	757b      	strb	r3, [r7, #21]
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	75bb      	strb	r3, [r7, #22]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	222a      	movs	r2, #42	; 0x2a
 8000d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff fdcd 	bl	80008c2 <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8000d28:	893b      	ldrh	r3, [r7, #8]
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	743b      	strb	r3, [r7, #16]
 8000d32:	893b      	ldrh	r3, [r7, #8]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	747b      	strb	r3, [r7, #17]
 8000d38:	8c3b      	ldrh	r3, [r7, #32]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	74bb      	strb	r3, [r7, #18]
 8000d42:	8c3b      	ldrh	r3, [r7, #32]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2304      	movs	r3, #4
 8000d50:	222b      	movs	r2, #43	; 0x2b
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f7ff fdb3 	bl	80008c2 <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 8000d5c:	222c      	movs	r2, #44	; 0x2c
 8000d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f7ff fd3c 	bl	80007e0 <ili9341_spi_write_command>

  ili9341_spi_tft_release(lcd);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fcd7 	bl	800071c <ili9341_spi_tft_release>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_t *lcd)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  if (NULL == lcd)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00b      	beq.n	8000d9c <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 8000d84:	e000      	b.n	8000d88 <ili9341_transmit_wait+0x12>
    { continue; }
 8000d86:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fcdb 	bl	800374a <HAL_DMA_GetState>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d0f5      	beq.n	8000d86 <ili9341_transmit_wait+0x10>
 8000d9a:	e000      	b.n	8000d9e <ili9341_transmit_wait+0x28>
    { return; }
 8000d9c:	bf00      	nop
}
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_t *lcd, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	817b      	strh	r3, [r7, #10]
 8000db4:	4613      	mov	r3, r2
 8000db6:	727b      	strb	r3, [r7, #9]
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d013      	beq.n	8000de6 <ili9341_transmit_color+0x42>
 8000dbe:	897b      	ldrh	r3, [r7, #10]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d010      	beq.n	8000de6 <ili9341_transmit_color+0x42>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00d      	beq.n	8000de6 <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	897a      	ldrh	r2, [r7, #10]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fb0c 	bl	80053f0 <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 8000dd8:	7a7b      	ldrb	r3, [r7, #9]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(lcd); }
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff ffc9 	bl	8000d76 <ili9341_transmit_wait>
 8000de4:	e000      	b.n	8000de8 <ili9341_transmit_color+0x44>
    { return; }
 8000de6:	bf00      	nop
}
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	817b      	strh	r3, [r7, #10]
 8000e00:	460b      	mov	r3, r1
 8000e02:	813b      	strh	r3, [r7, #8]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, NULL, NULL)))
 8000e08:	1dba      	adds	r2, r7, #6
 8000e0a:	f107 0108 	add.w	r1, r7, #8
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f000 f9d7 	bl	80011c8 <ili9341_clip_rect>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d03a      	beq.n	8000e96 <ili9341_draw_pixel+0xa8>
    { return; }

  uint16_t color_le = __LEu16(&color);
 8000e20:	f107 030a 	add.w	r3, r7, #10
 8000e24:	3301      	adds	r3, #1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	f107 030a 	add.w	r3, r7, #10
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 8000e3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e40:	b299      	uxth	r1, r3
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b298      	uxth	r0, r3
 8000e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f7ff ff37 	bl	8000cd4 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(lcd);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff fc48 	bl	80006fc <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6958      	ldr	r0, [r3, #20]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8b1b      	ldrh	r3, [r3, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	4619      	mov	r1, r3
 8000e78:	f002 fe10 	bl	8003a9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	f107 0116 	add.w	r1, r7, #22
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f004 f93c 	bl	8005106 <HAL_SPI_Transmit>

  ili9341_spi_tft_release(lcd);
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff fc44 	bl	800071c <ili9341_spi_tft_release>
 8000e94:	e000      	b.n	8000e98 <ili9341_draw_pixel+0xaa>
    { return; }
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <ili9341_draw_line>:

void ili9341_draw_line(ili9341_t *lcd, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b08d      	sub	sp, #52	; 0x34
 8000ea2:	af02      	add	r7, sp, #8
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	817b      	strh	r3, [r7, #10]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	813b      	strh	r3, [r7, #8]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8000eb8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000eba:	893b      	ldrh	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 8000ec2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 8000ecc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d117      	bne.n	8000f04 <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 8000ed4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80c7 	beq.w	800106c <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 8000ede:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bfb8      	it	lt
 8000ee6:	425b      	neglt	r3, r3
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000eee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ef2:	8979      	ldrh	r1, [r7, #10]
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4603      	mov	r3, r0
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 f8bb 	bl	8001078 <ili9341_fill_rect>
    return;
 8000f02:	e0b6      	b.n	8001072 <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 8000f04:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d117      	bne.n	8000f3c <ili9341_draw_line+0x9e>
    // horizontal line
    if (0 == dx)
 8000f0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ad 	beq.w	8001070 <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 8000f16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bfb8      	it	lt
 8000f1e:	425b      	neglt	r3, r3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f2a:	8979      	ldrh	r1, [r7, #10]
 8000f2c:	2401      	movs	r4, #1
 8000f2e:	9401      	str	r4, [sp, #4]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4603      	mov	r3, r0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 f89f 	bl	8001078 <ili9341_fill_rect>
    return;
 8000f3a:	e09a      	b.n	8001072 <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8000f3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bfb8      	it	lt
 8000f44:	425b      	neglt	r3, r3
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bfb8      	it	lt
 8000f50:	425b      	neglt	r3, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	429a      	cmp	r2, r3
 8000f56:	bf8c      	ite	hi
 8000f58:	2301      	movhi	r3, #1
 8000f5a:	2300      	movls	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 8000f60:	7efb      	ldrb	r3, [r7, #27]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	833b      	strh	r3, [r7, #24]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	813b      	strh	r3, [r7, #8]
 8000f6e:	8b3b      	ldrh	r3, [r7, #24]
 8000f70:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 8000f72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f74:	82fb      	strh	r3, [r7, #22]
 8000f76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f78:	873b      	strh	r3, [r7, #56]	; 0x38
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  if (x0 > x1) {
 8000f7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f82:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dd0b      	ble.n	8000fa2 <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 8000f8a:	893b      	ldrh	r3, [r7, #8]
 8000f8c:	82bb      	strh	r3, [r7, #20]
 8000f8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f90:	813b      	strh	r3, [r7, #8]
 8000f92:	8abb      	ldrh	r3, [r7, #20]
 8000f94:	873b      	strh	r3, [r7, #56]	; 0x38
    __SWAP(int16_t, y0, y1);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	827b      	strh	r3, [r7, #18]
 8000f9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f9c:	80fb      	strh	r3, [r7, #6]
 8000f9e:	8a7b      	ldrh	r3, [r7, #18]
 8000fa0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  dx = x1 - x0;
 8000fa2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000fa4:	893b      	ldrh	r3, [r7, #8]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 8000fac:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8000fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb8      	it	lt
 8000fba:	425b      	neglt	r3, r3
 8000fbc:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 8000fbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fc2:	105b      	asrs	r3, r3, #1
 8000fc4:	847b      	strh	r3, [r7, #34]	; 0x22

  if (y0 < y1)
 8000fc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fca:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	da02      	bge.n	8000fd8 <ili9341_draw_line+0x13a>
    { step = 1; }
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	843b      	strh	r3, [r7, #32]
 8000fd6:	e042      	b.n	800105e <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 8000fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fdc:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 8000fde:	e03e      	b.n	800105e <ili9341_draw_line+0x1c0>

    if (is_steep)
 8000fe0:	7efb      	ldrb	r3, [r7, #27]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fee:	e003      	b.n	8000ff8 <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 8000ff0:	893b      	ldrh	r3, [r7, #8]
 8000ff2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	84bb      	strh	r3, [r7, #36]	; 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 8000ff8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db17      	blt.n	8001030 <ili9341_draw_line+0x192>
 8001000:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	8b92      	ldrh	r2, [r2, #28]
 8001008:	4293      	cmp	r3, r2
 800100a:	dc11      	bgt.n	8001030 <ili9341_draw_line+0x192>
 800100c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0d      	blt.n	8001030 <ili9341_draw_line+0x192>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 8001014:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	8bd2      	ldrh	r2, [r2, #30]
 800101c:	4293      	cmp	r3, r2
 800101e:	dc07      	bgt.n	8001030 <ili9341_draw_line+0x192>
      ili9341_draw_pixel(lcd, color, x, y);
 8001020:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001024:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001028:	8979      	ldrh	r1, [r7, #10]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff fedf 	bl	8000dee <ili9341_draw_pixel>
    }

    err -= dy;
 8001030:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001032:	8bbb      	ldrh	r3, [r7, #28]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	847b      	strh	r3, [r7, #34]	; 0x22
    if (err < 0) {
 800103a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800103e:	2b00      	cmp	r3, #0
 8001040:	da09      	bge.n	8001056 <ili9341_draw_line+0x1b8>
      y0 += step;
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	8c3b      	ldrh	r3, [r7, #32]
 8001046:	4413      	add	r3, r2
 8001048:	b29b      	uxth	r3, r3
 800104a:	80fb      	strh	r3, [r7, #6]
      err += dx;
 800104c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800104e:	8bfb      	ldrh	r3, [r7, #30]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ++x0;
 8001056:	893b      	ldrh	r3, [r7, #8]
 8001058:	3301      	adds	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 800105e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001062:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001066:	429a      	cmp	r2, r3
 8001068:	ddba      	ble.n	8000fe0 <ili9341_draw_line+0x142>
 800106a:	e002      	b.n	8001072 <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8001070:	bf00      	nop
  }
}
 8001072:	372c      	adds	r7, #44	; 0x2c
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}

08001078 <ili9341_fill_rect>:
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
}

void ili9341_fill_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08d      	sub	sp, #52	; 0x34
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	4608      	mov	r0, r1
 8001082:	4611      	mov	r1, r2
 8001084:	461a      	mov	r2, r3
 8001086:	4603      	mov	r3, r0
 8001088:	817b      	strh	r3, [r7, #10]
 800108a:	460b      	mov	r3, r1
 800108c:	813b      	strh	r3, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8001092:	1dba      	adds	r2, r7, #6
 8001094:	f107 0108 	add.w	r1, r7, #8
 8001098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f890 	bl	80011c8 <ili9341_clip_rect>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d06f      	beq.n	800118e <ili9341_fill_rect+0x116>
    { return; }

  uint32_t num_pixels = w * h;
 80010ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80010b0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c6:	d902      	bls.n	80010ce <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010cc:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 80010ce:	f107 030a 	add.w	r3, r7, #10
 80010d2:	3301      	adds	r3, #1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	f107 030a 	add.w	r3, r7, #10
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 80010e8:	2300      	movs	r3, #0
 80010ea:	83fb      	strh	r3, [r7, #30]
 80010ec:	e007      	b.n	80010fe <ili9341_fill_rect+0x86>
    { spi_tx_block[i] = color_le; }
 80010ee:	8bfb      	ldrh	r3, [r7, #30]
 80010f0:	4929      	ldr	r1, [pc, #164]	; (8001198 <ili9341_fill_rect+0x120>)
 80010f2:	8a7a      	ldrh	r2, [r7, #18]
 80010f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 80010f8:	8bfb      	ldrh	r3, [r7, #30]
 80010fa:	3301      	adds	r3, #1
 80010fc:	83fb      	strh	r3, [r7, #30]
 80010fe:	8bfb      	ldrh	r3, [r7, #30]
 8001100:	6a3a      	ldr	r2, [r7, #32]
 8001102:	429a      	cmp	r2, r3
 8001104:	d8f3      	bhi.n	80010ee <ili9341_fill_rect+0x76>

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8001106:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800110a:	b299      	uxth	r1, r3
 800110c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001110:	b298      	uxth	r0, r3
 8001112:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001116:	b29a      	uxth	r2, r3
 8001118:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800111a:	4413      	add	r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	3b01      	subs	r3, #1
 8001120:	b29c      	uxth	r4, r3
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	b29a      	uxth	r2, r3
 8001128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800112a:	4413      	add	r3, r2
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29b      	uxth	r3, r3
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4623      	mov	r3, r4
 8001136:	4602      	mov	r2, r0
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fdcb 	bl	8000cd4 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fadc 	bl	80006fc <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6958      	ldr	r0, [r3, #20]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8b1b      	ldrh	r3, [r3, #24]
 800114c:	2201      	movs	r2, #1
 800114e:	4619      	mov	r1, r3
 8001150:	f002 fca4 	bl	8003a9c <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8001154:	e014      	b.n	8001180 <ili9341_fill_rect+0x108>
    curr_wc = rect_wc;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	429a      	cmp	r2, r3
 8001160:	d901      	bls.n	8001166 <ili9341_fill_rect+0xee>
      { curr_wc = block_wc; }
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	b29b      	uxth	r3, r3
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	b299      	uxth	r1, r3
 800116e:	2301      	movs	r3, #1
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <ili9341_fill_rect+0x120>)
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff fe16 	bl	8000da4 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8001178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  while (rect_wc > 0) {
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1e7      	bne.n	8001156 <ili9341_fill_rect+0xde>
  }

  ili9341_spi_tft_release(lcd);
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f7ff fac8 	bl	800071c <ili9341_spi_tft_release>
 800118c:	e000      	b.n	8001190 <ili9341_fill_rect+0x118>
    { return; }
 800118e:	bf00      	nop
}
 8001190:	372c      	adds	r7, #44	; 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	20000078 	.word	0x20000078

0800119c <ili9341_fill_screen>:
  ili9341_draw_line(lcd, color, x, y - r, x, (y - r) + (2 * r) + 1);
  ili9341_fill_quarter_circle(lcd, color, x, y, r, 3, 0);
}

void ili9341_fill_screen(ili9341_t *lcd, ili9341_color_t color)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(lcd, color,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	8b9b      	ldrh	r3, [r3, #28]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	8bd2      	ldrh	r2, [r2, #30]
 80011b0:	8879      	ldrh	r1, [r7, #2]
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2200      	movs	r2, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff5c 	bl	8001078 <ili9341_fill_rect>
      0, 0, lcd->screen_size.width, lcd->screen_size.height);
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <ili9341_clip_rect+0x1a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 80011e2:	2300      	movs	r3, #0
 80011e4:	e089      	b.n	80012fa <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	8b9b      	ldrh	r3, [r3, #28]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	da07      	bge.n	8001206 <ili9341_clip_rect+0x3e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fc:	461a      	mov	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8bdb      	ldrh	r3, [r3, #30]
 8001202:	429a      	cmp	r2, r3
 8001204:	db01      	blt.n	800120a <ili9341_clip_rect+0x42>
    { return ibFalse; }
 8001206:	2300      	movs	r3, #0
 8001208:	e077      	b.n	80012fa <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <ili9341_clip_rect+0x62>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <ili9341_clip_rect+0x5e>
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <ili9341_clip_rect+0x62>
      { return ibFalse; }
 8001226:	2300      	movs	r3, #0
 8001228:	e067      	b.n	80012fa <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da0f      	bge.n	8001254 <ili9341_clip_rect+0x8c>
    if (NULL != w)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <ili9341_clip_rect+0x86>
      { *w -= *x; }
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	b29b      	uxth	r3, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b29a      	uxth	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	801a      	strh	r2, [r3, #0]
    *x = 0;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2200      	movs	r2, #0
 8001252:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	da0f      	bge.n	800127e <ili9341_clip_rect+0xb6>
    if (NULL != h)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126e:	b29b      	uxth	r3, r3
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	801a      	strh	r2, [r3, #0]
    *y = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d039      	beq.n	80012f8 <ili9341_clip_rect+0x130>
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d036      	beq.n	80012f8 <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	8b92      	ldrh	r2, [r2, #28]
 800129c:	4293      	cmp	r3, r2
 800129e:	dd09      	ble.n	80012b4 <ili9341_clip_rect+0xec>
      { *w = lcd->screen_size.width - *x; }
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8b9a      	ldrh	r2, [r3, #28]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	461a      	mov	r2, r3
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	8bd2      	ldrh	r2, [r2, #30]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	dd09      	ble.n	80012de <ili9341_clip_rect+0x116>
      { *h = lcd->screen_size.height - *y; }
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8bda      	ldrh	r2, [r3, #30]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29a      	uxth	r2, r3
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <ili9341_clip_rect+0x12a>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <ili9341_clip_rect+0x12a>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <ili9341_clip_rect+0x12c>
 80012f2:	2300      	movs	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	e000      	b.n	80012fa <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f000 fe03 	bl	8001f16 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f824 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f000 f9f6 	bl	8001704 <MX_GPIO_Init>
  MX_DMA_Init();
 8001318:	f000 f9ce 	bl	80016b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800131c:	f000 f99c 	bl	8001658 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001320:	f000 f87e 	bl	8001420 <MX_ADC1_Init>
  MX_TIM16_Init();
 8001324:	f000 f942 	bl	80015ac <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001328:	f000 f966 	bl	80015f8 <MX_USART1_UART_Init>
  MX_OPAMP1_Init();
 800132c:	f000 f8dc 	bl	80014e8 <MX_OPAMP1_Init>
  MX_SPI1_Init();
 8001330:	f000 f8fe 	bl	8001530 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) values, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	4905      	ldr	r1, [pc, #20]	; (800134c <main+0x44>)
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <main+0x48>)
 800133a:	f001 f98f 	bl	800265c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim16);
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <main+0x4c>)
 8001340:	f004 fba2 	bl	8005a88 <HAL_TIM_Base_Start_IT>

  init_ili9341_lcd(&hspi1);
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <main+0x50>)
 8001346:	f000 fa79 	bl	800183c <init_ili9341_lcd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800134a:	e7fe      	b.n	800134a <main+0x42>
 800134c:	20000b60 	.word	0x20000b60
 8001350:	20000878 	.word	0x20000878
 8001354:	20000a04 	.word	0x20000a04
 8001358:	20000958 	.word	0x20000958

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b096      	sub	sp, #88	; 0x58
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2244      	movs	r2, #68	; 0x44
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fad0 	bl	8006910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800137e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001382:	f002 fc97 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800138c:	f000 fa50 	bl	8001830 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001390:	f002 fc72 	bl	8003c78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <SystemClock_Config+0xc0>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139a:	4a20      	ldr	r2, [pc, #128]	; (800141c <SystemClock_Config+0xc0>)
 800139c:	f023 0318 	bic.w	r3, r3, #24
 80013a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013a4:	2314      	movs	r3, #20
 80013a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013b4:	2360      	movs	r3, #96	; 0x60
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013bc:	2301      	movs	r3, #1
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80013c4:	2310      	movs	r3, #16
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c8:	2307      	movs	r3, #7
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fcc1 	bl	8003d60 <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013e4:	f000 fa24 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2303      	movs	r3, #3
 80013ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f003 f8c1 	bl	8004588 <HAL_RCC_ClockConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800140c:	f000 fa10 	bl	8001830 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001410:	f003 fcd4 	bl	8004dbc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001414:	bf00      	nop
 8001416:	3758      	adds	r7, #88	; 0x58
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000

08001420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <MX_ADC1_Init+0xc0>)
 800143a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <MX_ADC1_Init+0xbc>)
 800143e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8001442:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <MX_ADC1_Init+0xbc>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001458:	2204      	movs	r2, #4
 800145a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_ADC1_Init+0xbc>)
 800145e:	2200      	movs	r2, #0
 8001460:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001464:	2201      	movs	r2, #1
 8001466:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_ADC1_Init+0xbc>)
 800146a:	2201      	movs	r2, #1
 800146c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_ADC1_Init+0xbc>)
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_ADC1_Init+0xbc>)
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_ADC1_Init+0xbc>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <MX_ADC1_Init+0xbc>)
 800149a:	f000 ff9d 	bl	80023d8 <HAL_ADC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80014a4:	f000 f9c4 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_ADC1_Init+0xc4>)
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ac:	2306      	movs	r3, #6
 80014ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014b0:	2307      	movs	r3, #7
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014b4:	237f      	movs	r3, #127	; 0x7f
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b8:	2304      	movs	r3, #4
 80014ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_ADC1_Init+0xbc>)
 80014c6:	f001 f96b 	bl	80027a0 <HAL_ADC_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80014d0:	f000 f9ae 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000878 	.word	0x20000878
 80014e0:	50040000 	.word	0x50040000
 80014e4:	2a000400 	.word	0x2a000400

080014e8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_OPAMP1_Init+0x40>)
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <MX_OPAMP1_Init+0x44>)
 80014f0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_OPAMP1_Init+0x40>)
 80014f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014f8:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_OPAMP1_Init+0x40>)
 80014fc:	220c      	movs	r2, #12
 80014fe:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_OPAMP1_Init+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_OPAMP1_Init+0x40>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_OPAMP1_Init+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_OPAMP1_Init+0x40>)
 8001514:	f002 fada 	bl	8003acc <HAL_OPAMP_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 800151e:	f000 f987 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000924 	.word	0x20000924
 800152c:	40007800 	.word	0x40007800

08001530 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_SPI1_Init+0x78>)
 8001538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_SPI1_Init+0x74>)
 800153c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_SPI1_Init+0x74>)
 800154a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800154e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_SPI1_Init+0x74>)
 800155e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001562:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_SPI1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_SPI1_Init+0x74>)
 800157e:	2207      	movs	r2, #7
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_SPI1_Init+0x74>)
 800158a:	2208      	movs	r2, #8
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001590:	f003 fd16 	bl	8004fc0 <HAL_SPI_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800159a:	f000 f949 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000958 	.word	0x20000958
 80015a8:	40013000 	.word	0x40013000

080015ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <MX_TIM16_Init+0x48>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32 - 1;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015b8:	221f      	movs	r2, #31
 80015ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000 - 1;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015c4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80015c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_TIM16_Init+0x44>)
 80015de:	f004 f9fb 	bl	80059d8 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80015e8:	f000 f922 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000a04 	.word	0x20000a04
 80015f4:	40014400 	.word	0x40014400

080015f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART1_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART1_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001604:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800161e:	2208      	movs	r2, #8
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800163c:	f004 fc24 	bl	8005e88 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 f8f3 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000a50 	.word	0x20000a50
 8001654:	40013800 	.word	0x40013800

08001658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_USART2_UART_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800169c:	f004 fbf4 	bl	8005e88 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f000 f8c3 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000ad8 	.word	0x20000ad8
 80016b4:	40004400 	.word	0x40004400

080016b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_DMA_Init+0x48>)
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <MX_DMA_Init+0x48>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6493      	str	r3, [r2, #72]	; 0x48
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_DMA_Init+0x48>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	200b      	movs	r0, #11
 80016dc:	f001 fe37 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e0:	200b      	movs	r0, #11
 80016e2:	f001 fe50 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	200d      	movs	r0, #13
 80016ec:	f001 fe2f 	bl	800334e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016f0:	200d      	movs	r0, #13
 80016f2:	f001 fe48 	bl	8003386 <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <MX_GPIO_Init+0x98>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <MX_GPIO_Init+0x98>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_GPIO_Init+0x98>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_GPIO_Init+0x98>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <MX_GPIO_Init+0x98>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_GPIO_Init+0x98>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_GPIO_Init+0x98>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <MX_GPIO_Init+0x98>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_GPIO_Init+0x98>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	21c1      	movs	r1, #193	; 0xc1
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <MX_GPIO_Init+0x9c>)
 8001768:	f002 f998 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2108      	movs	r1, #8
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <MX_GPIO_Init+0x9c>)
 8001772:	f002 f993 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LD3_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001776:	23c9      	movs	r3, #201	; 0xc9
 8001778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_GPIO_Init+0x9c>)
 800178e:	f002 f81b 	bl	80037c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000400 	.word	0x48000400

080017a4 <HAL_TIM_PeriodElapsedCallback>:
void printToUart(UART_HandleTypeDef *huart, char *msg) {
  HAL_UART_Transmit(huart, (uint8_t*) msg, strlen(msg), 100);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if (x == 0) {
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x1c>
    fill_screen();
 80017b4:	f000 f86c 	bl	8001890 <fill_screen>
    previous_value = values[0];
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017be:	801a      	strh	r2, [r3, #0]
  }
  draw_line(x, translate_y(values[0], 4096), x + 1, translate_y(previous_value, 4096));
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	461e      	mov	r6, r3
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f86e 	bl	80018b0 <translate_y>
 80017d4:	4605      	mov	r5, r0
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	1c5c      	adds	r4, r3, #1
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f863 	bl	80018b0 <translate_y>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4622      	mov	r2, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	4630      	mov	r0, r6
 80017f2:	f000 f879 	bl	80018e8 <draw_line>
  previous_value = values[0];
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017fc:	801a      	strh	r2, [r3, #0]
  x++;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001808:	801a      	strh	r2, [r3, #0]
  if (x >= 319) {
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8001812:	d902      	bls.n	800181a <HAL_TIM_PeriodElapsedCallback+0x76>
    x = 0;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001816:	2200      	movs	r2, #0
 8001818:	801a      	strh	r2, [r3, #0]
  }
  // char message[100];
  // sprintf(message, "%d\r\n", values[0]);
  // printToUart(&huart1, message);
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001822:	bf00      	nop
 8001824:	20000b64 	.word	0x20000b64
 8001828:	20000b60 	.word	0x20000b60
 800182c:	20000b62 	.word	0x20000b62

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001838:	e7fe      	b.n	8001838 <Error_Handler+0x8>
	...

0800183c <init_ili9341_lcd>:
#include "plot.h"
#include "ili9341_gfx.h"

ili9341_t* ili9341_lcd;

void init_ili9341_lcd(SPI_HandleTypeDef *spi_hal) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af0a      	add	r7, sp, #40	; 0x28
 8001842:	6078      	str	r0, [r7, #4]
  ili9341_lcd = ili9341_new(
 8001844:	2301      	movs	r3, #1
 8001846:	9309      	str	r3, [sp, #36]	; 0x24
 8001848:	2301      	movs	r3, #1
 800184a:	9308      	str	r3, [sp, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	9307      	str	r3, [sp, #28]
 8001850:	2300      	movs	r3, #0
 8001852:	9306      	str	r3, [sp, #24]
 8001854:	2300      	movs	r3, #0
 8001856:	9305      	str	r3, [sp, #20]
 8001858:	2300      	movs	r3, #0
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	2301      	movs	r3, #1
 800185e:	9303      	str	r3, [sp, #12]
 8001860:	2301      	movs	r3, #1
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <init_ili9341_lcd+0x4c>)
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2340      	movs	r3, #64	; 0x40
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <init_ili9341_lcd+0x4c>)
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	4905      	ldr	r1, [pc, #20]	; (8001888 <init_ili9341_lcd+0x4c>)
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe28 	bl	80004c8 <ili9341_new>
 8001878:	4603      	mov	r3, r0
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <init_ili9341_lcd+0x50>)
 800187c:	6013      	str	r3, [r2, #0]
        isoLandscape,
        NULL,  0,
        NULL, 0,
        itsSupported,
        itnNormalized);
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	48000400 	.word	0x48000400
 800188c:	20000b68 	.word	0x20000b68

08001890 <fill_screen>:

void fill_screen() {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  ili9341_fill_screen(ili9341_lcd, ILI9341_BLACK);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <fill_screen+0x18>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <fill_screen+0x1c>)
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fc7c 	bl	800119c <ili9341_fill_screen>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000b68 	.word	0x20000b68
 80018ac:	080069f4 	.word	0x080069f4

080018b0 <translate_y>:

uint16_t translate_y(uint16_t value, uint16_t max_value) {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4613      	mov	r3, r2
 80018be:	80bb      	strh	r3, [r7, #4]
  return 240 - 240 * value / max_value;
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	461a      	mov	r2, r3
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80018d8:	b29b      	uxth	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <draw_line>:

void draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1) {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	4604      	mov	r4, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4623      	mov	r3, r4
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	4603      	mov	r3, r0
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	807b      	strh	r3, [r7, #2]
 8001902:	4613      	mov	r3, r2
 8001904:	803b      	strh	r3, [r7, #0]
  ili9341_draw_line(ili9341_lcd, ILI9341_LIGHTGREY, x0, y0, x1, y1);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <draw_line+0x48>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <draw_line+0x4c>)
 800190c:	8819      	ldrh	r1, [r3, #0]
 800190e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001912:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001916:	f9b7 3000 	ldrsh.w	r3, [r7]
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	4623      	mov	r3, r4
 8001924:	f7ff fabb 	bl	8000e9e <ili9341_draw_line>
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	20000b68 	.word	0x20000b68
 8001934:	080069f6 	.word	0x080069f6

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x44>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_MspInit+0x44>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x44>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x44>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x44>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x44>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09e      	sub	sp, #120	; 0x78
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2254      	movs	r2, #84	; 0x54
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 ffb5 	bl	8006910 <memset>
  if(hadc->Instance==ADC1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <HAL_ADC_MspInit+0x118>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d16e      	bne.n	8001a8e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019ba:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019bc:	2301      	movs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80019c4:	2310      	movs	r3, #16
 80019c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019c8:	2307      	movs	r3, #7
 80019ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fff6 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80019ea:	f7ff ff21 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_ADC_MspInit+0x11c>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_ADC_MspInit+0x11c>)
 80019f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_ADC_MspInit+0x11c>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_ADC_MspInit+0x11c>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_ADC_MspInit+0x11c>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_ADC_MspInit+0x11c>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a22:	230b      	movs	r3, #11
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f001 fec8 	bl	80037c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_ADC_MspInit+0x124>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a68:	2220      	movs	r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a74:	f001 fca2 	bl	80033bc <HAL_DMA_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001a7e:	f7ff fed7 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a86:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a88:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_ADC_MspInit+0x120>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3778      	adds	r7, #120	; 0x78
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	50040000 	.word	0x50040000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	200008dc 	.word	0x200008dc
 8001aa4:	40020008 	.word	0x40020008

08001aa8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_OPAMP_MspInit+0x74>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d124      	bne.n	8001b14 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_OPAMP_MspInit+0x78>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_OPAMP_MspInit+0x78>)
 8001ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_OPAMP_MspInit+0x78>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_OPAMP_MspInit+0x78>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_OPAMP_MspInit+0x78>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_OPAMP_MspInit+0x78>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001afa:	2309      	movs	r3, #9
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f001 fe5a 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40007800 	.word	0x40007800
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_SPI_MspInit+0xd0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d152      	bne.n	8001bec <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_SPI_MspInit+0xd4>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_SPI_MspInit+0xd4>)
 8001b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b50:	6613      	str	r3, [r2, #96]	; 0x60
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_SPI_MspInit+0xd4>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_SPI_MspInit+0xd4>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_SPI_MspInit+0xd4>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_SPI_MspInit+0xd4>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001b76:	2382      	movs	r3, #130	; 0x82
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b86:	2305      	movs	r3, #5
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b94:	f001 fe18 	bl	80037c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001b9a:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_SPI_MspInit+0xdc>)
 8001b9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001bd2:	f001 fbf3 	bl	80033bc <HAL_DMA_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8001bdc:	f7ff fe28 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_SPI_MspInit+0xd8>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40013000 	.word	0x40013000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	200009bc 	.word	0x200009bc
 8001c00:	40020030 	.word	0x40020030

08001c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_TIM_Base_MspInit+0x44>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d113      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_TIM_Base_MspInit+0x48>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_TIM_Base_MspInit+0x48>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	6613      	str	r3, [r2, #96]	; 0x60
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_TIM_Base_MspInit+0x48>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2019      	movs	r0, #25
 8001c34:	f001 fb8b 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c38:	2019      	movs	r0, #25
 8001c3a:	f001 fba4 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40014400 	.word	0x40014400
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0a0      	sub	sp, #128	; 0x80
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	2254      	movs	r2, #84	; 0x54
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fe4d 	bl	8006910 <memset>
  if(huart->Instance==USART1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a47      	ldr	r2, [pc, #284]	; (8001d98 <HAL_UART_MspInit+0x148>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d138      	bne.n	8001cf2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fe9f 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c98:	f7ff fdca 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca0:	4a3e      	ldr	r2, [pc, #248]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a38      	ldr	r2, [pc, #224]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ccc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cec:	f001 fd6c 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf0:	e04d      	b.n	8001d8e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_UART_MspInit+0x150>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d148      	bne.n	8001d8e <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fe61 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001d14:	f7ff fd8c 	bl	8001830 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d18:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d22:	6593      	str	r3, [r2, #88]	; 0x58
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_UART_MspInit+0x14c>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f001 fd2f 	bl	80037c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f001 fd1d 	bl	80037c8 <HAL_GPIO_Init>
}
 8001d8e:	bf00      	nop
 8001d90:	3780      	adds	r7, #128	; 0x80
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40004400 	.word	0x40004400

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f8e6 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Channel1_IRQHandler+0x10>)
 8001dfe:	f001 fbf5 	bl	80035ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200008dc 	.word	0x200008dc

08001e0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA1_Channel3_IRQHandler+0x10>)
 8001e12:	f001 fbeb 	bl	80035ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200009bc 	.word	0x200009bc

08001e20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e26:	f003 fe83 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000a04 	.word	0x20000a04

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f004 fd6c 	bl	8006940 <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20010000 	.word	0x20010000
 8001e94:	00000400 	.word	0x00000400
 8001e98:	20000b6c 	.word	0x20000b6c
 8001e9c:	20000cc0 	.word	0x20000cc0

08001ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <SystemInit+0x20>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <SystemInit+0x20>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec8:	f7ff ffea 	bl	8001ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	; (8001f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f004 fd2b 	bl	800694c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef6:	f7ff fa07 	bl	8001308 <main>

08001efa <LoopForever>:

LoopForever:
    b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f08:	08006a50 	.word	0x08006a50
  ldr r2, =_sbss
 8001f0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f10:	20000cbc 	.word	0x20000cbc

08001f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_IRQHandler>

08001f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f001 fa09 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f80e 	bl	8001f48 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	e001      	b.n	8001f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f38:	f7ff fcfe 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_InitTick+0x6c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_InitTick+0x70>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_InitTick+0x6c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 fa15 	bl	80033a2 <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d809      	bhi.n	8001f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f001 f9df 	bl	800334e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_InitTick+0x74>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e004      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e001      	b.n	8001fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000b70 	.word	0x20000b70

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000b70 	.word	0x20000b70

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <LL_ADC_SetOffset+0x44>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	4313      	orrs	r3, r2
 80020e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	03fff000 	.word	0x03fff000

080020f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3360      	adds	r3, #96	; 0x60
 8002106:	461a      	mov	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3360      	adds	r3, #96	; 0x60
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3330      	adds	r3, #48	; 0x30
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	211f      	movs	r1, #31
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 011f 	and.w	r1, r3, #31
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	431a      	orrs	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3314      	adds	r3, #20
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0e5b      	lsrs	r3, r3, #25
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0d1b      	lsrs	r3, r3, #20
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2107      	movs	r1, #7
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	0d1b      	lsrs	r3, r3, #20
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0318 	and.w	r3, r3, #24
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002254:	40d9      	lsrs	r1, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	400b      	ands	r3, r1
 800225a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225e:	431a      	orrs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	0007ffff 	.word	0x0007ffff

08002278 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6093      	str	r3, [r2, #8]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b0:	d101      	bne.n	80022b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002300:	d101      	bne.n	8002306 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <LL_ADC_IsEnabled+0x18>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <LL_ADC_IsEnabled+0x1a>
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002372:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d101      	bne.n	80023a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e126      	b.n	8002640 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff fabd 	bl	8001980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff3f 	bl	800229c <LL_ADC_IsDeepPowerDownEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff25 	bl	8002278 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff5a 	bl	80022ec <LL_ADC_IsInternalRegulatorEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff3e 	bl	80022c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002448:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <HAL_ADC_Init+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	4a7f      	ldr	r2, [pc, #508]	; (800264c <HAL_ADC_Init+0x274>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800245c:	e002      	b.n	8002464 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff3c 	bl	80022ec <LL_ADC_IsInternalRegulatorEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff75 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 80024a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 80bf 	bne.w	800262e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80bb 	bne.w	800262e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff35 	bl	800233c <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d8:	485d      	ldr	r0, [pc, #372]	; (8002650 <HAL_ADC_Init+0x278>)
 80024da:	f7ff ff2f 	bl	800233c <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4619      	mov	r1, r3
 80024ea:	485a      	ldr	r0, [pc, #360]	; (8002654 <HAL_ADC_Init+0x27c>)
 80024ec:	f7ff fdac 	bl	8002048 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e5b      	ldrb	r3, [r3, #25]
 80024f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002500:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002506:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d106      	bne.n	800252c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	045b      	lsls	r3, r3, #17
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <HAL_ADC_Init+0x280>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	430b      	orrs	r3, r1
 800255a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff25 	bl	80023b0 <LL_ADC_INJ_IsConversionOngoing>
 8002566:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d13d      	bne.n	80025ea <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13a      	bne.n	80025ea <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002578:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002580:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002590:	f023 0302 	bic.w	r3, r3, #2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	69b9      	ldr	r1, [r7, #24]
 800259a:	430b      	orrs	r3, r1
 800259c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d118      	bne.n	80025da <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025be:	4311      	orrs	r1, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025ca:	430a      	orrs	r2, r1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	e007      	b.n	80025ea <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d10c      	bne.n	800260c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f023 010f 	bic.w	r1, r3, #15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
 800260a:	e007      	b.n	800261c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 020f 	bic.w	r2, r2, #15
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f023 0303 	bic.w	r3, r3, #3
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
 800262c:	e007      	b.n	800263e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800263e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000000 	.word	0x20000000
 800264c:	053e2d63 	.word	0x053e2d63
 8002650:	50040000 	.word	0x50040000
 8002654:	50040300 	.word	0x50040300
 8002658:	fff0c007 	.word	0xfff0c007

0800265c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe8c 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d167      	bne.n	8002748 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start_DMA+0x2a>
 8002682:	2302      	movs	r3, #2
 8002684:	e063      	b.n	800274e <HAL_ADC_Start_DMA+0xf2>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fc68 	bl	8002f64 <ADC_Enable>
 8002694:	4603      	mov	r3, r0
 8002696:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d14f      	bne.n	800273e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f023 0206 	bic.w	r2, r3, #6
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <HAL_ADC_Start_DMA+0xfc>)
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a1f      	ldr	r2, [pc, #124]	; (800275c <HAL_ADC_Start_DMA+0x100>)
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_ADC_Start_DMA+0x104>)
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	221c      	movs	r2, #28
 80026f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0210 	orr.w	r2, r2, #16
 8002708:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3340      	adds	r3, #64	; 0x40
 8002724:	4619      	mov	r1, r3
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f000 feff 	bl	800352c <HAL_DMA_Start_IT>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fe13 	bl	8002362 <LL_ADC_REG_StartConversion>
 800273c:	e006      	b.n	800274c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002746:	e001      	b.n	800274c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002748:	2302      	movs	r3, #2
 800274a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800274c:	7dfb      	ldrb	r3, [r7, #23]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	08003071 	.word	0x08003071
 800275c:	08003149 	.word	0x08003149
 8002760:	08003165 	.word	0x08003165

08002764 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0b6      	sub	sp, #216	; 0xd8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x22>
 80027be:	2302      	movs	r3, #2
 80027c0:	e3bb      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x79a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fddb 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 83a0 	bne.w	8002f1c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d824      	bhi.n	8002836 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	3b02      	subs	r3, #2
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d81b      	bhi.n	800282e <HAL_ADC_ConfigChannel+0x8e>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <HAL_ADC_ConfigChannel+0x5c>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002815 	.word	0x08002815
 8002804:	0800281d 	.word	0x0800281d
 8002808:	08002825 	.word	0x08002825
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800280c:	230c      	movs	r3, #12
 800280e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002812:	e010      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002814:	2312      	movs	r3, #18
 8002816:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800281a:	e00c      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800281c:	2318      	movs	r3, #24
 800281e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002822:	e008      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800282c:	e003      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800282e:	2306      	movs	r3, #6
 8002830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002834:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002844:	f7ff fc9c 	bl	8002180 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd9c 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 8002852:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fda8 	bl	80023b0 <LL_ADC_INJ_IsConversionOngoing>
 8002860:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 81a4 	bne.w	8002bb6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800286e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 819f 	bne.w	8002bb6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff fca7 	bl	80021d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00a      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6919      	ldr	r1, [r3, #16]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028bc:	f7ff fbf8 	bl	80020b0 <LL_ADC_SetOffset>
 80028c0:	e179      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fc15 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x14e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fc0a 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	e01e      	b.n	800292c <HAL_ADC_ConfigChannel+0x18c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fbff 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800290c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1a4>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	e018      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1d6>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800295c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002976:	429a      	cmp	r2, r3
 8002978:	d106      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fbce 	bl	8002124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fbb2 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x214>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fba7 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	e01e      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x252>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fb9c 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80029d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80029da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x26a>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	e018      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x29c>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fb6b 	bl	8002124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fb4f 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x2da>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fb44 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x318>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fb39 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e004      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x330>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	e014      	b.n	8002afa <HAL_ADC_ConfigChannel+0x35a>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e004      	b.n	8002afa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d106      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fb0c 	bl	8002124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2103      	movs	r1, #3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff faf0 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x398>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2103      	movs	r1, #3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fae5 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	e017      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x3c8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fada 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e003      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x3e0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	e011      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x404>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b90:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2103      	movs	r1, #3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fab7 	bl	8002124 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fbbe 	bl	800233c <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8140 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff fb2b 	bl	8002230 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a8f      	ldr	r2, [pc, #572]	; (8002e1c <HAL_ADC_ConfigChannel+0x67c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	f040 8131 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x46e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	bf94      	ite	ls
 8002c06:	2301      	movls	r3, #1
 8002c08:	2300      	movhi	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e019      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4a2>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e003      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d079      	beq.n	8002d3a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x4c2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	3301      	adds	r3, #1
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c60:	e015      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x4ee>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c72:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x50e>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	e017      	b.n	8002cde <HAL_ADC_ConfigChannel+0x53e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	ea42 0103 	orr.w	r1, r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x564>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	0e9b      	lsrs	r3, r3, #26
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 021f 	and.w	r2, r3, #31
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	051b      	lsls	r3, r3, #20
 8002d02:	e018      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x596>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d36:	430b      	orrs	r3, r1
 8002d38:	e081      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x5b6>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	069b      	lsls	r3, r3, #26
 8002d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d54:	e015      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x5e2>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x602>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	3301      	adds	r3, #1
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	e017      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x632>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	61bb      	str	r3, [r7, #24]
  return result;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e003      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	ea42 0103 	orr.w	r1, r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x65e>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	e01e      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x69c>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e16:	2320      	movs	r3, #32
 8002e18:	e006      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x688>
 8002e1a:	bf00      	nop
 8002e1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	3b1e      	subs	r3, #30
 8002e36:	051b      	lsls	r3, r3, #20
 8002e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7ff f9c8 	bl	80021d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d06c      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e54:	483c      	ldr	r0, [pc, #240]	; (8002f48 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e56:	f7ff f91d 	bl	8002094 <LL_ADC_GetCommonPathInternalCh>
 8002e5a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <HAL_ADC_ConfigChannel+0x7ac>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d127      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d121      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d157      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e86:	4619      	mov	r1, r3
 8002e88:	482f      	ldr	r0, [pc, #188]	; (8002f48 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e8a:	f7ff f8f0 	bl	800206e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	4a30      	ldr	r2, [pc, #192]	; (8002f58 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ea8:	e002      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f9      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb6:	e03a      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_ADC_ConfigChannel+0x7bc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d113      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d12a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002edc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4819      	ldr	r0, [pc, #100]	; (8002f48 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ee4:	f7ff f8c3 	bl	800206e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee8:	e021      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d11c      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d111      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f12:	4619      	mov	r1, r3
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f16:	f7ff f8aa 	bl	800206e <LL_ADC_SetCommonPathInternalCh>
 8002f1a:	e008      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	37d8      	adds	r7, #216	; 0xd8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	80080000 	.word	0x80080000
 8002f48:	50040300 	.word	0x50040300
 8002f4c:	c7520000 	.word	0xc7520000
 8002f50:	50040000 	.word	0x50040000
 8002f54:	20000000 	.word	0x20000000
 8002f58:	053e2d63 	.word	0x053e2d63
 8002f5c:	cb840000 	.word	0xcb840000
 8002f60:	80000001 	.word	0x80000001

08002f64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f9e1 	bl	800233c <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d169      	bne.n	8003054 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <ADC_Enable+0xfc>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e055      	b.n	8003056 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f9b0 	bl	8002314 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fb4:	482b      	ldr	r0, [pc, #172]	; (8003064 <ADC_Enable+0x100>)
 8002fb6:	f7ff f86d 	bl	8002094 <LL_ADC_GetCommonPathInternalCh>
 8002fba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <ADC_Enable+0x104>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	4a28      	ldr	r2, [pc, #160]	; (800306c <ADC_Enable+0x108>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fde:	e002      	b.n	8002fe6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f9      	bne.n	8002fe0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fffc 	bl	8001fe8 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ff2:	e028      	b.n	8003046 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f99f 	bl	800233c <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f983 	bl	8002314 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800300e:	f7fe ffeb 	bl	8001fe8 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d914      	bls.n	8003046 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d00d      	beq.n	8003046 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d1cf      	bne.n	8002ff4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	8000003f 	.word	0x8000003f
 8003064:	50040300 	.word	0x50040300
 8003068:	20000000 	.word	0x20000000
 800306c:	053e2d63 	.word	0x053e2d63

08003070 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003086:	2b00      	cmp	r3, #0
 8003088:	d14b      	bne.n	8003122 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d021      	beq.n	80030e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f856 	bl	800215a <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d032      	beq.n	800311a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d12b      	bne.n	800311a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11f      	bne.n	800311a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
 80030e6:	e018      	b.n	800311a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d111      	bne.n	800311a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fb22 	bl	8002764 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003120:	e00e      	b.n	8003140 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff fb2c 	bl	800278c <HAL_ADC_ErrorCallback>
}
 8003134:	e004      	b.n	8003140 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fb0e 	bl	8002778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff fafe 	bl	800278c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	; (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	; (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
         );
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f7ff ff8e 	bl	8003238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff29 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff3e 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff8e 	bl	800328c <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5d 	bl	8003238 <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff31 	bl	80031fc <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa2 	bl	80032f4 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e098      	b.n	8003500 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b4d      	ldr	r3, [pc, #308]	; (800350c <HAL_DMA_Init+0x150>)
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d80f      	bhi.n	80033fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <HAL_DMA_Init+0x154>)
 80033e2:	4413      	add	r3, r2
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <HAL_DMA_Init+0x158>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	009a      	lsls	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a48      	ldr	r2, [pc, #288]	; (8003518 <HAL_DMA_Init+0x15c>)
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
 80033f8:	e00e      	b.n	8003418 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_DMA_Init+0x160>)
 8003402:	4413      	add	r3, r2
 8003404:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_DMA_Init+0x158>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	009a      	lsls	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a42      	ldr	r2, [pc, #264]	; (8003520 <HAL_DMA_Init+0x164>)
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800343c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003472:	d039      	beq.n	80034e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_DMA_Init+0x15c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d11a      	bne.n	80034b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800347e:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_DMA_Init+0x168>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f003 031c 	and.w	r3, r3, #28
 800348a:	210f      	movs	r1, #15
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	4924      	ldr	r1, [pc, #144]	; (8003524 <HAL_DMA_Init+0x168>)
 8003494:	4013      	ands	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_DMA_Init+0x168>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f003 031c 	and.w	r3, r3, #28
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	491d      	ldr	r1, [pc, #116]	; (8003524 <HAL_DMA_Init+0x168>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
 80034b2:	e019      	b.n	80034e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034b4:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <HAL_DMA_Init+0x16c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	f003 031c 	and.w	r3, r3, #28
 80034c0:	210f      	movs	r1, #15
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	4917      	ldr	r1, [pc, #92]	; (8003528 <HAL_DMA_Init+0x16c>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_DMA_Init+0x16c>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f003 031c 	and.w	r3, r3, #28
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	4911      	ldr	r1, [pc, #68]	; (8003528 <HAL_DMA_Init+0x16c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40020407 	.word	0x40020407
 8003510:	bffdfff8 	.word	0xbffdfff8
 8003514:	cccccccd 	.word	0xcccccccd
 8003518:	40020000 	.word	0x40020000
 800351c:	bffdfbf8 	.word	0xbffdfbf8
 8003520:	40020400 	.word	0x40020400
 8003524:	400200a8 	.word	0x400200a8
 8003528:	400204a8 	.word	0x400204a8

0800352c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_DMA_Start_IT+0x20>
 8003548:	2302      	movs	r3, #2
 800354a:	e04b      	b.n	80035e4 <HAL_DMA_Start_IT+0xb8>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d13a      	bne.n	80035d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f8ee 	bl	8003766 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 020e 	orr.w	r2, r2, #14
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00f      	b.n	80035c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 020a 	orr.w	r2, r2, #10
 80035c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e005      	b.n	80035e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f003 031c 	and.w	r3, r3, #28
 800360c:	2204      	movs	r2, #4
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d026      	beq.n	8003666 <HAL_DMA_IRQHandler+0x7a>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d021      	beq.n	8003666 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f003 021c 	and.w	r2, r3, #28
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2104      	movs	r1, #4
 800364e:	fa01 f202 	lsl.w	r2, r1, r2
 8003652:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	2b00      	cmp	r3, #0
 800365a:	d071      	beq.n	8003740 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003664:	e06c      	b.n	8003740 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f003 031c 	and.w	r3, r3, #28
 800366e:	2202      	movs	r2, #2
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02e      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xec>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d029      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 020a 	bic.w	r2, r2, #10
 80036a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f003 021c 	and.w	r2, r3, #28
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2102      	movs	r1, #2
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d038      	beq.n	8003740 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036d6:	e033      	b.n	8003740 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f003 031c 	and.w	r3, r3, #28
 80036e0:	2208      	movs	r2, #8
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02a      	beq.n	8003742 <HAL_DMA_IRQHandler+0x156>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d025      	beq.n	8003742 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 020e 	bic.w	r2, r2, #14
 8003704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f003 021c 	and.w	r2, r3, #28
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003740:	bf00      	nop
 8003742:	bf00      	nop
}
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003758:	b2db      	uxtb	r3, r3
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 021c 	and.w	r2, r3, #28
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f202 	lsl.w	r2, r1, r2
 8003786:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b10      	cmp	r3, #16
 8003796:	d108      	bne.n	80037aa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037a8:	e007      	b.n	80037ba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	60da      	str	r2, [r3, #12]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d6:	e148      	b.n	8003a6a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 813a 	beq.w	8003a64 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d005      	beq.n	8003808 <HAL_GPIO_Init+0x40>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d130      	bne.n	800386a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383e:	2201      	movs	r2, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0201 	and.w	r2, r3, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d017      	beq.n	80038a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d123      	bne.n	80038fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	6939      	ldr	r1, [r7, #16]
 80038f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8094 	beq.w	8003a64 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <HAL_GPIO_Init+0x2c0>)
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <HAL_GPIO_Init+0x2c0>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6613      	str	r3, [r2, #96]	; 0x60
 8003948:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <HAL_GPIO_Init+0x2c0>)
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003954:	4a4d      	ldr	r2, [pc, #308]	; (8003a8c <HAL_GPIO_Init+0x2c4>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800397e:	d00d      	beq.n	800399c <HAL_GPIO_Init+0x1d4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_GPIO_Init+0x2c8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <HAL_GPIO_Init+0x1d0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a42      	ldr	r2, [pc, #264]	; (8003a94 <HAL_GPIO_Init+0x2cc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_GPIO_Init+0x1cc>
 8003990:	2302      	movs	r3, #2
 8003992:	e004      	b.n	800399e <HAL_GPIO_Init+0x1d6>
 8003994:	2307      	movs	r3, #7
 8003996:	e002      	b.n	800399e <HAL_GPIO_Init+0x1d6>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <HAL_GPIO_Init+0x1d6>
 800399c:	2300      	movs	r3, #0
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	f002 0203 	and.w	r2, r2, #3
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	4093      	lsls	r3, r2
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ae:	4937      	ldr	r1, [pc, #220]	; (8003a8c <HAL_GPIO_Init+0x2c4>)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	3302      	adds	r3, #2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039e0:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039e6:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a0a:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <HAL_GPIO_Init+0x2d0>)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3301      	adds	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f aeaf 	bne.w	80037d8 <HAL_GPIO_Init+0x10>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	48000400 	.word	0x48000400
 8003a94:	48000800 	.word	0x48000800
 8003a98:	40010400 	.word	0x40010400

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab8:	e002      	b.n	8003ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0c3      	b.n	8003c6a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d101      	bne.n	8003af2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0bb      	b.n	8003c6a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d101      	bne.n	8003b02 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0b3      	b.n	8003c6a <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd ffc2 	bl	8001aa8 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b32:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d11b      	bne.n	8003b74 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003b46:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6891      	ldr	r1, [r2, #8]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68d2      	ldr	r2, [r2, #12]
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6992      	ldr	r2, [r2, #24]
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6912      	ldr	r2, [r2, #16]
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6952      	ldr	r2, [r2, #20]
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	69d2      	ldr	r2, [r2, #28]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d115      	bne.n	8003ba8 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003b86:	f023 030e 	bic.w	r3, r3, #14
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6891      	ldr	r1, [r2, #8]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	4311      	orrs	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6952      	ldr	r2, [r2, #20]
 8003b98:	4311      	orrs	r1, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	69d2      	ldr	r2, [r2, #28]
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d118      	bne.n	8003be2 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003bba:	f023 030e 	bic.w	r3, r3, #14
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6891      	ldr	r1, [r2, #8]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6912      	ldr	r2, [r2, #16]
 8003bcc:	4311      	orrs	r1, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6952      	ldr	r2, [r2, #20]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	69d2      	ldr	r2, [r2, #28]
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bea:	d12a      	bne.n	8003c42 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d013      	beq.n	8003c1c <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c0c:	f023 031f 	bic.w	r3, r3, #31
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6053      	str	r3, [r2, #4]
 8003c1a:	e012      	b.n	8003c42 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c34:	f023 031f 	bic.w	r3, r3, #31
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_OPAMP_Init+0x1a8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4909      	ldr	r1, [pc, #36]	; (8003c74 <HAL_OPAMP_Init+0x1a8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40007800 	.word	0x40007800

08003c78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40007000 	.word	0x40007000

08003c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d130      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d038      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2232      	movs	r2, #50	; 0x32
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	e002      	b.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f2      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d110      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e00f      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d007      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007000 	.word	0x40007000
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	431bde83 	.word	0x431bde83

08003d60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f000 bc02 	b.w	8004578 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d74:	4b96      	ldr	r3, [pc, #600]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7e:	4b94      	ldr	r3, [pc, #592]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80e4 	beq.w	8003f5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_RCC_OscConfig+0x4c>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	f040 808b 	bne.w	8003eba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	f040 8087 	bne.w	8003eba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dac:	4b88      	ldr	r3, [pc, #544]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x64>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e3d9      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	4b81      	ldr	r3, [pc, #516]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <HAL_RCC_OscConfig+0x7e>
 8003dd4:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ddc:	e005      	b.n	8003dea <HAL_RCC_OscConfig+0x8a>
 8003dde:	4b7c      	ldr	r3, [pc, #496]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d223      	bcs.n	8003e36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fd8c 	bl	8004910 <RCC_SetFlashLatencyFromMSIRange>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e3ba      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e02:	4b73      	ldr	r3, [pc, #460]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b70      	ldr	r3, [pc, #448]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	496d      	ldr	r1, [pc, #436]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	4968      	ldr	r1, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
 8003e34:	e025      	b.n	8003e82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e36:	4b66      	ldr	r3, [pc, #408]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a65      	ldr	r2, [pc, #404]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	f043 0308 	orr.w	r3, r3, #8
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4960      	ldr	r1, [pc, #384]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e54:	4b5e      	ldr	r3, [pc, #376]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	495b      	ldr	r1, [pc, #364]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fd4c 	bl	8004910 <RCC_SetFlashLatencyFromMSIRange>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e37a      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e82:	f000 fc81 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	4950      	ldr	r1, [pc, #320]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <HAL_RCC_OscConfig+0x278>)
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe f84e 	bl	8001f48 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d052      	beq.n	8003f5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	e35e      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d032      	beq.n	8003f28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ece:	f7fe f88b 	bl	8001fe8 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed6:	f7fe f887 	bl	8001fe8 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e347      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003efa:	f043 0308 	orr.w	r3, r3, #8
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4930      	ldr	r1, [pc, #192]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	492b      	ldr	r1, [pc, #172]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
 8003f26:	e01a      	b.n	8003f5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f28:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a28      	ldr	r2, [pc, #160]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f34:	f7fe f858 	bl	8001fe8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f3c:	f7fe f854 	bl	8001fe8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e314      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1dc>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d073      	beq.n	8004052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_OscConfig+0x21c>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d10e      	bne.n	8003f94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d10b      	bne.n	8003f94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d063      	beq.n	8004050 <HAL_RCC_OscConfig+0x2f0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d15f      	bne.n	8004050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e2f1      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d106      	bne.n	8003fac <HAL_RCC_OscConfig+0x24c>
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e025      	b.n	8003ff8 <HAL_RCC_OscConfig+0x298>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb4:	d114      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x280>
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e013      	b.n	8003ff8 <HAL_RCC_OscConfig+0x298>
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	080069f8 	.word	0x080069f8
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004
 8003fe0:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a9f      	ldr	r2, [pc, #636]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b9d      	ldr	r3, [pc, #628]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a9c      	ldr	r2, [pc, #624]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd fff2 	bl	8001fe8 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd ffee 	bl	8001fe8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e2ae      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	4b92      	ldr	r3, [pc, #584]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x2a8>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd ffde 	bl	8001fe8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd ffda 	bl	8001fe8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e29a      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x2d0>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d060      	beq.n	8004120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x310>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d119      	bne.n	800409e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d116      	bne.n	800409e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_OscConfig+0x328>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e277      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b76      	ldr	r3, [pc, #472]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	4973      	ldr	r1, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	e040      	b.n	8004120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d023      	beq.n	80040ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a6:	4b6f      	ldr	r3, [pc, #444]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6e      	ldr	r2, [pc, #440]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd ff99 	bl	8001fe8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd ff95 	bl	8001fe8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e255      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040cc:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b62      	ldr	r3, [pc, #392]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	495f      	ldr	r1, [pc, #380]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	e018      	b.n	8004120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ee:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a5c      	ldr	r2, [pc, #368]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80040f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd ff75 	bl	8001fe8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fd ff71 	bl	8001fe8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e231      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d03c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd ff50 	bl	8001fe8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd ff4c 	bl	8001fe8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e20c      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCC_OscConfig+0x3ec>
 800416c:	e01b      	b.n	80041a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004174:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fd ff33 	bl	8001fe8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004186:	f7fd ff2f 	bl	8001fe8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1ef      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004198:	4b32      	ldr	r3, [pc, #200]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80a6 	beq.w	8004300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	4a26      	ldr	r2, [pc, #152]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6593      	str	r3, [r2, #88]	; 0x58
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_RCC_OscConfig+0x508>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d118      	bne.n	800421e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <HAL_RCC_OscConfig+0x508>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <HAL_RCC_OscConfig+0x508>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f8:	f7fd fef6 	bl	8001fe8 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fd fef2 	bl	8001fe8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1b2      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <HAL_RCC_OscConfig+0x508>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x4d8>
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004236:	e029      	b.n	800428c <HAL_RCC_OscConfig+0x52c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b05      	cmp	r3, #5
 800423e:	d115      	bne.n	800426c <HAL_RCC_OscConfig+0x50c>
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a03      	ldr	r2, [pc, #12]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004260:	e014      	b.n	800428c <HAL_RCC_OscConfig+0x52c>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
 800426c:	4b9a      	ldr	r3, [pc, #616]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	4a99      	ldr	r2, [pc, #612]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800427c:	4b96      	ldr	r3, [pc, #600]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	4a95      	ldr	r2, [pc, #596]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd fea8 	bl	8001fe8 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fd fea4 	bl	8001fe8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e162      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	4b89      	ldr	r3, [pc, #548]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ed      	beq.n	800429c <HAL_RCC_OscConfig+0x53c>
 80042c0:	e015      	b.n	80042ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd fe91 	bl	8001fe8 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fd fe8d 	bl	8001fe8 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e14b      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e0:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ed      	bne.n	80042ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f4:	4b78      	ldr	r3, [pc, #480]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80042fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03c      	beq.n	8004386 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01c      	beq.n	800434e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004314:	4b70      	ldr	r3, [pc, #448]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800431a:	4a6f      	ldr	r2, [pc, #444]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fe60 	bl	8001fe8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432c:	f7fd fe5c 	bl	8001fe8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e11c      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800433e:	4b66      	ldr	r3, [pc, #408]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ef      	beq.n	800432c <HAL_RCC_OscConfig+0x5cc>
 800434c:	e01b      	b.n	8004386 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800434e:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004354:	4a60      	ldr	r2, [pc, #384]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fe43 	bl	8001fe8 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004366:	f7fd fe3f 	bl	8001fe8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e0ff      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004378:	4b57      	ldr	r3, [pc, #348]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 800437a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1ef      	bne.n	8004366 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80f3 	beq.w	8004576 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	f040 80c9 	bne.w	800452c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800439a:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0203 	and.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d12c      	bne.n	8004408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	3b01      	subs	r3, #1
 80043ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d123      	bne.n	8004408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d11b      	bne.n	8004408 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d113      	bne.n	8004408 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d109      	bne.n	8004408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	3b01      	subs	r3, #1
 8004402:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d06b      	beq.n	80044e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d062      	beq.n	80044d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0ac      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800441e:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004428:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800442a:	f7fd fddd 	bl	8001fe8 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fd fdd9 	bl	8001fe8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e099      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004460:	3a01      	subs	r2, #1
 8004462:	0112      	lsls	r2, r2, #4
 8004464:	4311      	orrs	r1, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446a:	0212      	lsls	r2, r2, #8
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004472:	0852      	lsrs	r2, r2, #1
 8004474:	3a01      	subs	r2, #1
 8004476:	0552      	lsls	r2, r2, #21
 8004478:	4311      	orrs	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0652      	lsls	r2, r2, #25
 8004484:	4311      	orrs	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800448a:	06d2      	lsls	r2, r2, #27
 800448c:	430a      	orrs	r2, r1
 800448e:	4912      	ldr	r1, [pc, #72]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004490:	4313      	orrs	r3, r2
 8004492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ac:	f7fd fd9c 	bl	8001fe8 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fd98 	bl	8001fe8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e058      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_OscConfig+0x778>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d2:	e050      	b.n	8004576 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e04f      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e0:	4b27      	ldr	r3, [pc, #156]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d144      	bne.n	8004576 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a20      	ldr	r2, [pc, #128]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004504:	f7fd fd70 	bl	8001fe8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd fd6c 	bl	8001fe8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e02c      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x7ac>
 800452a:	e024      	b.n	8004576 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d01f      	beq.n	8004572 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 8004538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fd fd53 	bl	8001fe8 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7fd fd4f 	bl	8001fe8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00f      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4905      	ldr	r1, [pc, #20]	; (8004580 <HAL_RCC_OscConfig+0x820>)
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x824>)
 800456c:	4013      	ands	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
 8004570:	e001      	b.n	8004576 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	feeefffc 	.word	0xfeeefffc

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0e7      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b75      	ldr	r3, [pc, #468]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d910      	bls.n	80045cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 0207 	bic.w	r2, r3, #7
 80045b2:	4970      	ldr	r1, [pc, #448]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b6e      	ldr	r3, [pc, #440]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0cf      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d908      	bls.n	80045fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4960      	ldr	r1, [pc, #384]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04c      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460e:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d121      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0a6      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	4b54      	ldr	r3, [pc, #336]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e09a      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800463e:	4b4e      	ldr	r3, [pc, #312]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e08e      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e086      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b46      	ldr	r3, [pc, #280]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4943      	ldr	r1, [pc, #268]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004670:	f7fd fcba 	bl	8001fe8 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fcb6 	bl	8001fe8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e06e      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d208      	bcs.n	80046ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	492b      	ldr	r1, [pc, #172]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ce:	4b29      	ldr	r3, [pc, #164]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d210      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f023 0207 	bic.w	r2, r3, #7
 80046e4:	4923      	ldr	r1, [pc, #140]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e036      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4918      	ldr	r1, [pc, #96]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4910      	ldr	r1, [pc, #64]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800473c:	f000 f824 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	490b      	ldr	r1, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1f4>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1f8>)
 800475a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1fc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fbf1 	bl	8001f48 <HAL_InitTick>
 8004766:	4603      	mov	r3, r0
 8004768:	72fb      	strb	r3, [r7, #11]

  return status;
 800476a:	7afb      	ldrb	r3, [r7, #11]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40022000 	.word	0x40022000
 8004778:	40021000 	.word	0x40021000
 800477c:	080069f8 	.word	0x080069f8
 8004780:	20000000 	.word	0x20000000
 8004784:	20000004 	.word	0x20000004

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004796:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a0:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x34>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d121      	bne.n	80047fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11e      	bne.n	80047fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047bc:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047c8:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e005      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047e4:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f8:	e00a      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d102      	bne.n	8004806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004800:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_RCC_GetSysClockFreq+0x110>)
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e004      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d101      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800480c:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCC_GetSysClockFreq+0x114>)
 800480e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d134      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0xa6>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d003      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0xac>
 800482c:	e005      	b.n	800483a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <HAL_RCC_GetSysClockFreq+0x110>)
 8004830:	617b      	str	r3, [r7, #20]
      break;
 8004832:	e005      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCC_GetSysClockFreq+0x114>)
 8004836:	617b      	str	r3, [r7, #20]
      break;
 8004838:	e002      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	617b      	str	r3, [r7, #20]
      break;
 800483e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	3301      	adds	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	fb03 f202 	mul.w	r2, r3, r2
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0e5b      	lsrs	r3, r3, #25
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	3301      	adds	r3, #1
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004880:	69bb      	ldr	r3, [r7, #24]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3724      	adds	r7, #36	; 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	08006a10 	.word	0x08006a10
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200

080048a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000000 	.word	0x20000000

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048bc:	f7ff fff0 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	08006a08 	.word	0x08006a08

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048e8:	f7ff ffda 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0adb      	lsrs	r3, r3, #11
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	; (800490c <HAL_RCC_GetPCLK2Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	08006a08 	.word	0x08006a08

08004910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004928:	f7ff f9b6 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 800492c:	6178      	str	r0, [r7, #20]
 800492e:	e014      	b.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493a:	6593      	str	r3, [r2, #88]	; 0x58
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004948:	f7ff f9a6 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 800494c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004958:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004960:	d10b      	bne.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d919      	bls.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2ba0      	cmp	r3, #160	; 0xa0
 800496c:	d902      	bls.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800496e:	2302      	movs	r3, #2
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	e013      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004974:	2301      	movs	r3, #1
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e010      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d902      	bls.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004980:	2303      	movs	r3, #3
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e00a      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d102      	bne.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800498c:	2302      	movs	r3, #2
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e004      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b70      	cmp	r3, #112	; 0x70
 8004996:	d101      	bne.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004998:	2301      	movs	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f023 0207 	bic.w	r2, r3, #7
 80049a4:	4909      	ldr	r1, [pc, #36]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d001      	beq.n	80049be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40022000 	.word	0x40022000

080049d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d8:	2300      	movs	r3, #0
 80049da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049dc:	2300      	movs	r3, #0
 80049de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d031      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049f4:	d01a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049fa:	d814      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a04:	d10f      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004a06:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4a5c      	ldr	r2, [pc, #368]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a12:	e00c      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f9de 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	74fb      	strb	r3, [r7, #19]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a34:	4b51      	ldr	r3, [pc, #324]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	494e      	ldr	r1, [pc, #312]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a4a:	e001      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 809e 	beq.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a62:	4b46      	ldr	r3, [pc, #280]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a78:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
 8004a84:	4b3d      	ldr	r3, [pc, #244]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a90:	2301      	movs	r3, #1
 8004a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a94:	4b3a      	ldr	r3, [pc, #232]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a39      	ldr	r2, [pc, #228]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aa0:	f7fd faa2 	bl	8001fe8 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aa6:	e009      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa8:	f7fd fa9e 	bl	8001fe8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d902      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8004aba:	e005      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004abc:	4b30      	ldr	r3, [pc, #192]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ef      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d15a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ace:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d019      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b16:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d016      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fa5e 	bl	8001fe8 <HAL_GetTick>
 8004b2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b30:	f7fd fa5a 	bl	8001fe8 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d902      	bls.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	74fb      	strb	r3, [r7, #19]
            break;
 8004b46:	e006      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ec      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	4904      	ldr	r1, [pc, #16]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b72:	e009      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	74bb      	strb	r3, [r7, #18]
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004b7a:	bf00      	nop
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b88:	7c7b      	ldrb	r3, [r7, #17]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8e:	4b8a      	ldr	r3, [pc, #552]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	4a89      	ldr	r2, [pc, #548]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ba6:	4b84      	ldr	r3, [pc, #528]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bac:	f023 0203 	bic.w	r2, r3, #3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	4980      	ldr	r1, [pc, #512]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bc8:	4b7b      	ldr	r3, [pc, #492]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	f023 020c 	bic.w	r2, r3, #12
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	4978      	ldr	r1, [pc, #480]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bea:	4b73      	ldr	r3, [pc, #460]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	496f      	ldr	r1, [pc, #444]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0c:	4b6a      	ldr	r3, [pc, #424]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	4967      	ldr	r1, [pc, #412]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c2e:	4b62      	ldr	r3, [pc, #392]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	495e      	ldr	r1, [pc, #376]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	4956      	ldr	r1, [pc, #344]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c72:	4b51      	ldr	r3, [pc, #324]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	494d      	ldr	r1, [pc, #308]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d028      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c94:	4b48      	ldr	r3, [pc, #288]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	4945      	ldr	r1, [pc, #276]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb4:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a3f      	ldr	r2, [pc, #252]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbe:	60d3      	str	r3, [r2, #12]
 8004cc0:	e011      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cca:	d10c      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f882 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf2:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	492d      	ldr	r1, [pc, #180]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d10:	d106      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d12:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4a28      	ldr	r2, [pc, #160]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1c:	60d3      	str	r3, [r2, #12]
 8004d1e:	e011      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f853 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01c      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	4916      	ldr	r1, [pc, #88]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	2102      	movs	r1, #2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f830 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	4904      	ldr	r1, [pc, #16]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dac:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000

08004dbc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000

08004ddc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dea:	4b74      	ldr	r3, [pc, #464]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004df6:	4b71      	ldr	r3, [pc, #452]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0203 	and.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d10d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e0e:	4b6b      	ldr	r3, [pc, #428]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d047      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e044      	b.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d018      	beq.n	8004e62 <RCCEx_PLLSAI1_Config+0x86>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d825      	bhi.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d002      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0x62>
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d009      	beq.n	8004e50 <RCCEx_PLLSAI1_Config+0x74>
 8004e3c:	e020      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3e:	4b5f      	ldr	r3, [pc, #380]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4e:	e01a      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e50:	4b5a      	ldr	r3, [pc, #360]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e60:	e013      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e62:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7e:	e006      	b.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e004      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e96:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	4943      	ldr	r1, [pc, #268]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d17c      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eb8:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3f      	ldr	r2, [pc, #252]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd f890 	bl	8001fe8 <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ecc:	f7fd f88c 	bl	8001fe8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ede:	e005      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ef      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d15f      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004f00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	0211      	lsls	r1, r2, #8
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68d2      	ldr	r2, [r2, #12]
 8004f0e:	06d2      	lsls	r2, r2, #27
 8004f10:	430a      	orrs	r2, r1
 8004f12:	492a      	ldr	r1, [pc, #168]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
 8004f18:	e027      	b.n	8004f6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d112      	bne.n	8004f46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f20:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6892      	ldr	r2, [r2, #8]
 8004f30:	0211      	lsls	r1, r2, #8
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6912      	ldr	r2, [r2, #16]
 8004f36:	0852      	lsrs	r2, r2, #1
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0552      	lsls	r2, r2, #21
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	491f      	ldr	r1, [pc, #124]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	610b      	str	r3, [r1, #16]
 8004f44:	e011      	b.n	8004f6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6892      	ldr	r2, [r2, #8]
 8004f56:	0211      	lsls	r1, r2, #8
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6952      	ldr	r2, [r2, #20]
 8004f5c:	0852      	lsrs	r2, r2, #1
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	0652      	lsls	r2, r2, #25
 8004f62:	430a      	orrs	r2, r1
 8004f64:	4915      	ldr	r1, [pc, #84]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd f837 	bl	8001fe8 <HAL_GetTick>
 8004f7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7c:	e009      	b.n	8004f92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f7e:	f7fd f833 	bl	8001fe8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d902      	bls.n	8004f92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	73fb      	strb	r3, [r7, #15]
          break;
 8004f90:	e005      	b.n	8004f9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ef      	beq.n	8004f7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	4903      	ldr	r1, [pc, #12]	; (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e095      	b.n	80050fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe2:	d009      	beq.n	8004ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	61da      	str	r2, [r3, #28]
 8004fea:	e005      	b.n	8004ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fc fd86 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005038:	d902      	bls.n	8005040 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e002      	b.n	8005046 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005044:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800504e:	d007      	beq.n	8005060 <HAL_SPI_Init+0xa0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	ea42 0103 	orr.w	r1, r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	f003 0204 	and.w	r2, r3, #4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050dc:	ea42 0103 	orr.w	r1, r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b088      	sub	sp, #32
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_SPI_Transmit+0x22>
 8005124:	2302      	movs	r3, #2
 8005126:	e15f      	b.n	80053e8 <HAL_SPI_Transmit+0x2e2>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005130:	f7fc ff5a 	bl	8001fe8 <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d002      	beq.n	800514c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800514a:	e148      	b.n	80053de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Transmit+0x52>
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800515c:	e13f      	b.n	80053de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2203      	movs	r2, #3
 8005162:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d10f      	bne.n	80051ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f0:	d94f      	bls.n	8005292 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_Transmit+0xfa>
 80051fa:	8afb      	ldrh	r3, [r7, #22]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d142      	bne.n	8005286 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005224:	e02f      	b.n	8005286 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d112      	bne.n	800525a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	881a      	ldrh	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005258:	e015      	b.n	8005286 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525a:	f7fc fec5 	bl	8001fe8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d803      	bhi.n	8005272 <HAL_SPI_Transmit+0x16c>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d102      	bne.n	8005278 <HAL_SPI_Transmit+0x172>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005284:	e0ab      	b.n	80053de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ca      	bne.n	8005226 <HAL_SPI_Transmit+0x120>
 8005290:	e080      	b.n	8005394 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_Transmit+0x19a>
 800529a:	8afb      	ldrh	r3, [r7, #22]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d174      	bne.n	800538a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d912      	bls.n	80052d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b02      	subs	r3, #2
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052ce:	e05c      	b.n	800538a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052f6:	e048      	b.n	800538a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d12b      	bne.n	800535e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d912      	bls.n	8005336 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	1c9a      	adds	r2, r3, #2
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b02      	subs	r3, #2
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005334:	e029      	b.n	800538a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	330c      	adds	r3, #12
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800535c:	e015      	b.n	800538a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800535e:	f7fc fe43 	bl	8001fe8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d803      	bhi.n	8005376 <HAL_SPI_Transmit+0x270>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d102      	bne.n	800537c <HAL_SPI_Transmit+0x276>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005388:	e029      	b.n	80053de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1b1      	bne.n	80052f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fad7 	bl	800594c <SPI_EndRxTxTransaction>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e003      	b.n	80053de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_SPI_Transmit_DMA+0x20>
 800540c:	2302      	movs	r3, #2
 800540e:	e0d4      	b.n	80055ba <HAL_SPI_Transmit_DMA+0x1ca>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d002      	beq.n	800542a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005424:	2302      	movs	r3, #2
 8005426:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005428:	e0c2      	b.n	80055b0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_SPI_Transmit_DMA+0x46>
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
    goto error;
 800543a:	e0b9      	b.n	80055b0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005486:	d10f      	bne.n	80054a8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005496:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	4a45      	ldr	r2, [pc, #276]	; (80055c4 <HAL_SPI_Transmit_DMA+0x1d4>)
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	4a44      	ldr	r2, [pc, #272]	; (80055c8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80054b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	4a43      	ldr	r2, [pc, #268]	; (80055cc <HAL_SPI_Transmit_DMA+0x1dc>)
 80054be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	2200      	movs	r2, #0
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054d6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e0:	d82d      	bhi.n	800553e <HAL_SPI_Transmit_DMA+0x14e>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d127      	bne.n	800553e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800550a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005510:	b29b      	uxth	r3, r3
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800551a:	e010      	b.n	800553e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	b29b      	uxth	r3, r3
 8005536:	3301      	adds	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	4619      	mov	r1, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005554:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005556:	f7fd ffe9 	bl	800352c <HAL_DMA_Start_IT>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005564:	f043 0210 	orr.w	r2, r3, #16
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005570:	e01e      	b.n	80055b0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d007      	beq.n	8005590 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0220 	orr.w	r2, r2, #32
 800559e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0202 	orr.w	r2, r2, #2
 80055ae:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	080056b3 	.word	0x080056b3
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	080056cf 	.word	0x080056cf

080055d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561a:	f7fc fce5 	bl	8001fe8 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	d03b      	beq.n	80056a6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0220 	bic.w	r2, r2, #32
 800563c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0202 	bic.w	r2, r2, #2
 800564c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	2164      	movs	r1, #100	; 0x64
 8005652:	6978      	ldr	r0, [r7, #20]
 8005654:	f000 f97a 	bl	800594c <SPI_EndRxTxTransaction>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff ffaa 	bl	80055f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80056a4:	e002      	b.n	80056ac <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7ff ff92 	bl	80055d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff ff8f 	bl	80055e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0203 	bic.w	r2, r2, #3
 80056ea:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	f043 0210 	orr.w	r2, r3, #16
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ff79 	bl	80055f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005720:	f7fc fc62 	bl	8001fe8 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	4413      	add	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005730:	f7fc fc5a 	bl	8001fe8 <HAL_GetTick>
 8005734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005736:	4b39      	ldr	r3, [pc, #228]	; (800581c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	015b      	lsls	r3, r3, #5
 800573c:	0d1b      	lsrs	r3, r3, #20
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	fb02 f303 	mul.w	r3, r2, r3
 8005744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005746:	e054      	b.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d050      	beq.n	80057f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005750:	f7fc fc4a 	bl	8001fe8 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	429a      	cmp	r2, r3
 800575e:	d902      	bls.n	8005766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d13d      	bne.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d111      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005788:	d004      	beq.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d107      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d10f      	bne.n	80057ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e017      	b.n	8005812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4013      	ands	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	429a      	cmp	r2, r3
 800580e:	d19b      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000000 	.word	0x20000000

08005820 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	; 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005832:	f7fc fbd9 	bl	8001fe8 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4413      	add	r3, r2
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005842:	f7fc fbd1 	bl	8001fe8 <HAL_GetTick>
 8005846:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005850:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00da      	lsls	r2, r3, #3
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	0d1b      	lsrs	r3, r3, #20
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005868:	e060      	b.n	800592c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005870:	d107      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005880:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d050      	beq.n	800592c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800588a:	f7fc fbad 	bl	8001fe8 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005896:	429a      	cmp	r2, r3
 8005898:	d902      	bls.n	80058a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d13d      	bne.n	800591c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b8:	d111      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c2:	d004      	beq.n	80058ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d107      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e6:	d10f      	bne.n	8005908 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005906:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e010      	b.n	800593e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	3b01      	subs	r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d196      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000000 	.word	0x20000000

0800594c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff ff5b 	bl	8005820 <SPI_WaitFifoStateUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e027      	b.n	80059d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fec0 	bl	8005710 <SPI_WaitFlagStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e014      	b.n	80059d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff34 	bl	8005820 <SPI_WaitFifoStateUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e000      	b.n	80059d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e049      	b.n	8005a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc f900 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 f9b4 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e03b      	b.n	8005b18 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_TIM_Base_Start_IT+0x9c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x4e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x4e>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d115      	bne.n	8005b02 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_TIM_Base_Start_IT+0xa4>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b06      	cmp	r3, #6
 8005ae6:	d015      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x8c>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aee:	d011      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b00:	e008      	b.n	8005b14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e000      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	00010007 	.word	0x00010007

08005b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d020      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0202 	mvn.w	r2, #2
 8005b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8e4 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8d6 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8e7 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d020      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0204 	mvn.w	r2, #4
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8be 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8b0 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f8c1 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d020      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0208 	mvn.w	r2, #8
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2204      	movs	r2, #4
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f898 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f88a 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f89b 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0210 	mvn.w	r2, #16
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f872 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f864 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f875 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0201 	mvn.w	r2, #1
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb fd84 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f8d0 	bl	8005e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8c8 	bl	8005e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f834 	bl	8005d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0220 	mvn.w	r2, #32
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f890 	bl	8005e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <TIM_Base_SetConfig+0xbc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x20>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_Base_SetConfig+0xbc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_Base_SetConfig+0x52>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d007      	beq.n	8005dd6 <TIM_Base_SetConfig+0x52>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <TIM_Base_SetConfig+0xc0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_Base_SetConfig+0x52>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <TIM_Base_SetConfig+0xc4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a0c      	ldr	r2, [pc, #48]	; (8005e40 <TIM_Base_SetConfig+0xbc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_Base_SetConfig+0xa0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <TIM_Base_SetConfig+0xc0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_Base_SetConfig+0xa0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <TIM_Base_SetConfig+0xc4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d103      	bne.n	8005e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	615a      	str	r2, [r3, #20]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400

08005e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e040      	b.n	8005f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fb fed0 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa54 	bl	800637c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f825 	bl	8005f24 <UART_SetConfig>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e01b      	b.n	8005f1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fad3 	bl	80064c0 <UART_CheckIdleState>
 8005f1a:	4603      	mov	r3, r0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f28:	b08a      	sub	sp, #40	; 0x28
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4bb4      	ldr	r3, [pc, #720]	; (8006224 <UART_SetConfig+0x300>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4aa9      	ldr	r2, [pc, #676]	; (8006228 <UART_SetConfig+0x304>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4aa0      	ldr	r2, [pc, #640]	; (800622c <UART_SetConfig+0x308>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d126      	bne.n	8005ffc <UART_SetConfig+0xd8>
 8005fae:	4ba0      	ldr	r3, [pc, #640]	; (8006230 <UART_SetConfig+0x30c>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d81b      	bhi.n	8005ff4 <UART_SetConfig+0xd0>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xa0>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fda:	e080      	b.n	80060de <UART_SetConfig+0x1ba>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe2:	e07c      	b.n	80060de <UART_SetConfig+0x1ba>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fea:	e078      	b.n	80060de <UART_SetConfig+0x1ba>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff2:	e074      	b.n	80060de <UART_SetConfig+0x1ba>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffa:	e070      	b.n	80060de <UART_SetConfig+0x1ba>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a8c      	ldr	r2, [pc, #560]	; (8006234 <UART_SetConfig+0x310>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d138      	bne.n	8006078 <UART_SetConfig+0x154>
 8006006:	4b8a      	ldr	r3, [pc, #552]	; (8006230 <UART_SetConfig+0x30c>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d82d      	bhi.n	8006070 <UART_SetConfig+0x14c>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0xf8>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006051 	.word	0x08006051
 8006020:	08006071 	.word	0x08006071
 8006024:	08006071 	.word	0x08006071
 8006028:	08006071 	.word	0x08006071
 800602c:	08006061 	.word	0x08006061
 8006030:	08006071 	.word	0x08006071
 8006034:	08006071 	.word	0x08006071
 8006038:	08006071 	.word	0x08006071
 800603c:	08006059 	.word	0x08006059
 8006040:	08006071 	.word	0x08006071
 8006044:	08006071 	.word	0x08006071
 8006048:	08006071 	.word	0x08006071
 800604c:	08006069 	.word	0x08006069
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e042      	b.n	80060de <UART_SetConfig+0x1ba>
 8006058:	2302      	movs	r3, #2
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e03e      	b.n	80060de <UART_SetConfig+0x1ba>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e03a      	b.n	80060de <UART_SetConfig+0x1ba>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e036      	b.n	80060de <UART_SetConfig+0x1ba>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e032      	b.n	80060de <UART_SetConfig+0x1ba>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a6a      	ldr	r2, [pc, #424]	; (8006228 <UART_SetConfig+0x304>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d12a      	bne.n	80060d8 <UART_SetConfig+0x1b4>
 8006082:	4b6b      	ldr	r3, [pc, #428]	; (8006230 <UART_SetConfig+0x30c>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800608c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006090:	d01a      	beq.n	80060c8 <UART_SetConfig+0x1a4>
 8006092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006096:	d81b      	bhi.n	80060d0 <UART_SetConfig+0x1ac>
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d00c      	beq.n	80060b8 <UART_SetConfig+0x194>
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a2:	d815      	bhi.n	80060d0 <UART_SetConfig+0x1ac>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <UART_SetConfig+0x18c>
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d008      	beq.n	80060c0 <UART_SetConfig+0x19c>
 80060ae:	e00f      	b.n	80060d0 <UART_SetConfig+0x1ac>
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b6:	e012      	b.n	80060de <UART_SetConfig+0x1ba>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e00e      	b.n	80060de <UART_SetConfig+0x1ba>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e00a      	b.n	80060de <UART_SetConfig+0x1ba>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e006      	b.n	80060de <UART_SetConfig+0x1ba>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d6:	e002      	b.n	80060de <UART_SetConfig+0x1ba>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a51      	ldr	r2, [pc, #324]	; (8006228 <UART_SetConfig+0x304>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d17a      	bne.n	80061de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d824      	bhi.n	800613a <UART_SetConfig+0x216>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <UART_SetConfig+0x1d4>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	0800613b 	.word	0x0800613b
 8006100:	08006125 	.word	0x08006125
 8006104:	0800613b 	.word	0x0800613b
 8006108:	0800612b 	.word	0x0800612b
 800610c:	0800613b 	.word	0x0800613b
 8006110:	0800613b 	.word	0x0800613b
 8006114:	0800613b 	.word	0x0800613b
 8006118:	08006133 	.word	0x08006133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611c:	f7fe fbcc 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8006120:	61f8      	str	r0, [r7, #28]
        break;
 8006122:	e010      	b.n	8006146 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006124:	4b44      	ldr	r3, [pc, #272]	; (8006238 <UART_SetConfig+0x314>)
 8006126:	61fb      	str	r3, [r7, #28]
        break;
 8006128:	e00d      	b.n	8006146 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612a:	f7fe fb2d 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 800612e:	61f8      	str	r0, [r7, #28]
        break;
 8006130:	e009      	b.n	8006146 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006136:	61fb      	str	r3, [r7, #28]
        break;
 8006138:	e005      	b.n	8006146 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006144:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8107 	beq.w	800635c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	429a      	cmp	r2, r3
 800615c:	d305      	bcc.n	800616a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	429a      	cmp	r2, r3
 8006168:	d903      	bls.n	8006172 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006170:	e0f4      	b.n	800635c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2200      	movs	r2, #0
 8006176:	461c      	mov	r4, r3
 8006178:	4615      	mov	r5, r2
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	022b      	lsls	r3, r5, #8
 8006184:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006188:	0222      	lsls	r2, r4, #8
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	6849      	ldr	r1, [r1, #4]
 800618e:	0849      	lsrs	r1, r1, #1
 8006190:	2000      	movs	r0, #0
 8006192:	4688      	mov	r8, r1
 8006194:	4681      	mov	r9, r0
 8006196:	eb12 0a08 	adds.w	sl, r2, r8
 800619a:	eb43 0b09 	adc.w	fp, r3, r9
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ac:	4650      	mov	r0, sl
 80061ae:	4659      	mov	r1, fp
 80061b0:	f7fa f80c 	bl	80001cc <__aeabi_uldivmod>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4613      	mov	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c2:	d308      	bcc.n	80061d6 <UART_SetConfig+0x2b2>
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ca:	d204      	bcs.n	80061d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	60da      	str	r2, [r3, #12]
 80061d4:	e0c2      	b.n	800635c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061dc:	e0be      	b.n	800635c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e6:	d16a      	bne.n	80062be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80061e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d834      	bhi.n	800625a <UART_SetConfig+0x336>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x2d4>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	0800623d 	.word	0x0800623d
 8006200:	08006245 	.word	0x08006245
 8006204:	0800625b 	.word	0x0800625b
 8006208:	0800624b 	.word	0x0800624b
 800620c:	0800625b 	.word	0x0800625b
 8006210:	0800625b 	.word	0x0800625b
 8006214:	0800625b 	.word	0x0800625b
 8006218:	08006253 	.word	0x08006253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621c:	f7fe fb4c 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8006220:	61f8      	str	r0, [r7, #28]
        break;
 8006222:	e020      	b.n	8006266 <UART_SetConfig+0x342>
 8006224:	efff69f3 	.word	0xefff69f3
 8006228:	40008000 	.word	0x40008000
 800622c:	40013800 	.word	0x40013800
 8006230:	40021000 	.word	0x40021000
 8006234:	40004400 	.word	0x40004400
 8006238:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800623c:	f7fe fb52 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 8006240:	61f8      	str	r0, [r7, #28]
        break;
 8006242:	e010      	b.n	8006266 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006244:	4b4c      	ldr	r3, [pc, #304]	; (8006378 <UART_SetConfig+0x454>)
 8006246:	61fb      	str	r3, [r7, #28]
        break;
 8006248:	e00d      	b.n	8006266 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624a:	f7fe fa9d 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 800624e:	61f8      	str	r0, [r7, #28]
        break;
 8006250:	e009      	b.n	8006266 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006256:	61fb      	str	r3, [r7, #28]
        break;
 8006258:	e005      	b.n	8006266 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d077      	beq.n	800635c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	005a      	lsls	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	441a      	add	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b0f      	cmp	r3, #15
 8006286:	d916      	bls.n	80062b6 <UART_SetConfig+0x392>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628e:	d212      	bcs.n	80062b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f023 030f 	bic.w	r3, r3, #15
 8006298:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	8afb      	ldrh	r3, [r7, #22]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	8afa      	ldrh	r2, [r7, #22]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	e052      	b.n	800635c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062bc:	e04e      	b.n	800635c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d827      	bhi.n	8006316 <UART_SetConfig+0x3f2>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x3a8>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006307 	.word	0x08006307
 80062e0:	08006317 	.word	0x08006317
 80062e4:	08006317 	.word	0x08006317
 80062e8:	08006317 	.word	0x08006317
 80062ec:	0800630f 	.word	0x0800630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe fae2 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 80062f4:	61f8      	str	r0, [r7, #28]
        break;
 80062f6:	e014      	b.n	8006322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f8:	f7fe faf4 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 80062fc:	61f8      	str	r0, [r7, #28]
        break;
 80062fe:	e010      	b.n	8006322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006300:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <UART_SetConfig+0x454>)
 8006302:	61fb      	str	r3, [r7, #28]
        break;
 8006304:	e00d      	b.n	8006322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006306:	f7fe fa3f 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 800630a:	61f8      	str	r0, [r7, #28]
        break;
 800630c:	e009      	b.n	8006322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	61fb      	str	r3, [r7, #28]
        break;
 8006314:	e005      	b.n	8006322 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006320:	bf00      	nop
    }

    if (pclk != 0U)
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d019      	beq.n	800635c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	085a      	lsrs	r2, r3, #1
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	441a      	add	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	fbb2 f3f3 	udiv	r3, r2, r3
 800633a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b0f      	cmp	r3, #15
 8006340:	d909      	bls.n	8006356 <UART_SetConfig+0x432>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006348:	d205      	bcs.n	8006356 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60da      	str	r2, [r3, #12]
 8006354:	e002      	b.n	800635c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006368:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800636c:	4618      	mov	r0, r3
 800636e:	3728      	adds	r7, #40	; 0x28
 8006370:	46bd      	mov	sp, r7
 8006372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006376:	bf00      	nop
 8006378:	00f42400 	.word	0x00f42400

0800637c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01a      	beq.n	8006492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647a:	d10a      	bne.n	8006492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b098      	sub	sp, #96	; 0x60
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d0:	f7fb fd8a 	bl	8001fe8 <HAL_GetTick>
 80064d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d12e      	bne.n	8006542 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f88c 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d021      	beq.n	8006542 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006512:	653b      	str	r3, [r7, #80]	; 0x50
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
 800651e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e6      	bne.n	80064fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e062      	b.n	8006608 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b04      	cmp	r3, #4
 800654e:	d149      	bne.n	80065e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f856 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d03c      	beq.n	80065e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	623b      	str	r3, [r7, #32]
   return(result);
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
 800658a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800658e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e6      	bne.n	800656a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065bc:	61fa      	str	r2, [r7, #28]
 80065be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e011      	b.n	8006608 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3758      	adds	r7, #88	; 0x58
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006620:	e049      	b.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d045      	beq.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fb fcdd 	bl	8001fe8 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <UART_WaitOnFlagUntilTimeout+0x30>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e048      	b.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d031      	beq.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b08      	cmp	r3, #8
 800665e:	d110      	bne.n	8006682 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2208      	movs	r2, #8
 8006666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f838 	bl	80066de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2208      	movs	r2, #8
 8006672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e029      	b.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800668c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006690:	d111      	bne.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800669a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f81e 	bl	80066de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e00f      	b.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d0a6      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066de:	b480      	push	{r7}
 80066e0:	b095      	sub	sp, #84	; 0x54
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006704:	643b      	str	r3, [r7, #64]	; 0x40
 8006706:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800670a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	61fb      	str	r3, [r7, #28]
   return(result);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	2b01      	cmp	r3, #1
 8006752:	d118      	bne.n	8006786 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	60bb      	str	r3, [r7, #8]
   return(result);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f023 0310 	bic.w	r3, r3, #16
 8006768:	647b      	str	r3, [r7, #68]	; 0x44
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6979      	ldr	r1, [r7, #20]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	613b      	str	r3, [r7, #16]
   return(result);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e6      	bne.n	8006754 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	669a      	str	r2, [r3, #104]	; 0x68
}
 800679a:	bf00      	nop
 800679c:	3754      	adds	r7, #84	; 0x54
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <malloc>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <malloc+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f000 b823 	b.w	80067f8 <_malloc_r>
 80067b2:	bf00      	nop
 80067b4:	20000058 	.word	0x20000058

080067b8 <sbrk_aligned>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4e0e      	ldr	r6, [pc, #56]	; (80067f4 <sbrk_aligned+0x3c>)
 80067bc:	460c      	mov	r4, r1
 80067be:	6831      	ldr	r1, [r6, #0]
 80067c0:	4605      	mov	r5, r0
 80067c2:	b911      	cbnz	r1, 80067ca <sbrk_aligned+0x12>
 80067c4:	f000 f8ac 	bl	8006920 <_sbrk_r>
 80067c8:	6030      	str	r0, [r6, #0]
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 f8a7 	bl	8006920 <_sbrk_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d00a      	beq.n	80067ec <sbrk_aligned+0x34>
 80067d6:	1cc4      	adds	r4, r0, #3
 80067d8:	f024 0403 	bic.w	r4, r4, #3
 80067dc:	42a0      	cmp	r0, r4
 80067de:	d007      	beq.n	80067f0 <sbrk_aligned+0x38>
 80067e0:	1a21      	subs	r1, r4, r0
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f89c 	bl	8006920 <_sbrk_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d101      	bne.n	80067f0 <sbrk_aligned+0x38>
 80067ec:	f04f 34ff 	mov.w	r4, #4294967295
 80067f0:	4620      	mov	r0, r4
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	20000b78 	.word	0x20000b78

080067f8 <_malloc_r>:
 80067f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067fc:	1ccd      	adds	r5, r1, #3
 80067fe:	f025 0503 	bic.w	r5, r5, #3
 8006802:	3508      	adds	r5, #8
 8006804:	2d0c      	cmp	r5, #12
 8006806:	bf38      	it	cc
 8006808:	250c      	movcc	r5, #12
 800680a:	2d00      	cmp	r5, #0
 800680c:	4607      	mov	r7, r0
 800680e:	db01      	blt.n	8006814 <_malloc_r+0x1c>
 8006810:	42a9      	cmp	r1, r5
 8006812:	d905      	bls.n	8006820 <_malloc_r+0x28>
 8006814:	230c      	movs	r3, #12
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	2600      	movs	r6, #0
 800681a:	4630      	mov	r0, r6
 800681c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006820:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068f4 <_malloc_r+0xfc>
 8006824:	f000 f868 	bl	80068f8 <__malloc_lock>
 8006828:	f8d8 3000 	ldr.w	r3, [r8]
 800682c:	461c      	mov	r4, r3
 800682e:	bb5c      	cbnz	r4, 8006888 <_malloc_r+0x90>
 8006830:	4629      	mov	r1, r5
 8006832:	4638      	mov	r0, r7
 8006834:	f7ff ffc0 	bl	80067b8 <sbrk_aligned>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	4604      	mov	r4, r0
 800683c:	d155      	bne.n	80068ea <_malloc_r+0xf2>
 800683e:	f8d8 4000 	ldr.w	r4, [r8]
 8006842:	4626      	mov	r6, r4
 8006844:	2e00      	cmp	r6, #0
 8006846:	d145      	bne.n	80068d4 <_malloc_r+0xdc>
 8006848:	2c00      	cmp	r4, #0
 800684a:	d048      	beq.n	80068de <_malloc_r+0xe6>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	4631      	mov	r1, r6
 8006850:	4638      	mov	r0, r7
 8006852:	eb04 0903 	add.w	r9, r4, r3
 8006856:	f000 f863 	bl	8006920 <_sbrk_r>
 800685a:	4581      	cmp	r9, r0
 800685c:	d13f      	bne.n	80068de <_malloc_r+0xe6>
 800685e:	6821      	ldr	r1, [r4, #0]
 8006860:	1a6d      	subs	r5, r5, r1
 8006862:	4629      	mov	r1, r5
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ffa7 	bl	80067b8 <sbrk_aligned>
 800686a:	3001      	adds	r0, #1
 800686c:	d037      	beq.n	80068de <_malloc_r+0xe6>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	442b      	add	r3, r5
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	f8d8 3000 	ldr.w	r3, [r8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d038      	beq.n	80068ee <_malloc_r+0xf6>
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	42a2      	cmp	r2, r4
 8006880:	d12b      	bne.n	80068da <_malloc_r+0xe2>
 8006882:	2200      	movs	r2, #0
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	e00f      	b.n	80068a8 <_malloc_r+0xb0>
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	1b52      	subs	r2, r2, r5
 800688c:	d41f      	bmi.n	80068ce <_malloc_r+0xd6>
 800688e:	2a0b      	cmp	r2, #11
 8006890:	d917      	bls.n	80068c2 <_malloc_r+0xca>
 8006892:	1961      	adds	r1, r4, r5
 8006894:	42a3      	cmp	r3, r4
 8006896:	6025      	str	r5, [r4, #0]
 8006898:	bf18      	it	ne
 800689a:	6059      	strne	r1, [r3, #4]
 800689c:	6863      	ldr	r3, [r4, #4]
 800689e:	bf08      	it	eq
 80068a0:	f8c8 1000 	streq.w	r1, [r8]
 80068a4:	5162      	str	r2, [r4, r5]
 80068a6:	604b      	str	r3, [r1, #4]
 80068a8:	4638      	mov	r0, r7
 80068aa:	f104 060b 	add.w	r6, r4, #11
 80068ae:	f000 f829 	bl	8006904 <__malloc_unlock>
 80068b2:	f026 0607 	bic.w	r6, r6, #7
 80068b6:	1d23      	adds	r3, r4, #4
 80068b8:	1af2      	subs	r2, r6, r3
 80068ba:	d0ae      	beq.n	800681a <_malloc_r+0x22>
 80068bc:	1b9b      	subs	r3, r3, r6
 80068be:	50a3      	str	r3, [r4, r2]
 80068c0:	e7ab      	b.n	800681a <_malloc_r+0x22>
 80068c2:	42a3      	cmp	r3, r4
 80068c4:	6862      	ldr	r2, [r4, #4]
 80068c6:	d1dd      	bne.n	8006884 <_malloc_r+0x8c>
 80068c8:	f8c8 2000 	str.w	r2, [r8]
 80068cc:	e7ec      	b.n	80068a8 <_malloc_r+0xb0>
 80068ce:	4623      	mov	r3, r4
 80068d0:	6864      	ldr	r4, [r4, #4]
 80068d2:	e7ac      	b.n	800682e <_malloc_r+0x36>
 80068d4:	4634      	mov	r4, r6
 80068d6:	6876      	ldr	r6, [r6, #4]
 80068d8:	e7b4      	b.n	8006844 <_malloc_r+0x4c>
 80068da:	4613      	mov	r3, r2
 80068dc:	e7cc      	b.n	8006878 <_malloc_r+0x80>
 80068de:	230c      	movs	r3, #12
 80068e0:	603b      	str	r3, [r7, #0]
 80068e2:	4638      	mov	r0, r7
 80068e4:	f000 f80e 	bl	8006904 <__malloc_unlock>
 80068e8:	e797      	b.n	800681a <_malloc_r+0x22>
 80068ea:	6025      	str	r5, [r4, #0]
 80068ec:	e7dc      	b.n	80068a8 <_malloc_r+0xb0>
 80068ee:	605b      	str	r3, [r3, #4]
 80068f0:	deff      	udf	#255	; 0xff
 80068f2:	bf00      	nop
 80068f4:	20000b74 	.word	0x20000b74

080068f8 <__malloc_lock>:
 80068f8:	4801      	ldr	r0, [pc, #4]	; (8006900 <__malloc_lock+0x8>)
 80068fa:	f000 b84b 	b.w	8006994 <__retarget_lock_acquire_recursive>
 80068fe:	bf00      	nop
 8006900:	20000cb8 	.word	0x20000cb8

08006904 <__malloc_unlock>:
 8006904:	4801      	ldr	r0, [pc, #4]	; (800690c <__malloc_unlock+0x8>)
 8006906:	f000 b846 	b.w	8006996 <__retarget_lock_release_recursive>
 800690a:	bf00      	nop
 800690c:	20000cb8 	.word	0x20000cb8

08006910 <memset>:
 8006910:	4402      	add	r2, r0
 8006912:	4603      	mov	r3, r0
 8006914:	4293      	cmp	r3, r2
 8006916:	d100      	bne.n	800691a <memset+0xa>
 8006918:	4770      	bx	lr
 800691a:	f803 1b01 	strb.w	r1, [r3], #1
 800691e:	e7f9      	b.n	8006914 <memset+0x4>

08006920 <_sbrk_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d06      	ldr	r5, [pc, #24]	; (800693c <_sbrk_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fb fa82 	bl	8001e34 <_sbrk>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_sbrk_r+0x1a>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_sbrk_r+0x1a>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	20000cb4 	.word	0x20000cb4

08006940 <__errno>:
 8006940:	4b01      	ldr	r3, [pc, #4]	; (8006948 <__errno+0x8>)
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	20000058 	.word	0x20000058

0800694c <__libc_init_array>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4d0d      	ldr	r5, [pc, #52]	; (8006984 <__libc_init_array+0x38>)
 8006950:	4c0d      	ldr	r4, [pc, #52]	; (8006988 <__libc_init_array+0x3c>)
 8006952:	1b64      	subs	r4, r4, r5
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	2600      	movs	r6, #0
 8006958:	42a6      	cmp	r6, r4
 800695a:	d109      	bne.n	8006970 <__libc_init_array+0x24>
 800695c:	4d0b      	ldr	r5, [pc, #44]	; (800698c <__libc_init_array+0x40>)
 800695e:	4c0c      	ldr	r4, [pc, #48]	; (8006990 <__libc_init_array+0x44>)
 8006960:	f000 f81a 	bl	8006998 <_init>
 8006964:	1b64      	subs	r4, r4, r5
 8006966:	10a4      	asrs	r4, r4, #2
 8006968:	2600      	movs	r6, #0
 800696a:	42a6      	cmp	r6, r4
 800696c:	d105      	bne.n	800697a <__libc_init_array+0x2e>
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	f855 3b04 	ldr.w	r3, [r5], #4
 8006974:	4798      	blx	r3
 8006976:	3601      	adds	r6, #1
 8006978:	e7ee      	b.n	8006958 <__libc_init_array+0xc>
 800697a:	f855 3b04 	ldr.w	r3, [r5], #4
 800697e:	4798      	blx	r3
 8006980:	3601      	adds	r6, #1
 8006982:	e7f2      	b.n	800696a <__libc_init_array+0x1e>
 8006984:	08006a48 	.word	0x08006a48
 8006988:	08006a48 	.word	0x08006a48
 800698c:	08006a48 	.word	0x08006a48
 8006990:	08006a4c 	.word	0x08006a4c

08006994 <__retarget_lock_acquire_recursive>:
 8006994:	4770      	bx	lr

08006996 <__retarget_lock_release_recursive>:
 8006996:	4770      	bx	lr

08006998 <_init>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr

080069a4 <_fini>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	bf00      	nop
 80069a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069aa:	bc08      	pop	{r3}
 80069ac:	469e      	mov	lr, r3
 80069ae:	4770      	bx	lr
