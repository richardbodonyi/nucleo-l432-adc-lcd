
nucleo-l432-adc-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001420  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a84  08008a84  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a8c  08008a8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f64  20000060  08008af4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001fc4  08008af4  00021fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a481  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003543  00000000  00000000  0003a554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0003da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f6  00000000  00000000  0003f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024517  00000000  00000000  00040166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a98c  00000000  00000000  0006467d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dec71  00000000  00000000  0007f009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061a0  00000000  00000000  0015dc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00163e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800764c 	.word	0x0800764c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800764c 	.word	0x0800764c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <init_display>:
uint16_t max_y = 4095;

void init_display(SPI_HandleTypeDef* spi,
    TIM_HandleTypeDef* timer,
    ADC_HandleTypeDef* adc,
    UART_HandleTypeDef* uart) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b092      	sub	sp, #72	; 0x48
 8000580:	af0a      	add	r7, sp, #40	; 0x28
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
  timer_hal = timer;
 800058a:	4a28      	ldr	r2, [pc, #160]	; (800062c <init_display+0xb0>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	6013      	str	r3, [r2, #0]
  uart_hal = uart;
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <init_display+0xb4>)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	6013      	str	r3, [r2, #0]
  ili9341_lcd = ili9341_new(
 8000596:	2301      	movs	r3, #1
 8000598:	9309      	str	r3, [sp, #36]	; 0x24
 800059a:	2301      	movs	r3, #1
 800059c:	9308      	str	r3, [sp, #32]
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	9307      	str	r3, [sp, #28]
 80005a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a6:	9306      	str	r3, [sp, #24]
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	9305      	str	r3, [sp, #20]
 80005ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b2:	9304      	str	r3, [sp, #16]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9303      	str	r3, [sp, #12]
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <init_display+0xb8>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <init_display+0xb8>)
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	491a      	ldr	r1, [pc, #104]	; (8000634 <init_display+0xb8>)
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 f954 	bl	8000878 <ili9341_new>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <init_display+0xbc>)
 80005d4:	6013      	str	r3, [r2, #0]
          isoLandscape,
          TOUCH_CS_GPIO_Port,  TOUCH_CS_Pin,
          TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin,
          itsSupported,
          itnNormalized);
  ili9341_spi_tft_select(ili9341_lcd);
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <init_display+0xbc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fa66 	bl	8000aac <ili9341_spi_tft_select>
  ili9341_fill_screen(ili9341_lcd, ILI9341_BLACK);
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <init_display+0xbc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a15      	ldr	r2, [pc, #84]	; (800063c <init_display+0xc0>)
 80005e6:	8812      	ldrh	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ffc4 	bl	8001578 <ili9341_fill_screen>

  ili9341_text_attr_t attr;
  attr.bg_color = ILI9341_BLACK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <init_display+0xc0>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	837b      	strh	r3, [r7, #26]
  attr.fg_color = ILI9341_LIGHTGREY;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <init_display+0xc4>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	833b      	strh	r3, [r7, #24]
  attr.font = &ili9341_font_16x26;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <init_display+0xc8>)
 80005fe:	617b      	str	r3, [r7, #20]
  attr.origin_x = 120;
 8000600:	2378      	movs	r3, #120	; 0x78
 8000602:	83bb      	strh	r3, [r7, #28]
  attr.origin_y = 100;
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	83fb      	strh	r3, [r7, #30]
  ili9341_draw_string(ili9341_lcd, attr, "ECG");
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <init_display+0xbc>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <init_display+0xcc>)
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000616:	f001 f8ad 	bl	8001774 <ili9341_draw_string>

  HAL_ADC_Start_DMA(adc, (uint32_t*) dma_values, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	490b      	ldr	r1, [pc, #44]	; (800064c <init_display+0xd0>)
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f002 fa38 	bl	8002a94 <HAL_ADC_Start_DMA>
}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000007c 	.word	0x2000007c
 8000630:	20000080 	.word	0x20000080
 8000634:	48000400 	.word	0x48000400
 8000638:	20000084 	.word	0x20000084
 800063c:	08008a02 	.word	0x08008a02
 8000640:	08008a04 	.word	0x08008a04
 8000644:	080076b4 	.word	0x080076b4
 8000648:	08007664 	.word	0x08007664
 800064c:	20000088 	.word	0x20000088

08000650 <printToUart>:


void printToUart(UART_HandleTypeDef *huart, char *msg) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huart, (uint8_t*) msg, strlen(msg), 100);
 800065a:	6838      	ldr	r0, [r7, #0]
 800065c:	f7ff fdb8 	bl	80001d0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	6839      	ldr	r1, [r7, #0]
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f005 fe77 	bl	800635c <HAL_UART_Transmit>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <translate_y>:

uint16_t translate_y(uint16_t value) {
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
//  return 239 - value * 0.0589;
  return ili9341_lcd->screen_size.height - 1 - (value - min_y) * (float) ili9341_lcd->screen_size.height / (max_y - min_y);
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <translate_y+0x70>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	8bdb      	ldrh	r3, [r3, #30]
 8000688:	3b01      	subs	r3, #1
 800068a:	ee07 3a90 	vmov	s15, r3
 800068e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	4a15      	ldr	r2, [pc, #84]	; (80006ec <translate_y+0x74>)
 8000696:	8812      	ldrh	r2, [r2, #0]
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <translate_y+0x70>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	8bdb      	ldrh	r3, [r3, #30]
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <translate_y+0x78>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <translate_y+0x74>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	ee07 3a90 	vmov	s15, r3
 80006c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80006cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d4:	ee17 3a90 	vmov	r3, s15
 80006d8:	b29b      	uxth	r3, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000084 	.word	0x20000084
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000002 	.word	0x20000002

080006f4 <display_graph>:

void display_graph() {
 80006f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af02      	add	r7, sp, #8
  if (fill_index > draw_index) {
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <display_graph+0xf4>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <display_graph+0xf8>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d96a      	bls.n	80007de <display_graph+0xea>
    int x = draw_index % ili9341_lcd->screen_size.width;
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <display_graph+0xf8>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <display_graph+0xfc>)
 800070e:	6812      	ldr	r2, [r2, #0]
 8000710:	8b92      	ldrh	r2, [r2, #28]
 8000712:	fbb3 f1f2 	udiv	r1, r3, r2
 8000716:	fb01 f202 	mul.w	r2, r1, r2
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	607b      	str	r3, [r7, #4]
    ili9341_draw_line(ili9341_lcd, ILI9341_BLACK, x, 0, x, ili9341_lcd->screen_size.height - 1);
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <display_graph+0xfc>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <display_graph+0x100>)
 8000726:	8819      	ldrh	r1, [r3, #0]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	b21c      	sxth	r4, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <display_graph+0xfc>)
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	8bd2      	ldrh	r2, [r2, #30]
 8000736:	3a01      	subs	r2, #1
 8000738:	b292      	uxth	r2, r2
 800073a:	b212      	sxth	r2, r2
 800073c:	9201      	str	r2, [sp, #4]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	4622      	mov	r2, r4
 8000744:	f000 fd99 	bl	800127a <ili9341_draw_line>
    if (x == 0) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d116      	bne.n	800077c <display_graph+0x88>
      ili9341_draw_pixel(ili9341_lcd, ILI9341_LIGHTGREY, x, translate_y(raw_values[draw_index]));
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <display_graph+0xfc>)
 8000750:	681c      	ldr	r4, [r3, #0]
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <display_graph+0x104>)
 8000754:	881d      	ldrh	r5, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	b21e      	sxth	r6, r3
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <display_graph+0xf8>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <display_graph+0x108>)
 8000762:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff86 	bl	8000678 <translate_y>
 800076c:	4603      	mov	r3, r0
 800076e:	b21b      	sxth	r3, r3
 8000770:	4632      	mov	r2, r6
 8000772:	4629      	mov	r1, r5
 8000774:	4620      	mov	r0, r4
 8000776:	f000 fd28 	bl	80011ca <ili9341_draw_pixel>
 800077a:	e02a      	b.n	80007d2 <display_graph+0xde>
    }
    else {
      ili9341_draw_line(ili9341_lcd, ILI9341_LIGHTGREY, x - 1, translate_y(raw_values[draw_index - 1]), x, translate_y(raw_values[draw_index]));
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <display_graph+0xfc>)
 800077e:	681d      	ldr	r5, [r3, #0]
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <display_graph+0x104>)
 8000782:	881e      	ldrh	r6, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29b      	uxth	r3, r3
 8000788:	3b01      	subs	r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	fa0f f883 	sxth.w	r8, r3
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <display_graph+0xf8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	4a19      	ldr	r2, [pc, #100]	; (80007fc <display_graph+0x108>)
 8000798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff6b 	bl	8000678 <translate_y>
 80007a2:	4603      	mov	r3, r0
 80007a4:	fa0f f983 	sxth.w	r9, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b21c      	sxth	r4, r3
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <display_graph+0xf8>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <display_graph+0x108>)
 80007b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5d 	bl	8000678 <translate_y>
 80007be:	4603      	mov	r3, r0
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	9400      	str	r4, [sp, #0]
 80007c6:	464b      	mov	r3, r9
 80007c8:	4642      	mov	r2, r8
 80007ca:	4631      	mov	r1, r6
 80007cc:	4628      	mov	r0, r5
 80007ce:	f000 fd54 	bl	800127a <ili9341_draw_line>
    }
    draw_index++;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <display_graph+0xf8>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <display_graph+0xf8>)
 80007dc:	801a      	strh	r2, [r3, #0]
  }
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007e8:	20001410 	.word	0x20001410
 80007ec:	20001412 	.word	0x20001412
 80007f0:	20000084 	.word	0x20000084
 80007f4:	08008a02 	.word	0x08008a02
 80007f8:	08008a04 	.word	0x08008a04
 80007fc:	20000088 	.word	0x20000088

08000800 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if (fill_index >= BUFFER_SIZE) {
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000810:	4293      	cmp	r3, r2
 8000812:	d823      	bhi.n	800085c <HAL_TIM_PeriodElapsedCallback+0x5c>
    return;
  }
  raw_values[fill_index] = dma_values[0];
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800081c:	8819      	ldrh	r1, [r3, #0]
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000820:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  char message[40];
  sprintf(message, "%d\r\n", raw_values[fill_index]);
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800082c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000830:	461a      	mov	r2, r3
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000838:	4618      	mov	r0, r3
 800083a:	f006 fb0f 	bl	8006e5c <siprintf>
  printToUart(uart_hal, message);
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f107 0208 	add.w	r2, r7, #8
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff01 	bl	8000650 <printToUart>
  fill_index++;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000858:	801a      	strh	r2, [r3, #0]
 800085a:	e000      	b.n	800085e <HAL_TIM_PeriodElapsedCallback+0x5e>
    return;
 800085c:	bf00      	nop
}
 800085e:	3730      	adds	r7, #48	; 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20001410 	.word	0x20001410
 8000868:	20000088 	.word	0x20000088
 800086c:	20000088 	.word	0x20000088
 8000870:	08007668 	.word	0x08007668
 8000874:	20000080 	.word	0x20000080

08000878 <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b09b      	sub	sp, #108	; 0x6c
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4613      	mov	r3, r2
 8000886:	80fb      	strh	r3, [r7, #6]
  ili9341_t *lcd = NULL;
 8000888:	2300      	movs	r3, #0
 800088a:	667b      	str	r3, [r7, #100]	; 0x64

  if (NULL != spi_hal) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 8107 	beq.w	8000aa2 <ili9341_new+0x22a>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 8103 	beq.w	8000aa2 <ili9341_new+0x22a>
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 80ff 	beq.w	8000aa2 <ili9341_new+0x22a>
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	0c1b      	lsrs	r3, r3, #16
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f040 80f9 	bne.w	8000aa2 <ili9341_new+0x22a>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 80f5 	beq.w	8000aa2 <ili9341_new+0x22a>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 80008b8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 80f0 	beq.w	8000aa2 <ili9341_new+0x22a>
 80008c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80008c6:	0c1b      	lsrs	r3, r3, #16
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f040 80e9 	bne.w	8000aa2 <ili9341_new+0x22a>
 80008d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 80e5 	beq.w	8000aa2 <ili9341_new+0x22a>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 80008d8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80e0 	beq.w	8000aa2 <ili9341_new+0x22a>
 80008e2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	041b      	lsls	r3, r3, #16
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 80d9 	bne.w	8000aa2 <ili9341_new+0x22a>
 80008f0:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f2c0 80d4 	blt.w	8000aa2 <ili9341_new+0x22a>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 80008fa:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 80008fe:	2b03      	cmp	r3, #3
 8000900:	f300 80cf 	bgt.w	8000aa2 <ili9341_new+0x22a>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8000904:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 8000908:	2b01      	cmp	r3, #1
 800090a:	d121      	bne.n	8000950 <ili9341_new+0xd8>
 800090c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 80c6 	beq.w	8000aa2 <ili9341_new+0x22a>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8000916:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 80c1 	beq.w	8000aa2 <ili9341_new+0x22a>
 8000920:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000924:	0c1b      	lsrs	r3, r3, #16
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	2b00      	cmp	r3, #0
 800092a:	f040 80ba 	bne.w	8000aa2 <ili9341_new+0x22a>
 800092e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 80b5 	beq.w	8000aa2 <ili9341_new+0x22a>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 8000938:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80b0 	beq.w	8000aa2 <ili9341_new+0x22a>
 8000942:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000946:	0c1b      	lsrs	r3, r3, #16
 8000948:	041b      	lsls	r3, r3, #16
 800094a:	2b00      	cmp	r3, #0
 800094c:	f040 80a9 	bne.w	8000aa2 <ili9341_new+0x22a>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 8000950:	2068      	movs	r0, #104	; 0x68
 8000952:	f006 f9cf 	bl	8006cf4 <malloc>
 8000956:	4603      	mov	r3, r0
 8000958:	667b      	str	r3, [r7, #100]	; 0x64
 800095a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80a0 	beq.w	8000aa2 <ili9341_new+0x22a>

          lcd->spi_hal              = spi_hal;
 8000962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	601a      	str	r2, [r3, #0]

          lcd->reset_port           = reset_port;
 8000968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	605a      	str	r2, [r3, #4]
          lcd->reset_pin            = reset_pin;
 800096e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	811a      	strh	r2, [r3, #8]
          lcd->tft_select_port      = tft_select_port;
 8000974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	60da      	str	r2, [r3, #12]
          lcd->tft_select_pin       = tft_select_pin;
 800097a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800097c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000980:	821a      	strh	r2, [r3, #16]
          lcd->data_command_port    = data_command_port;
 8000982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000984:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000986:	615a      	str	r2, [r3, #20]
          lcd->data_command_pin     = data_command_pin;
 8000988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800098a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800098e:	831a      	strh	r2, [r3, #24]

          lcd->orientation          = orientation;
 8000990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000992:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000996:	769a      	strb	r2, [r3, #26]
          lcd->screen_size          = ili9341_screen_size(orientation);
 8000998:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800099a:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fb24 	bl	8000fec <ili9341_screen_size>
 80009a4:	4603      	mov	r3, r0
 80009a6:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 80009a8:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d03d      	beq.n	8000a2c <ili9341_new+0x1b4>

            lcd->touch_select_port    = touch_select_port;
 80009b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80009b6:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = touch_select_pin;
 80009b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009ba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80009be:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = touch_irq_port;
 80009c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = touch_irq_pin;
 80009c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009ca:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80009ce:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 80009d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009d2:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 80009d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = touch_normalize;
 80009da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009dc:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 80009e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 80009e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009e6:	2200      	movs	r2, #0
 80009e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80009ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009ec:	2200      	movs	r2, #0
 80009ee:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 80009f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80009f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009fa:	3336      	adds	r3, #54	; 0x36
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a04:	3340      	adds	r3, #64	; 0x40
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNotPressed;
 8000a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 8000a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a20:	2200      	movs	r2, #0
 8000a22:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 8000a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a26:	2200      	movs	r2, #0
 8000a28:	665a      	str	r2, [r3, #100]	; 0x64
 8000a2a:	e037      	b.n	8000a9c <ili9341_new+0x224>

          } else {

            lcd->touch_select_port    = NULL;
 8000a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = 0;
 8000a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a34:	2200      	movs	r2, #0
 8000a36:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = NULL;
 8000a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = 0;
 8000a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a40:	2200      	movs	r2, #0
 8000a42:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 8000a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a46:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8000a4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = itnNONE;
 8000a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a58:	2200      	movs	r2, #0
 8000a5a:	861a      	strh	r2, [r3, #48]	; 0x30
 8000a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a5e:	2200      	movs	r2, #0
 8000a60:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 8000a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a64:	22ff      	movs	r2, #255	; 0xff
 8000a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a6c:	3336      	adds	r3, #54	; 0x36
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a76:	3340      	adds	r3, #64	; 0x40
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNONE;
 8000a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 8000a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a92:	2200      	movs	r2, #0
 8000a94:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 8000a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a98:	2200      	movs	r2, #0
 8000a9a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          ili9341_initialize(lcd);
 8000a9c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000a9e:	f000 f945 	bl	8000d2c <ili9341_initialize>
        }
      }
    }
  }

  return lcd;
 8000aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	376c      	adds	r7, #108	; 0x6c
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68d8      	ldr	r0, [r3, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	8a1b      	ldrh	r3, [r3, #16]
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f003 fa08 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_t *lcd)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68d8      	ldr	r0, [r3, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	8a1b      	ldrh	r3, [r3, #16]
 8000adc:	2201      	movs	r2, #1
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f003 f9f8 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_t *lcd)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a18      	ldr	r0, [r3, #32]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	f003 f9e8 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_t *lcd)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a18      	ldr	r0, [r3, #32]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f003 f9d8 	bl	8003ed4 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8000b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <ili9341_spi_slave_select+0x1a>
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d004      	beq.n	8000b4e <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
    default: break;
 8000b44:	e007      	b.n	8000b56 <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <ili9341_spi_tft_select>
 8000b4c:	e003      	b.n	8000b56 <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffcc 	bl	8000aec <ili9341_spi_touch_select>
 8000b54:	bf00      	nop
  }
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8000b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <ili9341_spi_slave_release+0x1a>
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d004      	beq.n	8000b80 <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
    default: break;
 8000b76:	e007      	b.n	8000b88 <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ffa7 	bl	8000acc <ili9341_spi_tft_release>
 8000b7e:	e003      	b.n	8000b88 <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ffc3 	bl	8000b0c <ili9341_spi_touch_release>
 8000b86:	bf00      	nop
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(lcd, spi_slave);
 8000ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db09      	blt.n	8000bbc <ili9341_spi_write_command+0x2c>
 8000ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	dc05      	bgt.n	8000bbc <ili9341_spi_write_command+0x2c>
 8000bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb8 	bl	8000b2c <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6958      	ldr	r0, [r3, #20]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	8b1b      	ldrh	r3, [r3, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f003 f984 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	1cb9      	adds	r1, r7, #2
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f004 fcb1 	bl	800553e <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db09      	blt.n	8000bf8 <ili9341_spi_write_command+0x68>
 8000be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	dc05      	bgt.n	8000bf8 <ili9341_spi_write_command+0x68>
 8000bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb3 	bl	8000b5e <ili9341_spi_slave_release>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	72fb      	strb	r3, [r7, #11]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(lcd, spi_slave);
 8000c12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db09      	blt.n	8000c2e <ili9341_spi_write_data+0x2e>
 8000c1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	dc05      	bgt.n	8000c2e <ili9341_spi_write_data+0x2e>
 8000c22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c26:	4619      	mov	r1, r3
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff ff7f 	bl	8000b2c <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6958      	ldr	r0, [r3, #20]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	8b1b      	ldrh	r3, [r3, #24]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f003 f94b 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	893a      	ldrh	r2, [r7, #8]
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f004 fc78 	bl	800553e <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000c4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db09      	blt.n	8000c6a <ili9341_spi_write_data+0x6a>
 8000c56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	dc05      	bgt.n	8000c6a <ili9341_spi_write_data+0x6a>
 8000c5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c62:	4619      	mov	r1, r3
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff ff7a 	bl	8000b5e <ili9341_spi_slave_release>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4603      	mov	r3, r0
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70bb      	strb	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(lcd, spi_slave);
 8000c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db09      	blt.n	8000ca8 <ili9341_spi_write_command_data+0x36>
 8000c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	dc05      	bgt.n	8000ca8 <ili9341_spi_write_command_data+0x36>
 8000c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff42 	bl	8000b2c <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	461a      	mov	r2, r3
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff6d 	bl	8000b90 <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 8000cb6:	883a      	ldrh	r2, [r7, #0]
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff9e 	bl	8000c00 <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db09      	blt.n	8000ce0 <ili9341_spi_write_command_data+0x6e>
 8000ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	dc05      	bgt.n	8000ce0 <ili9341_spi_write_command_data+0x6e>
 8000cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff3f 	bl	8000b5e <ili9341_spi_slave_release>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_t *lcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6858      	ldr	r0, [r3, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	891b      	ldrh	r3, [r3, #8]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f003 f8ea 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000d00:	20c8      	movs	r0, #200	; 0xc8
 8000d02:	f001 fb99 	bl	8002438 <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6858      	ldr	r0, [r3, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	891b      	ldrh	r3, [r3, #8]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	f003 f8df 	bl	8003ed4 <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(lcd);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fed8 	bl	8000acc <ili9341_spi_tft_release>
  ili9341_spi_touch_release(lcd);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fef5 	bl	8000b0c <ili9341_spi_touch_release>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <ili9341_initialize>:

static void ili9341_initialize(ili9341_t *lcd)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b09f      	sub	sp, #124	; 0x7c
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	6078      	str	r0, [r7, #4]
  ili9341_reset(lcd);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ffd7 	bl	8000ce8 <ili9341_reset>
  ili9341_spi_tft_select(lcd);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff feb6 	bl	8000aac <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f04f 31ff 	mov.w	r1, #4294967295
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff22 	bl	8000b90 <ili9341_spi_write_command>
  HAL_Delay(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f001 fb72 	bl	8002438 <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8000d54:	4a9d      	ldr	r2, [pc, #628]	; (8000fcc <ili9341_initialize+0x2a0>)
 8000d56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d5e:	6018      	str	r0, [r3, #0]
 8000d60:	3304      	adds	r3, #4
 8000d62:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	22cb      	movs	r2, #203	; 0xcb
 8000d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff7d 	bl	8000c72 <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8000d78:	4a95      	ldr	r2, [pc, #596]	; (8000fd0 <ili9341_initialize+0x2a4>)
 8000d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	4611      	mov	r1, r2
 8000d82:	8019      	strh	r1, [r3, #0]
 8000d84:	3302      	adds	r3, #2
 8000d86:	0c12      	lsrs	r2, r2, #16
 8000d88:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2303      	movs	r3, #3
 8000d92:	22cf      	movs	r2, #207	; 0xcf
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff6a 	bl	8000c72 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8000d9e:	4a8d      	ldr	r2, [pc, #564]	; (8000fd4 <ili9341_initialize+0x2a8>)
 8000da0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	4611      	mov	r1, r2
 8000da8:	8019      	strh	r1, [r3, #0]
 8000daa:	3302      	adds	r3, #2
 8000dac:	0c12      	lsrs	r2, r2, #16
 8000dae:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000db0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2303      	movs	r3, #3
 8000db8:	22e8      	movs	r2, #232	; 0xe8
 8000dba:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff57 	bl	8000c72 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ili9341_spi_write_command_data(lcd, issNONE,
 8000dd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	22ea      	movs	r2, #234	; 0xea
 8000dda:	f04f 31ff 	mov.w	r1, #4294967295
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff47 	bl	8000c72 <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8000de4:	4b7c      	ldr	r3, [pc, #496]	; (8000fd8 <ili9341_initialize+0x2ac>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	65bb      	str	r3, [r7, #88]	; 0x58
  ili9341_spi_write_command_data(lcd, issNONE,
 8000dea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2304      	movs	r3, #4
 8000df2:	22ed      	movs	r2, #237	; 0xed
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff3a 	bl	8000c72 <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 8000dfe:	2320      	movs	r3, #32
 8000e00:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	22f7      	movs	r2, #247	; 0xf7
 8000e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff2d 	bl	8000c72 <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8000e18:	2323      	movs	r3, #35	; 0x23
 8000e1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	22c0      	movs	r2, #192	; 0xc0
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff20 	bl	8000c72 <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 8000e32:	2310      	movs	r3, #16
 8000e34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	22c1      	movs	r2, #193	; 0xc1
 8000e42:	f04f 31ff 	mov.w	r1, #4294967295
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff13 	bl	8000c72 <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8000e4c:	4b63      	ldr	r3, [pc, #396]	; (8000fdc <ili9341_initialize+0x2b0>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	22c5      	movs	r2, #197	; 0xc5
 8000e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff05 	bl	8000c72 <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 8000e68:	2386      	movs	r3, #134	; 0x86
 8000e6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2301      	movs	r3, #1
 8000e76:	22c7      	movs	r2, #199	; 0xc7
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fef8 	bl	8000c72 <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 8000e82:	2348      	movs	r3, #72	; 0x48
 8000e84:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2236      	movs	r2, #54	; 0x36
 8000e92:	f04f 31ff 	mov.w	r1, #4294967295
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff feeb 	bl	8000c72 <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(lcd, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8000e9c:	2355      	movs	r3, #85	; 0x55
 8000e9e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	223a      	movs	r2, #58	; 0x3a
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fede 	bl	8000c72 <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000ebc:	2318      	movs	r3, #24
 8000ebe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ec2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	22b1      	movs	r2, #177	; 0xb1
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fece 	bl	8000c72 <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8000ed6:	4a42      	ldr	r2, [pc, #264]	; (8000fe0 <ili9341_initialize+0x2b4>)
 8000ed8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	8019      	strh	r1, [r3, #0]
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	0c12      	lsrs	r2, r2, #16
 8000ee6:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ee8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2303      	movs	r3, #3
 8000ef0:	22b6      	movs	r2, #182	; 0xb6
 8000ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff febb 	bl	8000c72 <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	22f2      	movs	r2, #242	; 0xf2
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff feae 	bl	8000c72 <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(lcd, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	2226      	movs	r2, #38	; 0x26
 8000f26:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fea1 	bl	8000c72 <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <ili9341_initialize+0x2b8>)
 8000f32:	f107 041c 	add.w	r4, r7, #28
 8000f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f38:	c407      	stmia	r4!, {r0, r1, r2}
 8000f3a:	8023      	strh	r3, [r4, #0]
 8000f3c:	3402      	adds	r4, #2
 8000f3e:	0c1b      	lsrs	r3, r3, #16
 8000f40:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	230f      	movs	r3, #15
 8000f4a:	22e0      	movs	r2, #224	; 0xe0
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fe8e 	bl	8000c72 <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <ili9341_initialize+0x2bc>)
 8000f58:	f107 040c 	add.w	r4, r7, #12
 8000f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5e:	c407      	stmia	r4!, {r0, r1, r2}
 8000f60:	8023      	strh	r3, [r4, #0]
 8000f62:	3402      	adds	r4, #2
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	230f      	movs	r3, #15
 8000f70:	22e1      	movs	r2, #225	; 0xe1
 8000f72:	f04f 31ff 	mov.w	r1, #4294967295
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fe7b 	bl	8000c72 <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 8000f7c:	2211      	movs	r2, #17
 8000f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fe04 	bl	8000b90 <ili9341_spi_write_command>
  HAL_Delay(120);
 8000f88:	2078      	movs	r0, #120	; 0x78
 8000f8a:	f001 fa55 	bl	8002438 <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 8000f8e:	2229      	movs	r2, #41	; 0x29
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fdfb 	bl	8000b90 <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f853 	bl	800104c <ili9341_screen_rotation>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	723b      	strb	r3, [r7, #8]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2236      	movs	r2, #54	; 0x36
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fe5a 	bl	8000c72 <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(lcd);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fd84 	bl	8000acc <ili9341_spi_tft_release>
}
 8000fc4:	bf00      	nop
 8000fc6:	3774      	adds	r7, #116	; 0x74
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	08007670 	.word	0x08007670
 8000fd0:	08007678 	.word	0x08007678
 8000fd4:	0800767c 	.word	0x0800767c
 8000fd8:	08007680 	.word	0x08007680
 8000fdc:	08007684 	.word	0x08007684
 8000fe0:	08007688 	.word	0x08007688
 8000fe4:	0800768c 	.word	0x0800768c
 8000fe8:	0800769c 	.word	0x0800769c

08000fec <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d011      	beq.n	8001022 <ili9341_screen_size+0x36>
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	dc03      	bgt.n	800100a <ili9341_screen_size+0x1e>
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <ili9341_screen_size+0x26>
 8001006:	2b02      	cmp	r3, #2
 8001008:	d007      	beq.n	800101a <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <ili9341_screen_size+0x58>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	e00a      	b.n	8001028 <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <ili9341_screen_size+0x5c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	e006      	b.n	8001028 <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <ili9341_screen_size+0x58>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	e002      	b.n	8001028 <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <ili9341_screen_size+0x5c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	61fb      	str	r3, [r7, #28]
  }
}
 8001028:	2300      	movs	r3, #0
 800102a:	8bba      	ldrh	r2, [r7, #28]
 800102c:	f362 030f 	bfi	r3, r2, #0, #16
 8001030:	8bfa      	ldrh	r2, [r7, #30]
 8001032:	f362 431f 	bfi	r3, r2, #16, #16
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	080076ac 	.word	0x080076ac
 8001048:	080076b0 	.word	0x080076b0

0800104c <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d00b      	beq.n	8001076 <ili9341_screen_rotation+0x2a>
 800105e:	2b03      	cmp	r3, #3
 8001060:	dc03      	bgt.n	800106a <ili9341_screen_rotation+0x1e>
 8001062:	2b01      	cmp	r3, #1
 8001064:	d003      	beq.n	800106e <ili9341_screen_rotation+0x22>
 8001066:	2b02      	cmp	r3, #2
 8001068:	d003      	beq.n	8001072 <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 800106a:	2348      	movs	r3, #72	; 0x48
 800106c:	e004      	b.n	8001078 <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 800106e:	23e8      	movs	r3, #232	; 0xe8
 8001070:	e002      	b.n	8001078 <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 8001072:	2388      	movs	r3, #136	; 0x88
 8001074:	e000      	b.n	8001078 <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 8001076:	2328      	movs	r3, #40	; 0x28
  }
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b1f      	cmp	r3, #31
 8001092:	d906      	bls.n	80010a2 <glyph_index+0x1e>
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b7e      	cmp	r3, #126	; 0x7e
 8001098:	d803      	bhi.n	80010a2 <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	3b20      	subs	r3, #32
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	e000      	b.n	80010a4 <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(ili9341_t *lcd,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	817b      	strh	r3, [r7, #10]
 80010c2:	460b      	mov	r3, r1
 80010c4:	813b      	strh	r3, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(lcd);
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fcee 	bl	8000aac <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 80010d0:	897b      	ldrh	r3, [r7, #10]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	753b      	strb	r3, [r7, #20]
 80010da:	897b      	ldrh	r3, [r7, #10]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	757b      	strb	r3, [r7, #21]
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	75bb      	strb	r3, [r7, #22]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(lcd, issNONE,
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2304      	movs	r3, #4
 80010f8:	222a      	movs	r2, #42	; 0x2a
 80010fa:	f04f 31ff 	mov.w	r1, #4294967295
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fdb7 	bl	8000c72 <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	743b      	strb	r3, [r7, #16]
 800110e:	893b      	ldrh	r3, [r7, #8]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	747b      	strb	r3, [r7, #17]
 8001114:	8c3b      	ldrh	r3, [r7, #32]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	74bb      	strb	r3, [r7, #18]
 800111e:	8c3b      	ldrh	r3, [r7, #32]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(lcd, issNONE,
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2304      	movs	r3, #4
 800112c:	222b      	movs	r2, #43	; 0x2b
 800112e:	f04f 31ff 	mov.w	r1, #4294967295
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fd9d 	bl	8000c72 <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 8001138:	222c      	movs	r2, #44	; 0x2c
 800113a:	f04f 31ff 	mov.w	r1, #4294967295
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fd26 	bl	8000b90 <ili9341_spi_write_command>

  ili9341_spi_tft_release(lcd);
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff fcc1 	bl	8000acc <ili9341_spi_tft_release>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_t *lcd)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  if (NULL == lcd)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00b      	beq.n	8001178 <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 8001160:	e000      	b.n	8001164 <ili9341_transmit_wait+0x12>
    { continue; }
 8001162:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fd09 	bl	8003b82 <HAL_DMA_GetState>
 8001170:	4603      	mov	r3, r0
 8001172:	2b02      	cmp	r3, #2
 8001174:	d0f5      	beq.n	8001162 <ili9341_transmit_wait+0x10>
 8001176:	e000      	b.n	800117a <ili9341_transmit_wait+0x28>
    { return; }
 8001178:	bf00      	nop
}
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_t *lcd, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	461a      	mov	r2, r3
 800118c:	460b      	mov	r3, r1
 800118e:	817b      	strh	r3, [r7, #10]
 8001190:	4613      	mov	r3, r2
 8001192:	727b      	strb	r3, [r7, #9]
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d013      	beq.n	80011c2 <ili9341_transmit_color+0x42>
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d010      	beq.n	80011c2 <ili9341_transmit_color+0x42>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00d      	beq.n	80011c2 <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	897a      	ldrh	r2, [r7, #10]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 fb3a 	bl	8005828 <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 80011b4:	7a7b      	ldrb	r3, [r7, #9]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(lcd); }
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f7ff ffc9 	bl	8001152 <ili9341_transmit_wait>
 80011c0:	e000      	b.n	80011c4 <ili9341_transmit_color+0x44>
    { return; }
 80011c2:	bf00      	nop
}
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b088      	sub	sp, #32
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	4608      	mov	r0, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	461a      	mov	r2, r3
 80011d8:	4603      	mov	r3, r0
 80011da:	817b      	strh	r3, [r7, #10]
 80011dc:	460b      	mov	r3, r1
 80011de:	813b      	strh	r3, [r7, #8]
 80011e0:	4613      	mov	r3, r2
 80011e2:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, NULL, NULL)))
 80011e4:	1dba      	adds	r2, r7, #6
 80011e6:	f107 0108 	add.w	r1, r7, #8
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 fb0c 	bl	800180e <ili9341_clip_rect>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d03a      	beq.n	8001272 <ili9341_draw_pixel+0xa8>
    { return; }

  uint16_t color_le = __LEu16(&color);
 80011fc:	f107 030a 	add.w	r3, r7, #10
 8001200:	3301      	adds	r3, #1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b21a      	sxth	r2, r3
 8001206:	f107 030a 	add.w	r3, r7, #10
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 8001218:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800121c:	b299      	uxth	r1, r3
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001228:	b29b      	uxth	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	b298      	uxth	r0, r3
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	b29b      	uxth	r3, r3
 8001234:	3301      	adds	r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4603      	mov	r3, r0
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff ff37 	bl	80010b0 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(lcd);
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff fc32 	bl	8000aac <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6958      	ldr	r0, [r3, #20]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8b1b      	ldrh	r3, [r3, #24]
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	f002 fe3e 	bl	8003ed4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 0116 	add.w	r1, r7, #22
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	2202      	movs	r2, #2
 8001266:	f004 f96a 	bl	800553e <HAL_SPI_Transmit>

  ili9341_spi_tft_release(lcd);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fc2e 	bl	8000acc <ili9341_spi_tft_release>
 8001270:	e000      	b.n	8001274 <ili9341_draw_pixel+0xaa>
    { return; }
 8001272:	bf00      	nop
}
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ili9341_draw_line>:

void ili9341_draw_line(ili9341_t *lcd, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b08d      	sub	sp, #52	; 0x34
 800127e:	af02      	add	r7, sp, #8
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	4608      	mov	r0, r1
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4603      	mov	r3, r0
 800128a:	817b      	strh	r3, [r7, #10]
 800128c:	460b      	mov	r3, r1
 800128e:	813b      	strh	r3, [r7, #8]
 8001290:	4613      	mov	r3, r2
 8001292:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8001294:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001296:	893b      	ldrh	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 800129e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 80012a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d117      	bne.n	80012e0 <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 80012b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80c7 	beq.w	8001448 <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 80012ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bfb8      	it	lt
 80012c2:	425b      	neglt	r3, r3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012ce:	8979      	ldrh	r1, [r7, #10]
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4603      	mov	r3, r0
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f8bb 	bl	8001454 <ili9341_fill_rect>
    return;
 80012de:	e0b6      	b.n	800144e <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 80012e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d117      	bne.n	8001318 <ili9341_draw_line+0x9e>
    // horizontal line
    if (0 == dx)
 80012e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80ad 	beq.w	800144c <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 80012f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bfb8      	it	lt
 80012fa:	425b      	neglt	r3, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001302:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001306:	8979      	ldrh	r1, [r7, #10]
 8001308:	2401      	movs	r4, #1
 800130a:	9401      	str	r4, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4603      	mov	r3, r0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 f89f 	bl	8001454 <ili9341_fill_rect>
    return;
 8001316:	e09a      	b.n	800144e <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8001318:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfb8      	it	lt
 8001320:	425b      	neglt	r3, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001328:	2b00      	cmp	r3, #0
 800132a:	bfb8      	it	lt
 800132c:	425b      	neglt	r3, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	429a      	cmp	r2, r3
 8001332:	bf8c      	ite	hi
 8001334:	2301      	movhi	r3, #1
 8001336:	2300      	movls	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 800133c:	7efb      	ldrb	r3, [r7, #27]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 8001342:	893b      	ldrh	r3, [r7, #8]
 8001344:	833b      	strh	r3, [r7, #24]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	813b      	strh	r3, [r7, #8]
 800134a:	8b3b      	ldrh	r3, [r7, #24]
 800134c:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 800134e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001350:	82fb      	strh	r3, [r7, #22]
 8001352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001354:	873b      	strh	r3, [r7, #56]	; 0x38
 8001356:	8afb      	ldrh	r3, [r7, #22]
 8001358:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  if (x0 > x1) {
 800135a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800135e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001362:	429a      	cmp	r2, r3
 8001364:	dd0b      	ble.n	800137e <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 8001366:	893b      	ldrh	r3, [r7, #8]
 8001368:	82bb      	strh	r3, [r7, #20]
 800136a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800136c:	813b      	strh	r3, [r7, #8]
 800136e:	8abb      	ldrh	r3, [r7, #20]
 8001370:	873b      	strh	r3, [r7, #56]	; 0x38
    __SWAP(int16_t, y0, y1);
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	827b      	strh	r3, [r7, #18]
 8001376:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	8a7b      	ldrh	r3, [r7, #18]
 800137c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  dx = x1 - x0;
 800137e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001380:	893b      	ldrh	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 8001388:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800138c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 800139a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800139e:	105b      	asrs	r3, r3, #1
 80013a0:	847b      	strh	r3, [r7, #34]	; 0x22

  if (y0 < y1)
 80013a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013a6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80013aa:	429a      	cmp	r2, r3
 80013ac:	da02      	bge.n	80013b4 <ili9341_draw_line+0x13a>
    { step = 1; }
 80013ae:	2301      	movs	r3, #1
 80013b0:	843b      	strh	r3, [r7, #32]
 80013b2:	e042      	b.n	800143a <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 80013ba:	e03e      	b.n	800143a <ili9341_draw_line+0x1c0>

    if (is_steep)
 80013bc:	7efb      	ldrb	r3, [r7, #27]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013c6:	893b      	ldrh	r3, [r7, #8]
 80013c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013ca:	e003      	b.n	80013d4 <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 80013cc:	893b      	ldrh	r3, [r7, #8]
 80013ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	84bb      	strh	r3, [r7, #36]	; 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 80013d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db17      	blt.n	800140c <ili9341_draw_line+0x192>
 80013dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	8b92      	ldrh	r2, [r2, #28]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	dc11      	bgt.n	800140c <ili9341_draw_line+0x192>
 80013e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0d      	blt.n	800140c <ili9341_draw_line+0x192>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 80013f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	8bd2      	ldrh	r2, [r2, #30]
 80013f8:	4293      	cmp	r3, r2
 80013fa:	dc07      	bgt.n	800140c <ili9341_draw_line+0x192>
      ili9341_draw_pixel(lcd, color, x, y);
 80013fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001400:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001404:	8979      	ldrh	r1, [r7, #10]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff fedf 	bl	80011ca <ili9341_draw_pixel>
    }

    err -= dy;
 800140c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800140e:	8bbb      	ldrh	r3, [r7, #28]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	847b      	strh	r3, [r7, #34]	; 0x22
    if (err < 0) {
 8001416:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800141a:	2b00      	cmp	r3, #0
 800141c:	da09      	bge.n	8001432 <ili9341_draw_line+0x1b8>
      y0 += step;
 800141e:	88fa      	ldrh	r2, [r7, #6]
 8001420:	8c3b      	ldrh	r3, [r7, #32]
 8001422:	4413      	add	r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	80fb      	strh	r3, [r7, #6]
      err += dx;
 8001428:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800142a:	8bfb      	ldrh	r3, [r7, #30]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ++x0;
 8001432:	893b      	ldrh	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 800143a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800143e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001442:	429a      	cmp	r2, r3
 8001444:	ddba      	ble.n	80013bc <ili9341_draw_line+0x142>
 8001446:	e002      	b.n	800144e <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8001448:	bf00      	nop
 800144a:	e000      	b.n	800144e <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 800144c:	bf00      	nop
  }
}
 800144e:	372c      	adds	r7, #44	; 0x2c
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}

08001454 <ili9341_fill_rect>:
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
}

void ili9341_fill_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08d      	sub	sp, #52	; 0x34
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	817b      	strh	r3, [r7, #10]
 8001466:	460b      	mov	r3, r1
 8001468:	813b      	strh	r3, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 800146e:	1dba      	adds	r2, r7, #6
 8001470:	f107 0108 	add.w	r1, r7, #8
 8001474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f9c5 	bl	800180e <ili9341_clip_rect>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06f      	beq.n	800156a <ili9341_fill_rect+0x116>
    { return; }

  uint32_t num_pixels = w * h;
 800148a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800148c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d902      	bls.n	80014aa <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 80014a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a8:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 80014aa:	f107 030a 	add.w	r3, r7, #10
 80014ae:	3301      	adds	r3, #1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	f107 030a 	add.w	r3, r7, #10
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 80014c4:	2300      	movs	r3, #0
 80014c6:	83fb      	strh	r3, [r7, #30]
 80014c8:	e007      	b.n	80014da <ili9341_fill_rect+0x86>
    { spi_tx_block[i] = color_le; }
 80014ca:	8bfb      	ldrh	r3, [r7, #30]
 80014cc:	4929      	ldr	r1, [pc, #164]	; (8001574 <ili9341_fill_rect+0x120>)
 80014ce:	8a7a      	ldrh	r2, [r7, #18]
 80014d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 80014d4:	8bfb      	ldrh	r3, [r7, #30]
 80014d6:	3301      	adds	r3, #1
 80014d8:	83fb      	strh	r3, [r7, #30]
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	6a3a      	ldr	r2, [r7, #32]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d8f3      	bhi.n	80014ca <ili9341_fill_rect+0x76>

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 80014e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014e6:	b299      	uxth	r1, r3
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	b298      	uxth	r0, r3
 80014ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80014f6:	4413      	add	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29c      	uxth	r4, r3
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	b29a      	uxth	r2, r3
 8001504:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001506:	4413      	add	r3, r2
 8001508:	b29b      	uxth	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4623      	mov	r3, r4
 8001512:	4602      	mov	r2, r0
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fdcb 	bl	80010b0 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fac6 	bl	8000aac <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6958      	ldr	r0, [r3, #20]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8b1b      	ldrh	r3, [r3, #24]
 8001528:	2201      	movs	r2, #1
 800152a:	4619      	mov	r1, r3
 800152c:	f002 fcd2 	bl	8003ed4 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8001530:	e014      	b.n	800155c <ili9341_fill_rect+0x108>
    curr_wc = rect_wc;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	429a      	cmp	r2, r3
 800153c:	d901      	bls.n	8001542 <ili9341_fill_rect+0xee>
      { curr_wc = block_wc; }
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	b29b      	uxth	r3, r3
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	b299      	uxth	r1, r3
 800154a:	2301      	movs	r3, #1
 800154c:	4a09      	ldr	r2, [pc, #36]	; (8001574 <ili9341_fill_rect+0x120>)
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fe16 	bl	8001180 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  while (rect_wc > 0) {
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e7      	bne.n	8001532 <ili9341_fill_rect+0xde>
  }

  ili9341_spi_tft_release(lcd);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fab2 	bl	8000acc <ili9341_spi_tft_release>
 8001568:	e000      	b.n	800156c <ili9341_fill_rect+0x118>
    { return; }
 800156a:	bf00      	nop
}
 800156c:	372c      	adds	r7, #44	; 0x2c
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	20001414 	.word	0x20001414

08001578 <ili9341_fill_screen>:
  ili9341_draw_line(lcd, color, x, y - r, x, (y - r) + (2 * r) + 1);
  ili9341_fill_quarter_circle(lcd, color, x, y, r, 3, 0);
}

void ili9341_fill_screen(ili9341_t *lcd, ili9341_color_t color)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(lcd, color,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8b9b      	ldrh	r3, [r3, #28]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	8bd2      	ldrh	r2, [r2, #30]
 800158c:	8879      	ldrh	r1, [r7, #2]
 800158e:	9201      	str	r2, [sp, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	2200      	movs	r2, #0
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff5c 	bl	8001454 <ili9341_fill_rect>
      0, 0, lcd->screen_size.width, lcd->screen_size.height);
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ili9341_draw_char>:
  ili9341_spi_tft_release(lcd);
  ili9341_transmit_wait(lcd);
}

void ili9341_draw_char(ili9341_t *lcd, ili9341_text_attr_t attr, char ch)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b093      	sub	sp, #76	; 0x4c
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	4638      	mov	r0, r7
 80015ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 80015b2:	893b      	ldrh	r3, [r7, #8]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 80015ce:	f107 0016 	add.w	r0, r7, #22
 80015d2:	f107 0218 	add.w	r2, r7, #24
 80015d6:	f107 011a 	add.w	r1, r7, #26
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4603      	mov	r3, r0
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f913 	bl	800180e <ili9341_clip_rect>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80bc 	beq.w	8001768 <ili9341_draw_char+0x1c4>
    { return; }

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rect_wc    = num_pixels;
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8001604:	463b      	mov	r3, r7
 8001606:	3304      	adds	r3, #4
 8001608:	3301      	adds	r3, #1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b21a      	sxth	r2, r3
 800160e:	463b      	mov	r3, r7
 8001610:	3304      	adds	r3, #4
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 800161e:	463b      	mov	r3, r7
 8001620:	3306      	adds	r3, #6
 8001622:	3301      	adds	r3, #1
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b21a      	sxth	r2, r3
 8001628:	463b      	mov	r3, r7
 800162a:	3306      	adds	r3, #6
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 8001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 800163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d902      	bls.n	800164a <ili9341_draw_char+0xa6>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 800164a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd18 	bl	8001084 <glyph_index>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
 800165e:	e03d      	b.n	80016dc <ili9341_draw_char+0x138>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	7849      	ldrb	r1, [r1, #1]
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4619      	mov	r1, r3
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	440b      	add	r3, r1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	885b      	ldrh	r3, [r3, #2]
 800167a:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
 8001680:	e023      	b.n	80016ca <ili9341_draw_char+0x126>
      if ((gl << xi) & 0x8000)
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00c      	beq.n	80016ac <ili9341_draw_char+0x108>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169a:	fb03 f202 	mul.w	r2, r3, r2
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	4413      	add	r3, r2
 80016a2:	4933      	ldr	r1, [pc, #204]	; (8001770 <ili9341_draw_char+0x1cc>)
 80016a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80016aa:	e00b      	b.n	80016c4 <ili9341_draw_char+0x120>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	fb03 f202 	mul.w	r2, r3, r2
 80016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ba:	4413      	add	r3, r2
 80016bc:	492c      	ldr	r1, [pc, #176]	; (8001770 <ili9341_draw_char+0x1cc>)
 80016be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	3301      	adds	r3, #1
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d3d5      	bcc.n	8001682 <ili9341_draw_char+0xde>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 80016d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d8:	3301      	adds	r3, #1
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	461a      	mov	r2, r3
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d3bb      	bcc.n	8001660 <ili9341_draw_char+0xbc>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(lcd,
 80016e8:	8939      	ldrh	r1, [r7, #8]
 80016ea:	8978      	ldrh	r0, [r7, #10]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 80016ec:	893a      	ldrh	r2, [r7, #8]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 80016fc:	897a      	ldrh	r2, [r7, #10]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4623      	mov	r3, r4
 8001710:	4602      	mov	r2, r0
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff fccc 	bl	80010b0 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff f9c7 	bl	8000aac <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6958      	ldr	r0, [r3, #20]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8b1b      	ldrh	r3, [r3, #24]
 8001726:	2201      	movs	r2, #1
 8001728:	4619      	mov	r1, r3
 800172a:	f002 fbd3 	bl	8003ed4 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 800172e:	e014      	b.n	800175a <ili9341_draw_char+0x1b6>
    curr_wc = rect_wc;
 8001730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (curr_wc > block_wc)
 8001734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001738:	429a      	cmp	r2, r3
 800173a:	d901      	bls.n	8001740 <ili9341_draw_char+0x19c>
      { curr_wc = block_wc; }
 800173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	b29b      	uxth	r3, r3
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b299      	uxth	r1, r3
 8001748:	2301      	movs	r3, #1
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <ili9341_draw_char+0x1cc>)
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fd17 	bl	8001180 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8001752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (rect_wc > 0) {
 800175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e7      	bne.n	8001730 <ili9341_draw_char+0x18c>
  }

  ili9341_spi_tft_release(lcd);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff f9b3 	bl	8000acc <ili9341_spi_tft_release>
 8001766:	e000      	b.n	800176a <ili9341_draw_char+0x1c6>
    { return; }
 8001768:	bf00      	nop
}
 800176a:	3744      	adds	r7, #68	; 0x44
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	20001414 	.word	0x20001414

08001774 <ili9341_draw_string>:

void ili9341_draw_string(ili9341_t *lcd, ili9341_text_attr_t attr, char str[])
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	4638      	mov	r0, r7
 800177e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int16_t curr_x = attr.origin_x;
 8001782:	893b      	ldrh	r3, [r7, #8]
 8001784:	82fb      	strh	r3, [r7, #22]
  int16_t curr_y = attr.origin_y;
 8001786:	897b      	ldrh	r3, [r7, #10]
 8001788:	82bb      	strh	r3, [r7, #20]
  int16_t start_x = attr.origin_x;
 800178a:	893b      	ldrh	r3, [r7, #8]
 800178c:	827b      	strh	r3, [r7, #18]

  while ('\0' != *str) {
 800178e:	e036      	b.n	80017fe <ili9341_draw_string+0x8a>
    if('\r' == *str)
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b0d      	cmp	r3, #13
 8001796:	d102      	bne.n	800179e <ili9341_draw_string+0x2a>
    {
      curr_x = start_x;
 8001798:	8a7b      	ldrh	r3, [r7, #18]
 800179a:	82fb      	strh	r3, [r7, #22]
 800179c:	e02c      	b.n	80017f8 <ili9341_draw_string+0x84>
    }
    else if('\n' == *str)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d109      	bne.n	80017ba <ili9341_draw_string+0x46>
    {
      curr_y += attr.font->height;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	8abb      	ldrh	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	82bb      	strh	r3, [r7, #20]
      curr_x = start_x;
 80017b4:	8a7b      	ldrh	r3, [r7, #18]
 80017b6:	82fb      	strh	r3, [r7, #22]
 80017b8:	e01e      	b.n	80017f8 <ili9341_draw_string+0x84>
    }
    else
    {
      if ( (curr_x > lcd->screen_size.width) ||
 80017ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	8b92      	ldrh	r2, [r2, #28]
 80017c2:	4293      	cmp	r3, r2
 80017c4:	dc1f      	bgt.n	8001806 <ili9341_draw_string+0x92>
          (curr_y > lcd->screen_size.height) )
 80017c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	8bd2      	ldrh	r2, [r2, #30]
      if ( (curr_x > lcd->screen_size.width) ||
 80017ce:	4293      	cmp	r3, r2
 80017d0:	dc19      	bgt.n	8001806 <ili9341_draw_string+0x92>
        { break; }

      attr.origin_x = curr_x;
 80017d2:	8afb      	ldrh	r3, [r7, #22]
 80017d4:	813b      	strh	r3, [r7, #8]
      attr.origin_y = curr_y;
 80017d6:	8abb      	ldrh	r3, [r7, #20]
 80017d8:	817b      	strh	r3, [r7, #10]

      ili9341_draw_char(lcd, attr, *str);
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	463b      	mov	r3, r7
 80017e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff fedd 	bl	80015a4 <ili9341_draw_char>

      curr_x += attr.font->width;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	8afb      	ldrh	r3, [r7, #22]
 80017f2:	4413      	add	r3, r2
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	82fb      	strh	r3, [r7, #22]
    }
    ++str;
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	3301      	adds	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
  while ('\0' != *str) {
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1c4      	bne.n	8001790 <ili9341_draw_string+0x1c>
  }
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <ili9341_clip_rect+0x1a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 8001828:	2300      	movs	r3, #0
 800182a:	e089      	b.n	8001940 <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8b9b      	ldrh	r3, [r3, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	da07      	bge.n	800184c <ili9341_clip_rect+0x3e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8bdb      	ldrh	r3, [r3, #30]
 8001848:	429a      	cmp	r2, r3
 800184a:	db01      	blt.n	8001850 <ili9341_clip_rect+0x42>
    { return ibFalse; }
 800184c:	2300      	movs	r3, #0
 800184e:	e077      	b.n	8001940 <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <ili9341_clip_rect+0x62>
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <ili9341_clip_rect+0x5e>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <ili9341_clip_rect+0x62>
      { return ibFalse; }
 800186c:	2300      	movs	r3, #0
 800186e:	e067      	b.n	8001940 <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	2b00      	cmp	r3, #0
 8001878:	da0f      	bge.n	800189a <ili9341_clip_rect+0x8c>
    if (NULL != w)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <ili9341_clip_rect+0x86>
      { *w -= *x; }
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	b29b      	uxth	r3, r3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	b29a      	uxth	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	801a      	strh	r2, [r3, #0]
    *x = 0;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da0f      	bge.n	80018c4 <ili9341_clip_rect+0xb6>
    if (NULL != h)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	801a      	strh	r2, [r3, #0]
    *y = 0;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d039      	beq.n	800193e <ili9341_clip_rect+0x130>
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d036      	beq.n	800193e <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	461a      	mov	r2, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	8b92      	ldrh	r2, [r2, #28]
 80018e2:	4293      	cmp	r3, r2
 80018e4:	dd09      	ble.n	80018fa <ili9341_clip_rect+0xec>
      { *w = lcd->screen_size.width - *x; }
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8b9a      	ldrh	r2, [r3, #28]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	461a      	mov	r2, r3
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	8bd2      	ldrh	r2, [r2, #30]
 800190c:	4293      	cmp	r3, r2
 800190e:	dd09      	ble.n	8001924 <ili9341_clip_rect+0x116>
      { *h = lcd->screen_size.height - *y; }
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8bda      	ldrh	r2, [r3, #30]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191a:	b29b      	uxth	r3, r3
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	b29a      	uxth	r2, r3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <ili9341_clip_rect+0x12a>
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <ili9341_clip_rect+0x12a>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <ili9341_clip_rect+0x12c>
 8001938:	2300      	movs	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	e000      	b.n	8001940 <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001950:	f000 fcfd 	bl	800234e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 f820 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f000 f9c2 	bl	8001ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 800195c:	f000 f99a 	bl	8001c94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001960:	f000 f968 	bl	8001c34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001964:	f000 f87a 	bl	8001a5c <MX_ADC1_Init>
  MX_TIM16_Init();
 8001968:	f000 f93e 	bl	8001be8 <MX_TIM16_Init>
  MX_OPAMP1_Init();
 800196c:	f000 f8da 	bl	8001b24 <MX_OPAMP1_Init>
  MX_SPI1_Init();
 8001970:	f000 f8fc 	bl	8001b6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  init_tasks(&hspi1, &htim16, &hadc1, &huart2);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <main+0x3c>)
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <main+0x40>)
 8001978:	4905      	ldr	r1, [pc, #20]	; (8001990 <main+0x44>)
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <main+0x48>)
 800197c:	f000 fca4 	bl	80022c8 <init_tasks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    manage_tasks();
 8001980:	f000 fcb6 	bl	80022f0 <manage_tasks>
 8001984:	e7fc      	b.n	8001980 <main+0x34>
 8001986:	bf00      	nop
 8001988:	20001dec 	.word	0x20001dec
 800198c:	20001c14 	.word	0x20001c14
 8001990:	20001da0 	.word	0x20001da0
 8001994:	20001cf4 	.word	0x20001cf4

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	; 0x58
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2244      	movs	r2, #68	; 0x44
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fa78 	bl	8006e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019be:	f002 fb95 	bl	80040ec <HAL_PWREx_ControlVoltageScaling>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019c8:	f000 f9e2 	bl	8001d90 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019cc:	f002 fb70 	bl	80040b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <SystemClock_Config+0xc0>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <SystemClock_Config+0xc0>)
 80019d8:	f023 0318 	bic.w	r3, r3, #24
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019e0:	2314      	movs	r3, #20
 80019e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019f0:	2360      	movs	r3, #96	; 0x60
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f4:	2302      	movs	r3, #2
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a00:	2310      	movs	r3, #16
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a04:	2307      	movs	r3, #7
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fbbf 	bl	8004198 <HAL_RCC_OscConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a20:	f000 f9b6 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a24:	230f      	movs	r3, #15
 8001a26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 ffbf 	bl	80049c0 <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a48:	f000 f9a2 	bl	8001d90 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a4c:	f003 fbd2 	bl	80051f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a50:	bf00      	nop
 8001a52:	3758      	adds	r7, #88	; 0x58
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a74:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <MX_ADC1_Init+0xc0>)
 8001a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a7a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8001a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a94:	2204      	movs	r2, #4
 8001a96:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad4:	4810      	ldr	r0, [pc, #64]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001ad6:	f000 fe9b 	bl	8002810 <HAL_ADC_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001ae0:	f000 f956 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_ADC1_Init+0xc4>)
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001aec:	2307      	movs	r3, #7
 8001aee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001af0:	237f      	movs	r3, #127	; 0x7f
 8001af2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001af4:	2304      	movs	r3, #4
 8001af6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_ADC1_Init+0xbc>)
 8001b02:	f001 f869 	bl	8002bd8 <HAL_ADC_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001b0c:	f000 f940 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20001c14 	.word	0x20001c14
 8001b1c:	50040000 	.word	0x50040000
 8001b20:	2a000400 	.word	0x2a000400

08001b24 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <MX_OPAMP1_Init+0x44>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b34:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b38:	220c      	movs	r2, #12
 8001b3a:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_OPAMP1_Init+0x40>)
 8001b50:	f002 f9d8 	bl	8003f04 <HAL_OPAMP_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 8001b5a:	f000 f919 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001cc0 	.word	0x20001cc0
 8001b68:	40007800 	.word	0x40007800

08001b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <MX_SPI1_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_SPI1_Init+0x74>)
 8001bcc:	f003 fc14 	bl	80053f8 <HAL_SPI_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bd6:	f000 f8db 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20001cf4 	.word	0x20001cf4
 8001be4:	40013000 	.word	0x40013000

08001be8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <MX_TIM16_Init+0x48>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32 - 1;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8000 - 1;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001c00:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c04:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <MX_TIM16_Init+0x44>)
 8001c1a:	f004 f8f9 	bl	8005e10 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c24:	f000 f8b4 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20001da0 	.word	0x20001da0
 8001c30:	40014400 	.word	0x40014400

08001c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <MX_USART2_UART_Init+0x5c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART2_UART_Init+0x58>)
 8001c78:	f004 fb22 	bl	80062c0 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c82:	f000 f885 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001dec 	.word	0x20001dec
 8001c90:	40004400 	.word	0x40004400

08001c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_DMA_Init+0x48>)
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <MX_DMA_Init+0x48>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <MX_DMA_Init+0x48>)
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	200b      	movs	r0, #11
 8001cb8:	f001 fd65 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cbc:	200b      	movs	r0, #11
 8001cbe:	f001 fd7e 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	200d      	movs	r0, #13
 8001cc8:	f001 fd5d 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ccc:	200d      	movs	r0, #13
 8001cce:	f001 fd76 	bl	80037be <HAL_NVIC_EnableIRQ>

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_GPIO_Init+0xa8>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LED_Pin|DC_Pin|RESET_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	21c9      	movs	r1, #201	; 0xc9
 8001d42:	4812      	ldr	r0, [pc, #72]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001d44:	f002 f8c6 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8001d48:	2341      	movs	r3, #65	; 0x41
 8001d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001d60:	f001 ff4e 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RESET_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin;
 8001d64:	2388      	movs	r3, #136	; 0x88
 8001d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_GPIO_Init+0xac>)
 8001d7c:	f001 ff40 	bl	8003c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000400 	.word	0x48000400

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_MspInit+0x44>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_MspInit+0x44>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	; 0x60
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_MspInit+0x44>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09e      	sub	sp, #120	; 0x78
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2254      	movs	r2, #84	; 0x54
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 f849 	bl	8006e9c <memset>
  if(hadc->Instance==ADC1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <HAL_ADC_MspInit+0x118>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d16e      	bne.n	8001ef2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e1e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e20:	2301      	movs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001e28:	2310      	movs	r3, #16
 8001e2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 ffe0 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001e4e:	f7ff ff9f 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_ADC_MspInit+0x11c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_ADC_MspInit+0x11c>)
 8001e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_ADC_MspInit+0x11c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_ADC_MspInit+0x11c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <HAL_ADC_MspInit+0x11c>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_ADC_MspInit+0x11c>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e82:	2320      	movs	r3, #32
 8001e84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e86:	230b      	movs	r3, #11
 8001e88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f001 feb2 	bl	8003c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001e9e:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_ADC_MspInit+0x124>)
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001ecc:	2220      	movs	r2, #32
 8001ece:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001ed8:	f001 fc8c 	bl	80037f4 <HAL_DMA_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001ee2:	f7ff ff55 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001eea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_ADC_MspInit+0x120>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3778      	adds	r7, #120	; 0x78
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	50040000 	.word	0x50040000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	20001c78 	.word	0x20001c78
 8001f08:	40020008 	.word	0x40020008

08001f0c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_OPAMP_MspInit+0x74>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d124      	bne.n	8001f78 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_OPAMP_MspInit+0x78>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_OPAMP_MspInit+0x78>)
 8001f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_OPAMP_MspInit+0x78>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_OPAMP_MspInit+0x78>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_OPAMP_MspInit+0x78>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_OPAMP_MspInit+0x78>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001f5e:	2309      	movs	r3, #9
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f62:	2303      	movs	r3, #3
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f001 fe44 	bl	8003c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40007800 	.word	0x40007800
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a34      	ldr	r2, [pc, #208]	; (8002078 <HAL_SPI_MspInit+0xf0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d162      	bne.n	8002070 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001faa:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_SPI_MspInit+0xf4>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_SPI_MspInit+0xf4>)
 8001fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_SPI_MspInit+0xf4>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <HAL_SPI_MspInit+0xf4>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_SPI_MspInit+0xf4>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_SPI_MspInit+0xf4>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001fda:	2382      	movs	r3, #130	; 0x82
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fea:	2305      	movs	r3, #5
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f001 fe02 	bl	8003c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ffc:	2340      	movs	r3, #64	; 0x40
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200c:	2305      	movs	r3, #5
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201a:	f001 fdf1 	bl	8003c00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002020:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_SPI_MspInit+0xfc>)
 8002022:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002026:	2201      	movs	r2, #1
 8002028:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 800202c:	2210      	movs	r2, #16
 800202e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002038:	2280      	movs	r2, #128	; 0x80
 800203a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002054:	480a      	ldr	r0, [pc, #40]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002056:	f001 fbcd 	bl	80037f4 <HAL_DMA_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8002060:	f7ff fe96 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <HAL_SPI_MspInit+0xf8>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40013000 	.word	0x40013000
 800207c:	40021000 	.word	0x40021000
 8002080:	20001d58 	.word	0x20001d58
 8002084:	40020030 	.word	0x40020030

08002088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_TIM_Base_MspInit+0x44>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_Base_MspInit+0x48>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_Base_MspInit+0x48>)
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	6613      	str	r3, [r2, #96]	; 0x60
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_Base_MspInit+0x48>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2019      	movs	r0, #25
 80020b8:	f001 fb65 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020bc:	2019      	movs	r0, #25
 80020be:	f001 fb7e 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40014400 	.word	0x40014400
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09e      	sub	sp, #120	; 0x78
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	2254      	movs	r2, #84	; 0x54
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fed1 	bl	8006e9c <memset>
  if(huart->Instance==USART2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <HAL_UART_MspInit+0xcc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d148      	bne.n	8002196 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4618      	mov	r0, r3
 8002112:	f002 fe79 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800211c:	f7ff fe38 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 8002126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_UART_MspInit+0xd0>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002150:	2304      	movs	r3, #4
 8002152:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002160:	2307      	movs	r3, #7
 8002162:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f001 fd47 	bl	8003c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002176:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002184:	2303      	movs	r3, #3
 8002186:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002192:	f001 fd35 	bl	8003c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002196:	bf00      	nop
 8002198:	3778      	adds	r7, #120	; 0x78
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40004400 	.word	0x40004400
 80021a4:	40021000 	.word	0x40021000

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f4:	f000 f900 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA1_Channel1_IRQHandler+0x10>)
 8002202:	f001 fc0f 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001c78 	.word	0x20001c78

08002210 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA1_Channel3_IRQHandler+0x10>)
 8002216:	f001 fc05 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20001d58 	.word	0x20001d58

08002224 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800222a:	f003 fe9d 	bl	8005f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20001da0 	.word	0x20001da0

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f004 fe30 	bl	8006ecc <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000c000 	.word	0x2000c000
 8002298:	00000800 	.word	0x00000800
 800229c:	20001e74 	.word	0x20001e74
 80022a0:	20001fc8 	.word	0x20001fc8

080022a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <init_tasks>:

void init_tasks(
    SPI_HandleTypeDef* spi,
    TIM_HandleTypeDef* timer,
    ADC_HandleTypeDef* adc,
    UART_HandleTypeDef* uart) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]

  init_display(spi, timer, adc, uart);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7fe f94d 	bl	800057c <init_display>
  HAL_TIM_Base_Start_IT(timer);
 80022e2:	68b8      	ldr	r0, [r7, #8]
 80022e4:	f003 fdec 	bl	8005ec0 <HAL_TIM_Base_Start_IT>
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <manage_tasks>:

void manage_tasks() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  display_graph();
 80022f4:	f7fe f9fe 	bl	80006f4 <display_graph>
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002334 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002300:	f7ff ffd0 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002304:	480c      	ldr	r0, [pc, #48]	; (8002338 <LoopForever+0x6>)
  ldr r1, =_edata
 8002306:	490d      	ldr	r1, [pc, #52]	; (800233c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <LoopForever+0xe>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800231c:	4c0a      	ldr	r4, [pc, #40]	; (8002348 <LoopForever+0x16>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232a:	f004 fdd5 	bl	8006ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800232e:	f7ff fb0d 	bl	800194c <main>

08002332 <LoopForever>:

LoopForever:
    b LoopForever
 8002332:	e7fe      	b.n	8002332 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002334:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800233c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002340:	08008a94 	.word	0x08008a94
  ldr r2, =_sbss
 8002344:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002348:	20001fc4 	.word	0x20001fc4

0800234c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC1_IRQHandler>

0800234e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002358:	2003      	movs	r0, #3
 800235a:	f001 fa09 	bl	8003770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235e:	2000      	movs	r0, #0
 8002360:	f000 f80e 	bl	8002380 <HAL_InitTick>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	e001      	b.n	8002374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002370:	f7ff fd14 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002374:	79fb      	ldrb	r3, [r7, #7]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_InitTick+0x6c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_InitTick+0x70>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_InitTick+0x6c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 fa15 	bl	80037da <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d809      	bhi.n	80023d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f001 f9df 	bl	8003786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_InitTick+0x74>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e004      	b.n	80023e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e001      	b.n	80023e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	20000004 	.word	0x20000004
 80023f4:	20000008 	.word	0x20000008

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000000c 	.word	0x2000000c
 800241c:	20001e78 	.word	0x20001e78

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20001e78 	.word	0x20001e78

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d005      	beq.n	800245e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_Delay+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245e:	bf00      	nop
 8002460:	f7ff ffde 	bl	8002420 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d8f7      	bhi.n	8002460 <HAL_Delay+0x28>
  {
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c

08002480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3360      	adds	r3, #96	; 0x60
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <LL_ADC_SetOffset+0x44>)
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	4313      	orrs	r3, r2
 8002518:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	03fff000 	.word	0x03fff000

08002530 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3360      	adds	r3, #96	; 0x60
 800253e:	461a      	mov	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3360      	adds	r3, #96	; 0x60
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3330      	adds	r3, #48	; 0x30
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	211f      	movs	r1, #31
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	f003 011f 	and.w	r1, r3, #31
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	431a      	orrs	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3314      	adds	r3, #20
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	0e5b      	lsrs	r3, r3, #25
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	4413      	add	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	0d1b      	lsrs	r3, r3, #20
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2107      	movs	r1, #7
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	401a      	ands	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	0d1b      	lsrs	r3, r3, #20
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0318 	and.w	r3, r3, #24
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800268c:	40d9      	lsrs	r1, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	400b      	ands	r3, r1
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	431a      	orrs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	0007ffff 	.word	0x0007ffff

080026b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6093      	str	r3, [r2, #8]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e8:	d101      	bne.n	80026ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800270c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002710:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002738:	d101      	bne.n	800273e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800275c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <LL_ADC_IsEnabled+0x18>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_ADC_IsEnabled+0x1a>
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ae:	f043 0204 	orr.w	r2, r3, #4
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d101      	bne.n	80027da <LL_ADC_REG_IsConversionOngoing+0x18>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d101      	bne.n	8002800 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e126      	b.n	8002a78 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fad3 	bl	8001de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff3f 	bl	80026d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff25 	bl	80026b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff5a 	bl	8002724 <LL_ADC_IsInternalRegulatorEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d115      	bne.n	80028a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff3e 	bl	80026fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002880:	4b7f      	ldr	r3, [pc, #508]	; (8002a80 <HAL_ADC_Init+0x270>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	4a7f      	ldr	r2, [pc, #508]	; (8002a84 <HAL_ADC_Init+0x274>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002894:	e002      	b.n	800289c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3b01      	subs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f9      	bne.n	8002896 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff3c 	bl	8002724 <LL_ADC_IsInternalRegulatorEnabled>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff75 	bl	80027c2 <LL_ADC_REG_IsConversionOngoing>
 80028d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80bf 	bne.w	8002a66 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 80bb 	bne.w	8002a66 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028f8:	f043 0202 	orr.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff35 	bl	8002774 <LL_ADC_IsEnabled>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002910:	485d      	ldr	r0, [pc, #372]	; (8002a88 <HAL_ADC_Init+0x278>)
 8002912:	f7ff ff2f 	bl	8002774 <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	485a      	ldr	r0, [pc, #360]	; (8002a8c <HAL_ADC_Init+0x27c>)
 8002924:	f7ff fdac 	bl	8002480 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7e5b      	ldrb	r3, [r3, #25]
 800292c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002932:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002938:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800293e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002946:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d106      	bne.n	8002964 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	045b      	lsls	r3, r3, #17
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_ADC_Init+0x280>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff25 	bl	80027e8 <LL_ADC_INJ_IsConversionOngoing>
 800299e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d13d      	bne.n	8002a22 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d13a      	bne.n	8002a22 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029b8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c8:	f023 0302 	bic.w	r3, r3, #2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	69b9      	ldr	r1, [r7, #24]
 80029d2:	430b      	orrs	r3, r1
 80029d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d118      	bne.n	8002a12 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a02:	430a      	orrs	r2, r1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	611a      	str	r2, [r3, #16]
 8002a10:	e007      	b.n	8002a22 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10c      	bne.n	8002a44 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f023 010f 	bic.w	r1, r3, #15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
 8002a42:	e007      	b.n	8002a54 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 020f 	bic.w	r2, r2, #15
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
 8002a64:	e007      	b.n	8002a76 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000004 	.word	0x20000004
 8002a84:	053e2d63 	.word	0x053e2d63
 8002a88:	50040000 	.word	0x50040000
 8002a8c:	50040300 	.word	0x50040300
 8002a90:	fff0c007 	.word	0xfff0c007

08002a94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fe8c 	bl	80027c2 <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d167      	bne.n	8002b80 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_Start_DMA+0x2a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e063      	b.n	8002b86 <HAL_ADC_Start_DMA+0xf2>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fc68 	bl	800339c <ADC_Enable>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d14f      	bne.n	8002b76 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f023 0206 	bic.w	r2, r3, #6
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58
 8002b02:	e002      	b.n	8002b0a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <HAL_ADC_Start_DMA+0xfc>)
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_ADC_Start_DMA+0x100>)
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_ADC_Start_DMA+0x104>)
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	221c      	movs	r2, #28
 8002b28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0210 	orr.w	r2, r2, #16
 8002b40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3340      	adds	r3, #64	; 0x40
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f000 feff 	bl	8003964 <HAL_DMA_Start_IT>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fe13 	bl	800279a <LL_ADC_REG_StartConversion>
 8002b74:	e006      	b.n	8002b84 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b7e:	e001      	b.n	8002b84 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
 8002b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	080034a9 	.word	0x080034a9
 8002b94:	08003581 	.word	0x08003581
 8002b98:	0800359d 	.word	0x0800359d

08002b9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0b6      	sub	sp, #216	; 0xd8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x22>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e3bb      	b.n	8003372 <HAL_ADC_ConfigChannel+0x79a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fddb 	bl	80027c2 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 83a0 	bne.w	8003354 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d824      	bhi.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	3b02      	subs	r3, #2
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d81b      	bhi.n	8002c66 <HAL_ADC_ConfigChannel+0x8e>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <HAL_ADC_ConfigChannel+0x5c>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c4d 	.word	0x08002c4d
 8002c3c:	08002c55 	.word	0x08002c55
 8002c40:	08002c5d 	.word	0x08002c5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c44:	230c      	movs	r3, #12
 8002c46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c4a:	e010      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c4c:	2312      	movs	r3, #18
 8002c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c52:	e00c      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c54:	2318      	movs	r3, #24
 8002c56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c5a:	e008      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c64:	e003      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c66:	2306      	movs	r3, #6
 8002c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002c6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002c7c:	f7ff fc9c 	bl	80025b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fd9c 	bl	80027c2 <LL_ADC_REG_IsConversionOngoing>
 8002c8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fda8 	bl	80027e8 <LL_ADC_INJ_IsConversionOngoing>
 8002c98:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 81a4 	bne.w	8002fee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 819f 	bne.w	8002fee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f7ff fca7 	bl	8002610 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d00a      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6919      	ldr	r1, [r3, #16]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf4:	f7ff fbf8 	bl	80024e8 <LL_ADC_SetOffset>
 8002cf8:	e179      	b.n	8002fee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fc15 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x14e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fc0a 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	e01e      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x18c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fbff 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e004      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1a4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	e018      	b.n	8002dae <HAL_ADC_ConfigChannel+0x1d6>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e004      	b.n	8002dae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fbce 	bl	800255c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fbb2 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x214>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fba7 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	e01e      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x252>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fb9c 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e004      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x26a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	e018      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x29c>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e004      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fb6b 	bl	800255c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fb4f 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x2da>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb44 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x318>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fb39 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x330>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	e014      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x35a>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb0c 	bl	800255c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2103      	movs	r1, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff faf0 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x398>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2103      	movs	r1, #3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fae5 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	e017      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x3c8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2103      	movs	r1, #3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fada 	bl	8002530 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x3e0>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	e011      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x404>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e003      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d106      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fab7 	bl	800255c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fbbe 	bl	8002774 <LL_ADC_IsEnabled>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8140 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	461a      	mov	r2, r3
 800300e:	f7ff fb2b 	bl	8002668 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4a8f      	ldr	r2, [pc, #572]	; (8003254 <HAL_ADC_ConfigChannel+0x67c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	f040 8131 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x46e>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2b09      	cmp	r3, #9
 800303c:	bf94      	ite	ls
 800303e:	2301      	movls	r3, #1
 8003040:	2300      	movhi	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e019      	b.n	800307a <HAL_ADC_ConfigChannel+0x4a2>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003056:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e003      	b.n	800306a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2b09      	cmp	r3, #9
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307a:	2b00      	cmp	r3, #0
 800307c:	d079      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_ADC_ConfigChannel+0x4c2>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0e9b      	lsrs	r3, r3, #26
 8003090:	3301      	adds	r3, #1
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003098:	e015      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x4ee>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80030ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e003      	b.n	80030be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	069b      	lsls	r3, r3, #26
 80030c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x50e>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	e017      	b.n	8003116 <HAL_ADC_ConfigChannel+0x53e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80030f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	ea42 0103 	orr.w	r1, r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x564>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e9b      	lsrs	r3, r3, #26
 800312c:	3301      	adds	r3, #1
 800312e:	f003 021f 	and.w	r2, r3, #31
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	051b      	lsls	r3, r3, #20
 800313a:	e018      	b.n	800316e <HAL_ADC_ConfigChannel+0x596>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316e:	430b      	orrs	r3, r1
 8003170:	e081      	b.n	8003276 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_ADC_ConfigChannel+0x5b6>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	3301      	adds	r3, #1
 8003186:	069b      	lsls	r3, r3, #26
 8003188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800318c:	e015      	b.n	80031ba <HAL_ADC_ConfigChannel+0x5e2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e003      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	069b      	lsls	r3, r3, #26
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_ADC_ConfigChannel+0x602>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	e017      	b.n	800320a <HAL_ADC_ConfigChannel+0x632>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	61bb      	str	r3, [r7, #24]
  return result;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e003      	b.n	80031fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	ea42 0103 	orr.w	r1, r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x65e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	3301      	adds	r3, #1
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	3b1e      	subs	r3, #30
 800322e:	051b      	lsls	r3, r3, #20
 8003230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003234:	e01e      	b.n	8003274 <HAL_ADC_ConfigChannel+0x69c>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	60fb      	str	r3, [r7, #12]
  return result;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e006      	b.n	8003260 <HAL_ADC_ConfigChannel+0x688>
 8003252:	bf00      	nop
 8003254:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	051b      	lsls	r3, r3, #20
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003274:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800327a:	4619      	mov	r1, r3
 800327c:	f7ff f9c8 	bl	8002610 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_ADC_ConfigChannel+0x7a4>)
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d06c      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328c:	483c      	ldr	r0, [pc, #240]	; (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 800328e:	f7ff f91d 	bl	80024cc <LL_ADC_GetCommonPathInternalCh>
 8003292:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <HAL_ADC_ConfigChannel+0x7ac>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d127      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a35      	ldr	r2, [pc, #212]	; (8003388 <HAL_ADC_ConfigChannel+0x7b0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d157      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032be:	4619      	mov	r1, r3
 80032c0:	482f      	ldr	r0, [pc, #188]	; (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 80032c2:	f7ff f8f0 	bl	80024a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_ADC_ConfigChannel+0x7b4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	4a30      	ldr	r2, [pc, #192]	; (8003390 <HAL_ADC_ConfigChannel+0x7b8>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ee:	e03a      	b.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <HAL_ADC_ConfigChannel+0x7bc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d113      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_ADC_ConfigChannel+0x7b0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d12a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003318:	4619      	mov	r1, r3
 800331a:	4819      	ldr	r0, [pc, #100]	; (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 800331c:	f7ff f8c3 	bl	80024a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003320:	e021      	b.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_ADC_ConfigChannel+0x7c0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d11c      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800332c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_ADC_ConfigChannel+0x7b0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003346:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800334a:	4619      	mov	r1, r3
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 800334e:	f7ff f8aa 	bl	80024a6 <LL_ADC_SetCommonPathInternalCh>
 8003352:	e008      	b.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800336e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003372:	4618      	mov	r0, r3
 8003374:	37d8      	adds	r7, #216	; 0xd8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	80080000 	.word	0x80080000
 8003380:	50040300 	.word	0x50040300
 8003384:	c7520000 	.word	0xc7520000
 8003388:	50040000 	.word	0x50040000
 800338c:	20000004 	.word	0x20000004
 8003390:	053e2d63 	.word	0x053e2d63
 8003394:	cb840000 	.word	0xcb840000
 8003398:	80000001 	.word	0x80000001

0800339c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f9e1 	bl	8002774 <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d169      	bne.n	800348c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <ADC_Enable+0xfc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e055      	b.n	800348e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f9b0 	bl	800274c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033ec:	482b      	ldr	r0, [pc, #172]	; (800349c <ADC_Enable+0x100>)
 80033ee:	f7ff f86d 	bl	80024cc <LL_ADC_GetCommonPathInternalCh>
 80033f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <ADC_Enable+0x104>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <ADC_Enable+0x108>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003416:	e002      	b.n	800341e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003424:	f7fe fffc 	bl	8002420 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342a:	e028      	b.n	800347e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f99f 	bl	8002774 <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f983 	bl	800274c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003446:	f7fe ffeb 	bl	8002420 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d914      	bls.n	800347e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d00d      	beq.n	800347e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e007      	b.n	800348e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d1cf      	bne.n	800342c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	8000003f 	.word	0x8000003f
 800349c:	50040300 	.word	0x50040300
 80034a0:	20000004 	.word	0x20000004
 80034a4:	053e2d63 	.word	0x053e2d63

080034a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d14b      	bne.n	800355a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d021      	beq.n	8003520 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f856 	bl	8002592 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d032      	beq.n	8003552 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d12b      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11f      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
 800351e:	e018      	b.n	8003552 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d111      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff fb22 	bl	8002b9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003558:	e00e      	b.n	8003578 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fb2c 	bl	8002bc4 <HAL_ADC_ErrorCallback>
}
 800356c:	e004      	b.n	8003578 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fb0e 	bl	8002bb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff fafe 	bl	8002bc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800373c:	d301      	bcc.n	8003742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <SysTick_Config+0x40>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374a:	210f      	movs	r1, #15
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f7ff ff8e 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <SysTick_Config+0x40>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <SysTick_Config+0x40>)
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff29 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003798:	f7ff ff3e 	bl	8003618 <__NVIC_GetPriorityGrouping>
 800379c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff8e 	bl	80036c4 <NVIC_EncodePriority>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff5d 	bl	8003670 <__NVIC_SetPriority>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff31 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffa2 	bl	800372c <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e098      	b.n	8003938 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <HAL_DMA_Init+0x150>)
 800380e:	429a      	cmp	r2, r3
 8003810:	d80f      	bhi.n	8003832 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_DMA_Init+0x154>)
 800381a:	4413      	add	r3, r2
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_DMA_Init+0x158>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a48      	ldr	r2, [pc, #288]	; (8003950 <HAL_DMA_Init+0x15c>)
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
 8003830:	e00e      	b.n	8003850 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_DMA_Init+0x160>)
 800383a:	4413      	add	r3, r2
 800383c:	4a43      	ldr	r2, [pc, #268]	; (800394c <HAL_DMA_Init+0x158>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	009a      	lsls	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_DMA_Init+0x164>)
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038aa:	d039      	beq.n	8003920 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <HAL_DMA_Init+0x15c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d11a      	bne.n	80038ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <HAL_DMA_Init+0x168>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f003 031c 	and.w	r3, r3, #28
 80038c2:	210f      	movs	r1, #15
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	4924      	ldr	r1, [pc, #144]	; (800395c <HAL_DMA_Init+0x168>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_DMA_Init+0x168>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	f003 031c 	and.w	r3, r3, #28
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	491d      	ldr	r1, [pc, #116]	; (800395c <HAL_DMA_Init+0x168>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
 80038ea:	e019      	b.n	8003920 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038ec:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_DMA_Init+0x16c>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	f003 031c 	and.w	r3, r3, #28
 80038f8:	210f      	movs	r1, #15
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	4917      	ldr	r1, [pc, #92]	; (8003960 <HAL_DMA_Init+0x16c>)
 8003902:	4013      	ands	r3, r2
 8003904:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_DMA_Init+0x16c>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f003 031c 	and.w	r3, r3, #28
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	4911      	ldr	r1, [pc, #68]	; (8003960 <HAL_DMA_Init+0x16c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40020407 	.word	0x40020407
 8003948:	bffdfff8 	.word	0xbffdfff8
 800394c:	cccccccd 	.word	0xcccccccd
 8003950:	40020000 	.word	0x40020000
 8003954:	bffdfbf8 	.word	0xbffdfbf8
 8003958:	40020400 	.word	0x40020400
 800395c:	400200a8 	.word	0x400200a8
 8003960:	400204a8 	.word	0x400204a8

08003964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_DMA_Start_IT+0x20>
 8003980:	2302      	movs	r3, #2
 8003982:	e04b      	b.n	8003a1c <HAL_DMA_Start_IT+0xb8>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d13a      	bne.n	8003a0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f8ee 	bl	8003b9e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 020e 	orr.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e00f      	b.n	80039fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0204 	bic.w	r2, r2, #4
 80039ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 020a 	orr.w	r2, r2, #10
 80039fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e005      	b.n	8003a1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f003 031c 	and.w	r3, r3, #28
 8003a44:	2204      	movs	r2, #4
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d026      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7a>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d021      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 021c 	and.w	r2, r3, #28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2104      	movs	r1, #4
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d071      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a9c:	e06c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 031c 	and.w	r3, r3, #28
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02e      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xec>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d029      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 020a 	bic.w	r2, r2, #10
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f003 021c 	and.w	r2, r3, #28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2102      	movs	r1, #2
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d038      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b0e:	e033      	b.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	f003 031c 	and.w	r3, r3, #28
 8003b18:	2208      	movs	r2, #8
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02a      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020e 	bic.w	r2, r2, #14
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 021c 	and.w	r2, r3, #28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
}
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b90:	b2db      	uxtb	r3, r3
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f003 021c 	and.w	r2, r3, #28
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d108      	bne.n	8003be2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003be0:	e007      	b.n	8003bf2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0e:	e148      	b.n	8003ea2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 813a 	beq.w	8003e9c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d005      	beq.n	8003c40 <HAL_GPIO_Init+0x40>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d130      	bne.n	8003ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c76:	2201      	movs	r2, #1
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 0201 	and.w	r2, r3, #1
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d017      	beq.n	8003cde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d123      	bne.n	8003d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	6939      	ldr	r1, [r7, #16]
 8003d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8094 	beq.w	8003e9c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d74:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <HAL_GPIO_Init+0x2c0>)
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	4a51      	ldr	r2, [pc, #324]	; (8003ec0 <HAL_GPIO_Init+0x2c0>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_GPIO_Init+0x2c0>)
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	; (8003ec4 <HAL_GPIO_Init+0x2c4>)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	3302      	adds	r3, #2
 8003d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003db6:	d00d      	beq.n	8003dd4 <HAL_GPIO_Init+0x1d4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a43      	ldr	r2, [pc, #268]	; (8003ec8 <HAL_GPIO_Init+0x2c8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <HAL_GPIO_Init+0x1d0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a42      	ldr	r2, [pc, #264]	; (8003ecc <HAL_GPIO_Init+0x2cc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_GPIO_Init+0x1cc>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e004      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dcc:	2307      	movs	r3, #7
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	f002 0203 	and.w	r2, r2, #3
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	4093      	lsls	r3, r2
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003de6:	4937      	ldr	r1, [pc, #220]	; (8003ec4 <HAL_GPIO_Init+0x2c4>)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	3302      	adds	r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003df4:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e18:	4a2d      	ldr	r2, [pc, #180]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e42:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e72:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e96:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f47f aeaf 	bne.w	8003c10 <HAL_GPIO_Init+0x10>
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	48000400 	.word	0x48000400
 8003ecc:	48000800 	.word	0x48000800
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef0:	e002      	b.n	8003ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0c3      	b.n	80040a2 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d101      	bne.n	8003f2a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0bb      	b.n	80040a2 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d101      	bne.n	8003f3a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0b3      	b.n	80040a2 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd ffd8 	bl	8001f0c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f6a:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d11b      	bne.n	8003fac <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003f7e:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6891      	ldr	r1, [r2, #8]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6992      	ldr	r2, [r2, #24]
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6912      	ldr	r2, [r2, #16]
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6952      	ldr	r2, [r2, #20]
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	69d2      	ldr	r2, [r2, #28]
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d115      	bne.n	8003fe0 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003fbe:	f023 030e 	bic.w	r3, r3, #14
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6891      	ldr	r1, [r2, #8]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68d2      	ldr	r2, [r2, #12]
 8003fca:	4311      	orrs	r1, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6952      	ldr	r2, [r2, #20]
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	69d2      	ldr	r2, [r2, #28]
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d118      	bne.n	800401a <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003ff2:	f023 030e 	bic.w	r3, r3, #14
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6891      	ldr	r1, [r2, #8]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6912      	ldr	r2, [r2, #16]
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6952      	ldr	r2, [r2, #20]
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	69d2      	ldr	r2, [r2, #28]
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	430b      	orrs	r3, r1
 8004018:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004022:	d12a      	bne.n	800407a <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d013      	beq.n	8004054 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004036:	4313      	orrs	r3, r2
 8004038:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004044:	f023 031f 	bic.w	r3, r3, #31
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	430b      	orrs	r3, r1
 8004050:	6053      	str	r3, [r2, #4]
 8004052:	e012      	b.n	800407a <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800405e:	4313      	orrs	r3, r2
 8004060:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800406c:	f023 031f 	bic.w	r3, r3, #31
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	430b      	orrs	r3, r1
 8004078:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_OPAMP_Init+0x1a8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4909      	ldr	r1, [pc, #36]	; (80040ac <HAL_OPAMP_Init+0x1a8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40007800 	.word	0x40007800

080040b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fa:	d130      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fc:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d038      	beq.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2232      	movs	r2, #50	; 0x32
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004130:	e002      	b.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004144:	d102      	bne.n	800414c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f2      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d110      	bne.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e00f      	b.n	800417e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d007      	beq.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004174:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800417a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000
 8004190:	20000004 	.word	0x20000004
 8004194:	431bde83 	.word	0x431bde83

08004198 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f000 bc02 	b.w	80049b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ac:	4b96      	ldr	r3, [pc, #600]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b6:	4b94      	ldr	r3, [pc, #592]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80e4 	beq.w	8004396 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4c>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	f040 808b 	bne.w	80042f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	f040 8087 	bne.w	80042f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041e4:	4b88      	ldr	r3, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_OscConfig+0x64>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e3d9      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	4b81      	ldr	r3, [pc, #516]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_RCC_OscConfig+0x7e>
 800420c:	4b7e      	ldr	r3, [pc, #504]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004214:	e005      	b.n	8004222 <HAL_RCC_OscConfig+0x8a>
 8004216:	4b7c      	ldr	r3, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004222:	4293      	cmp	r3, r2
 8004224:	d223      	bcs.n	800426e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fd8c 	bl	8004d48 <RCC_SetFlashLatencyFromMSIRange>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e3ba      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a72      	ldr	r2, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	496d      	ldr	r1, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004254:	4313      	orrs	r3, r2
 8004256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	4968      	ldr	r1, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
 800426c:	e025      	b.n	80042ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800426e:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a65      	ldr	r2, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004274:	f043 0308 	orr.w	r3, r3, #8
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4960      	ldr	r1, [pc, #384]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428c:	4b5e      	ldr	r3, [pc, #376]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	495b      	ldr	r1, [pc, #364]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd4c 	bl	8004d48 <RCC_SetFlashLatencyFromMSIRange>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e37a      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ba:	f000 fc81 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b51      	ldr	r3, [pc, #324]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	4950      	ldr	r1, [pc, #320]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <HAL_RCC_OscConfig+0x278>)
 80042d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042da:	4b4e      	ldr	r3, [pc, #312]	; (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe f84e 	bl	8002380 <HAL_InitTick>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d052      	beq.n	8004394 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	e35e      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d032      	beq.n	8004360 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a42      	ldr	r2, [pc, #264]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004306:	f7fe f88b 	bl	8002420 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430e:	f7fe f887 	bl	8002420 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e347      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004320:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432c:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a35      	ldr	r2, [pc, #212]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004332:	f043 0308 	orr.w	r3, r3, #8
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4930      	ldr	r1, [pc, #192]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800434a:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	492b      	ldr	r1, [pc, #172]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
 800435e:	e01a      	b.n	8004396 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004360:	4b29      	ldr	r3, [pc, #164]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800436c:	f7fe f858 	bl	8002420 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004374:	f7fe f854 	bl	8002420 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e314      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x1dc>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d073      	beq.n	800448a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_OscConfig+0x21c>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d10e      	bne.n	80043cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d063      	beq.n	8004488 <HAL_RCC_OscConfig+0x2f0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d15f      	bne.n	8004488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e2f1      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x24c>
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e025      	b.n	8004430 <HAL_RCC_OscConfig+0x298>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d114      	bne.n	8004418 <HAL_RCC_OscConfig+0x280>
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a02      	ldr	r2, [pc, #8]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e013      	b.n	8004430 <HAL_RCC_OscConfig+0x298>
 8004408:	40021000 	.word	0x40021000
 800440c:	08008a08 	.word	0x08008a08
 8004410:	20000004 	.word	0x20000004
 8004414:	20000008 	.word	0x20000008
 8004418:	4ba0      	ldr	r3, [pc, #640]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a9f      	ldr	r2, [pc, #636]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b9d      	ldr	r3, [pc, #628]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a9c      	ldr	r2, [pc, #624]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800442a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fff2 	bl	8002420 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd ffee 	bl	8002420 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e2ae      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004452:	4b92      	ldr	r3, [pc, #584]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x2a8>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd ffde 	bl	8002420 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd ffda 	bl	8002420 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e29a      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447a:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x2d0>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d060      	beq.n	8004558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_OscConfig+0x310>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d116      	bne.n	80044d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a8:	4b7c      	ldr	r3, [pc, #496]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x328>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e277      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	4973      	ldr	r1, [pc, #460]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d4:	e040      	b.n	8004558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d023      	beq.n	8004526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044de:	4b6f      	ldr	r3, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fd ff99 	bl	8002420 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fd ff95 	bl	8002420 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e255      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004504:	4b65      	ldr	r3, [pc, #404]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	495f      	ldr	r1, [pc, #380]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
 8004524:	e018      	b.n	8004558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5c      	ldr	r2, [pc, #368]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800452c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fd ff75 	bl	8002420 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453a:	f7fd ff71 	bl	8002420 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e231      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d03c      	beq.n	80045de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004572:	4a4a      	ldr	r2, [pc, #296]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd ff50 	bl	8002420 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fd ff4c 	bl	8002420 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e20c      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ef      	beq.n	8004584 <HAL_RCC_OscConfig+0x3ec>
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ac:	4a3b      	ldr	r2, [pc, #236]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fd ff33 	bl	8002420 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fd ff2f 	bl	8002420 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1ef      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ef      	bne.n	80045be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80a6 	beq.w	8004738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ec:	2300      	movs	r3, #0
 80045ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a26      	ldr	r2, [pc, #152]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004614:	2301      	movs	r3, #1
 8004616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d118      	bne.n	8004656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004630:	f7fd fef6 	bl	8002420 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fd fef2 	bl	8002420 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1b2      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x4d8>
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466e:	e029      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b05      	cmp	r3, #5
 8004676:	d115      	bne.n	80046a4 <HAL_RCC_OscConfig+0x50c>
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	4a07      	ldr	r2, [pc, #28]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	4a03      	ldr	r2, [pc, #12]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
 80046a4:	4b9a      	ldr	r3, [pc, #616]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	4a99      	ldr	r2, [pc, #612]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b4:	4b96      	ldr	r3, [pc, #600]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	4a95      	ldr	r2, [pc, #596]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d016      	beq.n	80046fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fd fea8 	bl	8002420 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fd fea4 	bl	8002420 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e162      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	4b89      	ldr	r3, [pc, #548]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ed      	beq.n	80046d4 <HAL_RCC_OscConfig+0x53c>
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fd fe91 	bl	8002420 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fd fe8d 	bl	8002420 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e14b      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004718:	4b7d      	ldr	r3, [pc, #500]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ed      	bne.n	8004702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b78      	ldr	r3, [pc, #480]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	4a77      	ldr	r2, [pc, #476]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d03c      	beq.n	80047be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01c      	beq.n	8004786 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800474c:	4b70      	ldr	r3, [pc, #448]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800474e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004752:	4a6f      	ldr	r2, [pc, #444]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fd fe60 	bl	8002420 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004764:	f7fd fe5c 	bl	8002420 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e11c      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004776:	4b66      	ldr	r3, [pc, #408]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ef      	beq.n	8004764 <HAL_RCC_OscConfig+0x5cc>
 8004784:	e01b      	b.n	80047be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004786:	4b62      	ldr	r3, [pc, #392]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478c:	4a60      	ldr	r2, [pc, #384]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fd fe43 	bl	8002420 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479e:	f7fd fe3f 	bl	8002420 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0ff      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047b0:	4b57      	ldr	r3, [pc, #348]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80047b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ef      	bne.n	800479e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80f3 	beq.w	80049ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f040 80c9 	bne.w	8004964 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 0203 	and.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d12c      	bne.n	8004840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	3b01      	subs	r3, #1
 80047f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d123      	bne.n	8004840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d11b      	bne.n	8004840 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d113      	bne.n	8004840 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d109      	bne.n	8004840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	3b01      	subs	r3, #1
 800483a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d06b      	beq.n	8004918 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	d062      	beq.n	800490c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004846:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0ac      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800485c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004860:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004862:	f7fd fddd 	bl	8002420 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486a:	f7fd fdd9 	bl	8002420 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e099      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487c:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f0      	bne.n	800486a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	4b21      	ldr	r3, [pc, #132]	; (8004914 <HAL_RCC_OscConfig+0x77c>)
 800488e:	4013      	ands	r3, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004898:	3a01      	subs	r2, #1
 800489a:	0112      	lsls	r2, r2, #4
 800489c:	4311      	orrs	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048a2:	0212      	lsls	r2, r2, #8
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048aa:	0852      	lsrs	r2, r2, #1
 80048ac:	3a01      	subs	r2, #1
 80048ae:	0552      	lsls	r2, r2, #21
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048b6:	0852      	lsrs	r2, r2, #1
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0652      	lsls	r2, r2, #25
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048c2:	06d2      	lsls	r2, r2, #27
 80048c4:	430a      	orrs	r2, r1
 80048c6:	4912      	ldr	r1, [pc, #72]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0f      	ldr	r2, [pc, #60]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 80048de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048e4:	f7fd fd9c 	bl	8002420 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fd98 	bl	8002420 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e058      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <HAL_RCC_OscConfig+0x778>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800490a:	e050      	b.n	80049ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e04f      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
 8004910:	40021000 	.word	0x40021000
 8004914:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004918:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d144      	bne.n	80049ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 8004936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800493a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800493c:	f7fd fd70 	bl	8002420 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fd fd6c 	bl	8002420 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e02c      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0f0      	beq.n	8004944 <HAL_RCC_OscConfig+0x7ac>
 8004962:	e024      	b.n	80049ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d01f      	beq.n	80049aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 8004970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fd fd53 	bl	8002420 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497e:	f7fd fd4f 	bl	8002420 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e00f      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4905      	ldr	r1, [pc, #20]	; (80049b8 <HAL_RCC_OscConfig+0x820>)
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_RCC_OscConfig+0x824>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	60cb      	str	r3, [r1, #12]
 80049a8:	e001      	b.n	80049ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	feeefffc 	.word	0xfeeefffc

080049c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0e7      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b75      	ldr	r3, [pc, #468]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d910      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 0207 	bic.w	r2, r3, #7
 80049ea:	4970      	ldr	r1, [pc, #448]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b6e      	ldr	r3, [pc, #440]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0cf      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	4b66      	ldr	r3, [pc, #408]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d908      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b63      	ldr	r3, [pc, #396]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4960      	ldr	r1, [pc, #384]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04c      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a46:	4b5a      	ldr	r3, [pc, #360]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d121      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0a6      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	4b54      	ldr	r3, [pc, #336]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d115      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e09a      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a76:	4b4e      	ldr	r3, [pc, #312]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e08e      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a86:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e086      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4943      	ldr	r1, [pc, #268]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fd fcba 	bl	8002420 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fd fcb6 	bl	8002420 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e06e      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d208      	bcs.n	8004b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	492b      	ldr	r1, [pc, #172]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b06:	4b29      	ldr	r3, [pc, #164]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d210      	bcs.n	8004b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 0207 	bic.w	r2, r3, #7
 8004b1c:	4923      	ldr	r1, [pc, #140]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e036      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4918      	ldr	r1, [pc, #96]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4910      	ldr	r1, [pc, #64]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b74:	f000 f824 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	490b      	ldr	r1, [pc, #44]	; (8004bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b90:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1fc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fd fbf1 	bl	8002380 <HAL_InitTick>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	08008a08 	.word	0x08008a08
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	20000008 	.word	0x20000008

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	; 0x24
 8004bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bce:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d121      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d11e      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bf4:	4b34      	ldr	r3, [pc, #208]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c00:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e005      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10d      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c38:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e004      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c44:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d134      	bne.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d003      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0xac>
 8004c64:	e005      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c68:	617b      	str	r3, [r7, #20]
      break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c6e:	617b      	str	r3, [r7, #20]
      break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	617b      	str	r3, [r7, #20]
      break;
 8004c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c78:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	3301      	adds	r3, #1
 8004c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	fb03 f202 	mul.w	r2, r3, r2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	0e5b      	lsrs	r3, r3, #25
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	; 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	08008a20 	.word	0x08008a20
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	007a1200 	.word	0x007a1200

08004cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000004 	.word	0x20000004

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4904      	ldr	r1, [pc, #16]	; (8004d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08008a18 	.word	0x08008a18

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d20:	f7ff ffda 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0adb      	lsrs	r3, r3, #11
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	; (8004d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	08008a18 	.word	0x08008a18

08004d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d60:	f7ff f9b6 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004d64:	6178      	str	r0, [r7, #20]
 8004d66:	e014      	b.n	8004d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	6593      	str	r3, [r2, #88]	; 0x58
 8004d74:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d80:	f7ff f9a6 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d98:	d10b      	bne.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d919      	bls.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2ba0      	cmp	r3, #160	; 0xa0
 8004da4:	d902      	bls.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004da6:	2302      	movs	r3, #2
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e013      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dac:	2301      	movs	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	e010      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b80      	cmp	r3, #128	; 0x80
 8004db6:	d902      	bls.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004db8:	2303      	movs	r3, #3
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e00a      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d102      	bne.n	8004dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	e004      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b70      	cmp	r3, #112	; 0x70
 8004dce:	d101      	bne.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 0207 	bic.w	r2, r3, #7
 8004ddc:	4909      	ldr	r1, [pc, #36]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40022000 	.word	0x40022000

08004e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d031      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e2c:	d01a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004e2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e32:	d814      	bhi.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e3c:	d10f      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e3e:	4b5d      	ldr	r3, [pc, #372]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	4a5c      	ldr	r2, [pc, #368]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e4a:	e00c      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f9de 	bl	8005214 <RCCEx_PLLSAI1_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	74fb      	strb	r3, [r7, #19]
      break;
 8004e62:	e000      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6c:	4b51      	ldr	r3, [pc, #324]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	494e      	ldr	r1, [pc, #312]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e82:	e001      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 809e 	beq.w	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e9a:	4b46      	ldr	r3, [pc, #280]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb0:	4b40      	ldr	r3, [pc, #256]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	4a3f      	ldr	r2, [pc, #252]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eba:	6593      	str	r3, [r2, #88]	; 0x58
 8004ebc:	4b3d      	ldr	r3, [pc, #244]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ecc:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a39      	ldr	r2, [pc, #228]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ed8:	f7fd faa2 	bl	8002420 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ede:	e009      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee0:	f7fd fa9e 	bl	8002420 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d902      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ef2:	e005      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ef      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d15a      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f06:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d019      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f2e:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d016      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fd fa5e 	bl	8002420 <HAL_GetTick>
 8004f64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f66:	e00b      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fd fa5a 	bl	8002420 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d902      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	74fb      	strb	r3, [r7, #19]
            break;
 8004f7e:	e006      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f80:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ec      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa2:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004faa:	e009      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
 8004fb0:	e006      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc0:	7c7b      	ldrb	r3, [r7, #17]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc6:	4b8a      	ldr	r3, [pc, #552]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	4a89      	ldr	r2, [pc, #548]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fde:	4b84      	ldr	r3, [pc, #528]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f023 0203 	bic.w	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4980      	ldr	r1, [pc, #512]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005000:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f023 020c 	bic.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	4978      	ldr	r1, [pc, #480]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005022:	4b73      	ldr	r3, [pc, #460]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	496f      	ldr	r1, [pc, #444]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005044:	4b6a      	ldr	r3, [pc, #424]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	4967      	ldr	r1, [pc, #412]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005066:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	495e      	ldr	r1, [pc, #376]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005088:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	4956      	ldr	r1, [pc, #344]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050aa:	4b51      	ldr	r3, [pc, #324]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	494d      	ldr	r1, [pc, #308]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d028      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050cc:	4b48      	ldr	r3, [pc, #288]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4945      	ldr	r1, [pc, #276]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ea:	d106      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ec:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	60d3      	str	r3, [r2, #12]
 80050f8:	e011      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005102:	d10c      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f882 	bl	8005214 <RCCEx_PLLSAI1_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d028      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800512a:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	492d      	ldr	r1, [pc, #180]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005148:	d106      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800514a:	4b29      	ldr	r3, [pc, #164]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005154:	60d3      	str	r3, [r2, #12]
 8005156:	e011      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f853 	bl	8005214 <RCCEx_PLLSAI1_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005188:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	4916      	ldr	r1, [pc, #88]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a6:	d10c      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	2102      	movs	r1, #2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f830 	bl	8005214 <RCCEx_PLLSAI1_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051ce:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051dc:	4904      	ldr	r1, [pc, #16]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000

080051f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6013      	str	r3, [r2, #0]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000

08005214 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005222:	4b74      	ldr	r3, [pc, #464]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800522e:	4b71      	ldr	r3, [pc, #452]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d10d      	bne.n	800525a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
       ||
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005246:	4b6b      	ldr	r3, [pc, #428]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
       ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d047      	beq.n	80052ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e044      	b.n	80052ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d018      	beq.n	800529a <RCCEx_PLLSAI1_Config+0x86>
 8005268:	2b03      	cmp	r3, #3
 800526a:	d825      	bhi.n	80052b8 <RCCEx_PLLSAI1_Config+0xa4>
 800526c:	2b01      	cmp	r3, #1
 800526e:	d002      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0x62>
 8005270:	2b02      	cmp	r3, #2
 8005272:	d009      	beq.n	8005288 <RCCEx_PLLSAI1_Config+0x74>
 8005274:	e020      	b.n	80052b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005276:	4b5f      	ldr	r3, [pc, #380]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d11d      	bne.n	80052be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005286:	e01a      	b.n	80052be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005288:	4b5a      	ldr	r3, [pc, #360]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005290:	2b00      	cmp	r3, #0
 8005292:	d116      	bne.n	80052c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005298:	e013      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529a:	4b56      	ldr	r3, [pc, #344]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10f      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a6:	4b53      	ldr	r3, [pc, #332]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b6:	e006      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e004      	b.n	80052c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ce:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	3b01      	subs	r3, #1
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	430b      	orrs	r3, r1
 80052e4:	4943      	ldr	r1, [pc, #268]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d17c      	bne.n	80053ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052f0:	4b40      	ldr	r3, [pc, #256]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3f      	ldr	r2, [pc, #252]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fc:	f7fd f890 	bl	8002420 <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005302:	e009      	b.n	8005318 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005304:	f7fd f88c 	bl	8002420 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d902      	bls.n	8005318 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	73fb      	strb	r3, [r7, #15]
        break;
 8005316:	e005      	b.n	8005324 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005318:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ef      	bne.n	8005304 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d15f      	bne.n	80053ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005330:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005338:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	0211      	lsls	r1, r2, #8
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68d2      	ldr	r2, [r2, #12]
 8005346:	06d2      	lsls	r2, r2, #27
 8005348:	430a      	orrs	r2, r1
 800534a:	492a      	ldr	r1, [pc, #168]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	610b      	str	r3, [r1, #16]
 8005350:	e027      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d112      	bne.n	800537e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005358:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6892      	ldr	r2, [r2, #8]
 8005368:	0211      	lsls	r1, r2, #8
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6912      	ldr	r2, [r2, #16]
 800536e:	0852      	lsrs	r2, r2, #1
 8005370:	3a01      	subs	r2, #1
 8005372:	0552      	lsls	r2, r2, #21
 8005374:	430a      	orrs	r2, r1
 8005376:	491f      	ldr	r1, [pc, #124]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005378:	4313      	orrs	r3, r2
 800537a:	610b      	str	r3, [r1, #16]
 800537c:	e011      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005386:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6892      	ldr	r2, [r2, #8]
 800538e:	0211      	lsls	r1, r2, #8
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6952      	ldr	r2, [r2, #20]
 8005394:	0852      	lsrs	r2, r2, #1
 8005396:	3a01      	subs	r2, #1
 8005398:	0652      	lsls	r2, r2, #25
 800539a:	430a      	orrs	r2, r1
 800539c:	4915      	ldr	r1, [pc, #84]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ae:	f7fd f837 	bl	8002420 <HAL_GetTick>
 80053b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053b4:	e009      	b.n	80053ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b6:	f7fd f833 	bl	8002420 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d902      	bls.n	80053ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	73fb      	strb	r3, [r7, #15]
          break;
 80053c8:	e005      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ef      	beq.n	80053b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	4903      	ldr	r1, [pc, #12]	; (80053f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e095      	b.n	8005536 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800541a:	d009      	beq.n	8005430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	61da      	str	r2, [r3, #28]
 8005422:	e005      	b.n	8005430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc fd9c 	bl	8001f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005466:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005470:	d902      	bls.n	8005478 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e002      	b.n	800547e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005486:	d007      	beq.n	8005498 <HAL_SPI_Init+0xa0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005490:	d002      	beq.n	8005498 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	ea42 0103 	orr.w	r1, r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	f003 0204 	and.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005514:	ea42 0103 	orr.w	r1, r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_SPI_Transmit+0x22>
 800555c:	2302      	movs	r3, #2
 800555e:	e15f      	b.n	8005820 <HAL_SPI_Transmit+0x2e2>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005568:	f7fc ff5a 	bl	8002420 <HAL_GetTick>
 800556c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	d002      	beq.n	8005584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005582:	e148      	b.n	8005816 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_SPI_Transmit+0x52>
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005594:	e13f      	b.n	8005816 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2203      	movs	r2, #3
 800559a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	88fa      	ldrh	r2, [r7, #6]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	d10f      	bne.n	8005602 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005600:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d007      	beq.n	8005620 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005628:	d94f      	bls.n	80056ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_SPI_Transmit+0xfa>
 8005632:	8afb      	ldrh	r3, [r7, #22]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d142      	bne.n	80056be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800565c:	e02f      	b.n	80056be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d112      	bne.n	8005692 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005690:	e015      	b.n	80056be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005692:	f7fc fec5 	bl	8002420 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d803      	bhi.n	80056aa <HAL_SPI_Transmit+0x16c>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d102      	bne.n	80056b0 <HAL_SPI_Transmit+0x172>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80056bc:	e0ab      	b.n	8005816 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ca      	bne.n	800565e <HAL_SPI_Transmit+0x120>
 80056c8:	e080      	b.n	80057cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_SPI_Transmit+0x19a>
 80056d2:	8afb      	ldrh	r3, [r7, #22]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d174      	bne.n	80057c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d912      	bls.n	8005708 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	1c9a      	adds	r2, r3, #2
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b02      	subs	r3, #2
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005706:	e05c      	b.n	80057c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	7812      	ldrb	r2, [r2, #0]
 8005714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800572e:	e048      	b.n	80057c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	d12b      	bne.n	8005796 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d912      	bls.n	800576e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	1c9a      	adds	r2, r3, #2
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b02      	subs	r3, #2
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800576c:	e029      	b.n	80057c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	330c      	adds	r3, #12
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005794:	e015      	b.n	80057c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005796:	f7fc fe43 	bl	8002420 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d803      	bhi.n	80057ae <HAL_SPI_Transmit+0x270>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d102      	bne.n	80057b4 <HAL_SPI_Transmit+0x276>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80057c0:	e029      	b.n	8005816 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1b1      	bne.n	8005730 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fad7 	bl	8005d84 <SPI_EndRxTxTransaction>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e003      	b.n	8005816 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_SPI_Transmit_DMA+0x20>
 8005844:	2302      	movs	r3, #2
 8005846:	e0d4      	b.n	80059f2 <HAL_SPI_Transmit_DMA+0x1ca>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d002      	beq.n	8005862 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800585c:	2302      	movs	r3, #2
 800585e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005860:	e0c2      	b.n	80059e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Transmit_DMA+0x46>
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005872:	e0b9      	b.n	80059e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2203      	movs	r2, #3
 8005878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058be:	d10f      	bne.n	80058e0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e4:	4a45      	ldr	r2, [pc, #276]	; (80059fc <HAL_SPI_Transmit_DMA+0x1d4>)
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	4a44      	ldr	r2, [pc, #272]	; (8005a00 <HAL_SPI_Transmit_DMA+0x1d8>)
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f4:	4a43      	ldr	r2, [pc, #268]	; (8005a04 <HAL_SPI_Transmit_DMA+0x1dc>)
 80058f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fc:	2200      	movs	r2, #0
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800590e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005918:	d82d      	bhi.n	8005976 <HAL_SPI_Transmit_DMA+0x14e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005924:	d127      	bne.n	8005976 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10f      	bne.n	8005954 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005942:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005952:	e010      	b.n	8005976 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005962:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005968:	b29b      	uxth	r3, r3
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	3301      	adds	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	4619      	mov	r1, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800598e:	f7fd ffe9 	bl	8003964 <HAL_DMA_Start_IT>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599c:	f043 0210 	orr.w	r2, r3, #16
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]

    goto error;
 80059a8:	e01e      	b.n	80059e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b40      	cmp	r3, #64	; 0x40
 80059b6:	d007      	beq.n	80059c8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0220 	orr.w	r2, r2, #32
 80059d6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0202 	orr.w	r2, r2, #2
 80059e6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	08005aeb 	.word	0x08005aeb
 8005a00:	08005a45 	.word	0x08005a45
 8005a04:	08005b07 	.word	0x08005b07

08005a08 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a52:	f7fc fce5 	bl	8002420 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d03b      	beq.n	8005ade <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0220 	bic.w	r2, r2, #32
 8005a74:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0202 	bic.w	r2, r2, #2
 8005a84:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	2164      	movs	r1, #100	; 0x64
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f000 f97a 	bl	8005d84 <SPI_EndRxTxTransaction>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ad6:	6978      	ldr	r0, [r7, #20]
 8005ad8:	f7ff ffaa 	bl	8005a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005adc:	e002      	b.n	8005ae4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005ade:	6978      	ldr	r0, [r7, #20]
 8005ae0:	f7ff ff92 	bl	8005a08 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff ff8f 	bl	8005a1c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0203 	bic.w	r2, r2, #3
 8005b22:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b28:	f043 0210 	orr.w	r2, r3, #16
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ff79 	bl	8005a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b58:	f7fc fc62 	bl	8002420 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b68:	f7fc fc5a 	bl	8002420 <HAL_GetTick>
 8005b6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b6e:	4b39      	ldr	r3, [pc, #228]	; (8005c54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	015b      	lsls	r3, r3, #5
 8005b74:	0d1b      	lsrs	r3, r3, #20
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7e:	e054      	b.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d050      	beq.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b88:	f7fc fc4a 	bl	8002420 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d902      	bls.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d13d      	bne.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb6:	d111      	bne.n	8005bdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc0:	d004      	beq.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bca:	d107      	bne.n	8005bdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be4:	d10f      	bne.n	8005c06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e017      	b.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d19b      	bne.n	8005b80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000004 	.word	0x20000004

08005c58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c6a:	f7fc fbd9 	bl	8002420 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4413      	add	r3, r2
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c7a:	f7fc fbd1 	bl	8002420 <HAL_GetTick>
 8005c7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c88:	4b3d      	ldr	r3, [pc, #244]	; (8005d80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	00da      	lsls	r2, r3, #3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	0d1b      	lsrs	r3, r3, #20
 8005c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ca0:	e060      	b.n	8005d64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ca8:	d107      	bne.n	8005cba <SPI_WaitFifoStateUntilTimeout+0x62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d050      	beq.n	8005d64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc2:	f7fc fbad 	bl	8002420 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d902      	bls.n	8005cd8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d13d      	bne.n	8005d54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ce6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf0:	d111      	bne.n	8005d16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfa:	d004      	beq.n	8005d06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d04:	d107      	bne.n	8005d16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1e:	d10f      	bne.n	8005d40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e010      	b.n	8005d76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d196      	bne.n	8005ca2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3728      	adds	r7, #40	; 0x28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000004 	.word	0x20000004

08005d84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff ff5b 	bl	8005c58 <SPI_WaitFifoStateUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dac:	f043 0220 	orr.w	r2, r3, #32
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e027      	b.n	8005e08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff fec0 	bl	8005b48 <SPI_WaitFlagStateUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd2:	f043 0220 	orr.w	r2, r3, #32
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e014      	b.n	8005e08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff ff34 	bl	8005c58 <SPI_WaitFifoStateUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e000      	b.n	8005e08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e049      	b.n	8005eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc f926 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 f9b4 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d001      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e03b      	b.n	8005f50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_TIM_Base_Start_IT+0x9c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x4e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d004      	beq.n	8005f0e <HAL_TIM_Base_Start_IT+0x4e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d115      	bne.n	8005f3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <HAL_TIM_Base_Start_IT+0xa4>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d015      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x8c>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	d011      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f38:	e008      	b.n	8005f4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e000      	b.n	8005f4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40014000 	.word	0x40014000
 8005f64:	00010007 	.word	0x00010007

08005f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0202 	mvn.w	r2, #2
 8005f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8e4 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f8d6 	bl	800616c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f8e7 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0204 	mvn.w	r2, #4
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8be 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f8b0 	bl	800616c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8c1 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d020      	beq.n	8006064 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0208 	mvn.w	r2, #8
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2204      	movs	r2, #4
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f898 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f88a 	bl	800616c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f89b 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	d020      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0210 	mvn.w	r2, #16
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2208      	movs	r2, #8
 8006086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f872 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f864 	bl	800616c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f875 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00c      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0201 	mvn.w	r2, #1
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fa fb96 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00c      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8d0 	bl	8006298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f8c8 	bl	80062ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f834 	bl	80061a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0220 	mvn.w	r2, #32
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f890 	bl	8006284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <TIM_Base_SetConfig+0xbc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_Base_SetConfig+0x20>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d108      	bne.n	80061ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a21      	ldr	r2, [pc, #132]	; (8006278 <TIM_Base_SetConfig+0xbc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00b      	beq.n	800620e <TIM_Base_SetConfig+0x52>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fc:	d007      	beq.n	800620e <TIM_Base_SetConfig+0x52>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <TIM_Base_SetConfig+0xc0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d003      	beq.n	800620e <TIM_Base_SetConfig+0x52>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <TIM_Base_SetConfig+0xc4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d108      	bne.n	8006220 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <TIM_Base_SetConfig+0xbc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0xa0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a0b      	ldr	r2, [pc, #44]	; (800627c <TIM_Base_SetConfig+0xc0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0xa0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <TIM_Base_SetConfig+0xc4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d103      	bne.n	8006264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	615a      	str	r2, [r3, #20]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400

08006284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e040      	b.n	8006354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fef6 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fade 	bl	80068c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8af 	bl	8006470 <UART_SetConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e01b      	b.n	8006354 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fb5d 	bl	8006a0c <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006370:	2b20      	cmp	r3, #32
 8006372:	d178      	bne.n	8006466 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Transmit+0x24>
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e071      	b.n	8006468 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2221      	movs	r2, #33	; 0x21
 8006390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006392:	f7fc f845 	bl	8002420 <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063cc:	e030      	b.n	8006430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fbbf 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e03c      	b.n	8006468 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006400:	b292      	uxth	r2, r2
 8006402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	3302      	adds	r3, #2
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e008      	b.n	800641e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b292      	uxth	r2, r2
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1c8      	bne.n	80063ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fb88 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e005      	b.n	8006468 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006474:	b08a      	sub	sp, #40	; 0x28
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	431a      	orrs	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	4313      	orrs	r3, r2
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4bb4      	ldr	r3, [pc, #720]	; (8006770 <UART_SetConfig+0x300>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064a8:	430b      	orrs	r3, r1
 80064aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4aa9      	ldr	r2, [pc, #676]	; (8006774 <UART_SetConfig+0x304>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	4313      	orrs	r3, r2
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4aa0      	ldr	r2, [pc, #640]	; (8006778 <UART_SetConfig+0x308>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d126      	bne.n	8006548 <UART_SetConfig+0xd8>
 80064fa:	4ba0      	ldr	r3, [pc, #640]	; (800677c <UART_SetConfig+0x30c>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	2b03      	cmp	r3, #3
 8006506:	d81b      	bhi.n	8006540 <UART_SetConfig+0xd0>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <UART_SetConfig+0xa0>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006521 	.word	0x08006521
 8006514:	08006531 	.word	0x08006531
 8006518:	08006529 	.word	0x08006529
 800651c:	08006539 	.word	0x08006539
 8006520:	2301      	movs	r3, #1
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e080      	b.n	800662a <UART_SetConfig+0x1ba>
 8006528:	2302      	movs	r3, #2
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e07c      	b.n	800662a <UART_SetConfig+0x1ba>
 8006530:	2304      	movs	r3, #4
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	e078      	b.n	800662a <UART_SetConfig+0x1ba>
 8006538:	2308      	movs	r3, #8
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653e:	e074      	b.n	800662a <UART_SetConfig+0x1ba>
 8006540:	2310      	movs	r3, #16
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006546:	e070      	b.n	800662a <UART_SetConfig+0x1ba>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a8c      	ldr	r2, [pc, #560]	; (8006780 <UART_SetConfig+0x310>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d138      	bne.n	80065c4 <UART_SetConfig+0x154>
 8006552:	4b8a      	ldr	r3, [pc, #552]	; (800677c <UART_SetConfig+0x30c>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f003 030c 	and.w	r3, r3, #12
 800655c:	2b0c      	cmp	r3, #12
 800655e:	d82d      	bhi.n	80065bc <UART_SetConfig+0x14c>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0xf8>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800659d 	.word	0x0800659d
 800656c:	080065bd 	.word	0x080065bd
 8006570:	080065bd 	.word	0x080065bd
 8006574:	080065bd 	.word	0x080065bd
 8006578:	080065ad 	.word	0x080065ad
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065bd 	.word	0x080065bd
 8006584:	080065bd 	.word	0x080065bd
 8006588:	080065a5 	.word	0x080065a5
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065bd 	.word	0x080065bd
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065b5 	.word	0x080065b5
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a2:	e042      	b.n	800662a <UART_SetConfig+0x1ba>
 80065a4:	2302      	movs	r3, #2
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e03e      	b.n	800662a <UART_SetConfig+0x1ba>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	e03a      	b.n	800662a <UART_SetConfig+0x1ba>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ba:	e036      	b.n	800662a <UART_SetConfig+0x1ba>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c2:	e032      	b.n	800662a <UART_SetConfig+0x1ba>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a6a      	ldr	r2, [pc, #424]	; (8006774 <UART_SetConfig+0x304>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d12a      	bne.n	8006624 <UART_SetConfig+0x1b4>
 80065ce:	4b6b      	ldr	r3, [pc, #428]	; (800677c <UART_SetConfig+0x30c>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065dc:	d01a      	beq.n	8006614 <UART_SetConfig+0x1a4>
 80065de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e2:	d81b      	bhi.n	800661c <UART_SetConfig+0x1ac>
 80065e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e8:	d00c      	beq.n	8006604 <UART_SetConfig+0x194>
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ee:	d815      	bhi.n	800661c <UART_SetConfig+0x1ac>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <UART_SetConfig+0x18c>
 80065f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f8:	d008      	beq.n	800660c <UART_SetConfig+0x19c>
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x1ac>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006602:	e012      	b.n	800662a <UART_SetConfig+0x1ba>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660a:	e00e      	b.n	800662a <UART_SetConfig+0x1ba>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006612:	e00a      	b.n	800662a <UART_SetConfig+0x1ba>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661a:	e006      	b.n	800662a <UART_SetConfig+0x1ba>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006622:	e002      	b.n	800662a <UART_SetConfig+0x1ba>
 8006624:	2310      	movs	r3, #16
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a51      	ldr	r2, [pc, #324]	; (8006774 <UART_SetConfig+0x304>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d17a      	bne.n	800672a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006638:	2b08      	cmp	r3, #8
 800663a:	d824      	bhi.n	8006686 <UART_SetConfig+0x216>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x1d4>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006669 	.word	0x08006669
 8006648:	08006687 	.word	0x08006687
 800664c:	08006671 	.word	0x08006671
 8006650:	08006687 	.word	0x08006687
 8006654:	08006677 	.word	0x08006677
 8006658:	08006687 	.word	0x08006687
 800665c:	08006687 	.word	0x08006687
 8006660:	08006687 	.word	0x08006687
 8006664:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fe fb42 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 800666c:	61f8      	str	r0, [r7, #28]
        break;
 800666e:	e010      	b.n	8006692 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b44      	ldr	r3, [pc, #272]	; (8006784 <UART_SetConfig+0x314>)
 8006672:	61fb      	str	r3, [r7, #28]
        break;
 8006674:	e00d      	b.n	8006692 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7fe faa3 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 800667a:	61f8      	str	r0, [r7, #28]
        break;
 800667c:	e009      	b.n	8006692 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006682:	61fb      	str	r3, [r7, #28]
        break;
 8006684:	e005      	b.n	8006692 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8107 	beq.w	80068a8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	4413      	add	r3, r2
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d305      	bcc.n	80066b6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d903      	bls.n	80066be <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066bc:	e0f4      	b.n	80068a8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2200      	movs	r2, #0
 80066c2:	461c      	mov	r4, r3
 80066c4:	4615      	mov	r5, r2
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	022b      	lsls	r3, r5, #8
 80066d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066d4:	0222      	lsls	r2, r4, #8
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	6849      	ldr	r1, [r1, #4]
 80066da:	0849      	lsrs	r1, r1, #1
 80066dc:	2000      	movs	r0, #0
 80066de:	4688      	mov	r8, r1
 80066e0:	4681      	mov	r9, r0
 80066e2:	eb12 0a08 	adds.w	sl, r2, r8
 80066e6:	eb43 0b09 	adc.w	fp, r3, r9
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f8:	4650      	mov	r0, sl
 80066fa:	4659      	mov	r1, fp
 80066fc:	f7f9 fdc0 	bl	8000280 <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4613      	mov	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670e:	d308      	bcc.n	8006722 <UART_SetConfig+0x2b2>
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006716:	d204      	bcs.n	8006722 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	60da      	str	r2, [r3, #12]
 8006720:	e0c2      	b.n	80068a8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006728:	e0be      	b.n	80068a8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006732:	d16a      	bne.n	800680a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006738:	2b08      	cmp	r3, #8
 800673a:	d834      	bhi.n	80067a6 <UART_SetConfig+0x336>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x2d4>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006769 	.word	0x08006769
 8006748:	08006789 	.word	0x08006789
 800674c:	08006791 	.word	0x08006791
 8006750:	080067a7 	.word	0x080067a7
 8006754:	08006797 	.word	0x08006797
 8006758:	080067a7 	.word	0x080067a7
 800675c:	080067a7 	.word	0x080067a7
 8006760:	080067a7 	.word	0x080067a7
 8006764:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fe fac2 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 800676c:	61f8      	str	r0, [r7, #28]
        break;
 800676e:	e020      	b.n	80067b2 <UART_SetConfig+0x342>
 8006770:	efff69f3 	.word	0xefff69f3
 8006774:	40008000 	.word	0x40008000
 8006778:	40013800 	.word	0x40013800
 800677c:	40021000 	.word	0x40021000
 8006780:	40004400 	.word	0x40004400
 8006784:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fe fac8 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 800678c:	61f8      	str	r0, [r7, #28]
        break;
 800678e:	e010      	b.n	80067b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <UART_SetConfig+0x454>)
 8006792:	61fb      	str	r3, [r7, #28]
        break;
 8006794:	e00d      	b.n	80067b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe fa13 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 800679a:	61f8      	str	r0, [r7, #28]
        break;
 800679c:	e009      	b.n	80067b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	61fb      	str	r3, [r7, #28]
        break;
 80067a4:	e005      	b.n	80067b2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d077      	beq.n	80068a8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	005a      	lsls	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	441a      	add	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	2b0f      	cmp	r3, #15
 80067d2:	d916      	bls.n	8006802 <UART_SetConfig+0x392>
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067da:	d212      	bcs.n	8006802 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f023 030f 	bic.w	r3, r3, #15
 80067e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	8afb      	ldrh	r3, [r7, #22]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	8afa      	ldrh	r2, [r7, #22]
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	e052      	b.n	80068a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006808:	e04e      	b.n	80068a8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800680a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680e:	2b08      	cmp	r3, #8
 8006810:	d827      	bhi.n	8006862 <UART_SetConfig+0x3f2>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x3a8>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	08006863 	.word	0x08006863
 8006828:	08006853 	.word	0x08006853
 800682c:	08006863 	.word	0x08006863
 8006830:	08006863 	.word	0x08006863
 8006834:	08006863 	.word	0x08006863
 8006838:	0800685b 	.word	0x0800685b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fe fa58 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8006840:	61f8      	str	r0, [r7, #28]
        break;
 8006842:	e014      	b.n	800686e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006844:	f7fe fa6a 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8006848:	61f8      	str	r0, [r7, #28]
        break;
 800684a:	e010      	b.n	800686e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800684c:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <UART_SetConfig+0x454>)
 800684e:	61fb      	str	r3, [r7, #28]
        break;
 8006850:	e00d      	b.n	800686e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fe f9b5 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8006856:	61f8      	str	r0, [r7, #28]
        break;
 8006858:	e009      	b.n	800686e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685e:	61fb      	str	r3, [r7, #28]
        break;
 8006860:	e005      	b.n	800686e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800686c:	bf00      	nop
    }

    if (pclk != 0U)
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d019      	beq.n	80068a8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	085a      	lsrs	r2, r3, #1
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	441a      	add	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d909      	bls.n	80068a2 <UART_SetConfig+0x432>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006894:	d205      	bcs.n	80068a2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
 80068a0:	e002      	b.n	80068a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c2:	bf00      	nop
 80068c4:	00f42400 	.word	0x00f42400

080068c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01a      	beq.n	80069de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c6:	d10a      	bne.n	80069de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b098      	sub	sp, #96	; 0x60
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a1c:	f7fb fd00 	bl	8002420 <HAL_GetTick>
 8006a20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d12e      	bne.n	8006a8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f88c 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d021      	beq.n	8006a8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a68:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e6      	bne.n	8006a4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e062      	b.n	8006b54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d149      	bne.n	8006b30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f856 	bl	8006b5c <UART_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d03c      	beq.n	8006b30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e6      	bne.n	8006ab6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b08:	61fa      	str	r2, [r7, #28]
 8006b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e5      	bne.n	8006ae8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e011      	b.n	8006b54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3758      	adds	r7, #88	; 0x58
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6c:	e049      	b.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d045      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fb fc53 	bl	8002420 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e048      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d031      	beq.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d110      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f838 	bl	8006c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e029      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bdc:	d111      	bne.n	8006c02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f81e 	bl	8006c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e00f      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d0a6      	beq.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b095      	sub	sp, #84	; 0x54
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c50:	643b      	str	r3, [r7, #64]	; 0x40
 8006c52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e5      	bne.n	8006c64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d118      	bne.n	8006cd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f023 0310 	bic.w	r3, r3, #16
 8006cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6979      	ldr	r1, [r7, #20]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e6      	bne.n	8006ca0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ce6:	bf00      	nop
 8006ce8:	3754      	adds	r7, #84	; 0x54
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <malloc>:
 8006cf4:	4b02      	ldr	r3, [pc, #8]	; (8006d00 <malloc+0xc>)
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	f000 b823 	b.w	8006d44 <_malloc_r>
 8006cfe:	bf00      	nop
 8006d00:	2000005c 	.word	0x2000005c

08006d04 <sbrk_aligned>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4e0e      	ldr	r6, [pc, #56]	; (8006d40 <sbrk_aligned+0x3c>)
 8006d08:	460c      	mov	r4, r1
 8006d0a:	6831      	ldr	r1, [r6, #0]
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b911      	cbnz	r1, 8006d16 <sbrk_aligned+0x12>
 8006d10:	f000 f8cc 	bl	8006eac <_sbrk_r>
 8006d14:	6030      	str	r0, [r6, #0]
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 f8c7 	bl	8006eac <_sbrk_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d00a      	beq.n	8006d38 <sbrk_aligned+0x34>
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d007      	beq.n	8006d3c <sbrk_aligned+0x38>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f8bc 	bl	8006eac <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d101      	bne.n	8006d3c <sbrk_aligned+0x38>
 8006d38:	f04f 34ff 	mov.w	r4, #4294967295
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	20001e80 	.word	0x20001e80

08006d44 <_malloc_r>:
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	1ccd      	adds	r5, r1, #3
 8006d4a:	f025 0503 	bic.w	r5, r5, #3
 8006d4e:	3508      	adds	r5, #8
 8006d50:	2d0c      	cmp	r5, #12
 8006d52:	bf38      	it	cc
 8006d54:	250c      	movcc	r5, #12
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	4607      	mov	r7, r0
 8006d5a:	db01      	blt.n	8006d60 <_malloc_r+0x1c>
 8006d5c:	42a9      	cmp	r1, r5
 8006d5e:	d905      	bls.n	8006d6c <_malloc_r+0x28>
 8006d60:	230c      	movs	r3, #12
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	2600      	movs	r6, #0
 8006d66:	4630      	mov	r0, r6
 8006d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e40 <_malloc_r+0xfc>
 8006d70:	f000 f868 	bl	8006e44 <__malloc_lock>
 8006d74:	f8d8 3000 	ldr.w	r3, [r8]
 8006d78:	461c      	mov	r4, r3
 8006d7a:	bb5c      	cbnz	r4, 8006dd4 <_malloc_r+0x90>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f7ff ffc0 	bl	8006d04 <sbrk_aligned>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	4604      	mov	r4, r0
 8006d88:	d155      	bne.n	8006e36 <_malloc_r+0xf2>
 8006d8a:	f8d8 4000 	ldr.w	r4, [r8]
 8006d8e:	4626      	mov	r6, r4
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	d145      	bne.n	8006e20 <_malloc_r+0xdc>
 8006d94:	2c00      	cmp	r4, #0
 8006d96:	d048      	beq.n	8006e2a <_malloc_r+0xe6>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	eb04 0903 	add.w	r9, r4, r3
 8006da2:	f000 f883 	bl	8006eac <_sbrk_r>
 8006da6:	4581      	cmp	r9, r0
 8006da8:	d13f      	bne.n	8006e2a <_malloc_r+0xe6>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	1a6d      	subs	r5, r5, r1
 8006dae:	4629      	mov	r1, r5
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ffa7 	bl	8006d04 <sbrk_aligned>
 8006db6:	3001      	adds	r0, #1
 8006db8:	d037      	beq.n	8006e2a <_malloc_r+0xe6>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	442b      	add	r3, r5
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d038      	beq.n	8006e3a <_malloc_r+0xf6>
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	42a2      	cmp	r2, r4
 8006dcc:	d12b      	bne.n	8006e26 <_malloc_r+0xe2>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
 8006dd2:	e00f      	b.n	8006df4 <_malloc_r+0xb0>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	1b52      	subs	r2, r2, r5
 8006dd8:	d41f      	bmi.n	8006e1a <_malloc_r+0xd6>
 8006dda:	2a0b      	cmp	r2, #11
 8006ddc:	d917      	bls.n	8006e0e <_malloc_r+0xca>
 8006dde:	1961      	adds	r1, r4, r5
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	6025      	str	r5, [r4, #0]
 8006de4:	bf18      	it	ne
 8006de6:	6059      	strne	r1, [r3, #4]
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	bf08      	it	eq
 8006dec:	f8c8 1000 	streq.w	r1, [r8]
 8006df0:	5162      	str	r2, [r4, r5]
 8006df2:	604b      	str	r3, [r1, #4]
 8006df4:	4638      	mov	r0, r7
 8006df6:	f104 060b 	add.w	r6, r4, #11
 8006dfa:	f000 f829 	bl	8006e50 <__malloc_unlock>
 8006dfe:	f026 0607 	bic.w	r6, r6, #7
 8006e02:	1d23      	adds	r3, r4, #4
 8006e04:	1af2      	subs	r2, r6, r3
 8006e06:	d0ae      	beq.n	8006d66 <_malloc_r+0x22>
 8006e08:	1b9b      	subs	r3, r3, r6
 8006e0a:	50a3      	str	r3, [r4, r2]
 8006e0c:	e7ab      	b.n	8006d66 <_malloc_r+0x22>
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	6862      	ldr	r2, [r4, #4]
 8006e12:	d1dd      	bne.n	8006dd0 <_malloc_r+0x8c>
 8006e14:	f8c8 2000 	str.w	r2, [r8]
 8006e18:	e7ec      	b.n	8006df4 <_malloc_r+0xb0>
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	6864      	ldr	r4, [r4, #4]
 8006e1e:	e7ac      	b.n	8006d7a <_malloc_r+0x36>
 8006e20:	4634      	mov	r4, r6
 8006e22:	6876      	ldr	r6, [r6, #4]
 8006e24:	e7b4      	b.n	8006d90 <_malloc_r+0x4c>
 8006e26:	4613      	mov	r3, r2
 8006e28:	e7cc      	b.n	8006dc4 <_malloc_r+0x80>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f000 f80e 	bl	8006e50 <__malloc_unlock>
 8006e34:	e797      	b.n	8006d66 <_malloc_r+0x22>
 8006e36:	6025      	str	r5, [r4, #0]
 8006e38:	e7dc      	b.n	8006df4 <_malloc_r+0xb0>
 8006e3a:	605b      	str	r3, [r3, #4]
 8006e3c:	deff      	udf	#255	; 0xff
 8006e3e:	bf00      	nop
 8006e40:	20001e7c 	.word	0x20001e7c

08006e44 <__malloc_lock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__malloc_lock+0x8>)
 8006e46:	f000 b86b 	b.w	8006f20 <__retarget_lock_acquire_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	20001fc0 	.word	0x20001fc0

08006e50 <__malloc_unlock>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__malloc_unlock+0x8>)
 8006e52:	f000 b866 	b.w	8006f22 <__retarget_lock_release_recursive>
 8006e56:	bf00      	nop
 8006e58:	20001fc0 	.word	0x20001fc0

08006e5c <siprintf>:
 8006e5c:	b40e      	push	{r1, r2, r3}
 8006e5e:	b500      	push	{lr}
 8006e60:	b09c      	sub	sp, #112	; 0x70
 8006e62:	ab1d      	add	r3, sp, #116	; 0x74
 8006e64:	9002      	str	r0, [sp, #8]
 8006e66:	9006      	str	r0, [sp, #24]
 8006e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e6c:	4809      	ldr	r0, [pc, #36]	; (8006e94 <siprintf+0x38>)
 8006e6e:	9107      	str	r1, [sp, #28]
 8006e70:	9104      	str	r1, [sp, #16]
 8006e72:	4909      	ldr	r1, [pc, #36]	; (8006e98 <siprintf+0x3c>)
 8006e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	a902      	add	r1, sp, #8
 8006e80:	f000 f8f6 	bl	8007070 <_svfiprintf_r>
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	b01c      	add	sp, #112	; 0x70
 8006e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e90:	b003      	add	sp, #12
 8006e92:	4770      	bx	lr
 8006e94:	2000005c 	.word	0x2000005c
 8006e98:	ffff0208 	.word	0xffff0208

08006e9c <memset>:
 8006e9c:	4402      	add	r2, r0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d100      	bne.n	8006ea6 <memset+0xa>
 8006ea4:	4770      	bx	lr
 8006ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eaa:	e7f9      	b.n	8006ea0 <memset+0x4>

08006eac <_sbrk_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d06      	ldr	r5, [pc, #24]	; (8006ec8 <_sbrk_r+0x1c>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	f7fb f9be 	bl	8002238 <_sbrk>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_sbrk_r+0x1a>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_sbrk_r+0x1a>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20001fbc 	.word	0x20001fbc

08006ecc <__errno>:
 8006ecc:	4b01      	ldr	r3, [pc, #4]	; (8006ed4 <__errno+0x8>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	2000005c 	.word	0x2000005c

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4d0d      	ldr	r5, [pc, #52]	; (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	; (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1b64      	subs	r4, r4, r5
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4d0b      	ldr	r5, [pc, #44]	; (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	; (8006f1c <__libc_init_array+0x44>)
 8006eec:	f000 fbae 	bl	800764c <_init>
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	08008a8c 	.word	0x08008a8c
 8006f14:	08008a8c 	.word	0x08008a8c
 8006f18:	08008a8c 	.word	0x08008a8c
 8006f1c:	08008a90 	.word	0x08008a90

08006f20 <__retarget_lock_acquire_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <__retarget_lock_release_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <_free_r>:
 8006f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f26:	2900      	cmp	r1, #0
 8006f28:	d044      	beq.n	8006fb4 <_free_r+0x90>
 8006f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2e:	9001      	str	r0, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f1a1 0404 	sub.w	r4, r1, #4
 8006f36:	bfb8      	it	lt
 8006f38:	18e4      	addlt	r4, r4, r3
 8006f3a:	f7ff ff83 	bl	8006e44 <__malloc_lock>
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	; (8006fb8 <_free_r+0x94>)
 8006f40:	9801      	ldr	r0, [sp, #4]
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	b933      	cbnz	r3, 8006f54 <_free_r+0x30>
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	6014      	str	r4, [r2, #0]
 8006f4a:	b003      	add	sp, #12
 8006f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f50:	f7ff bf7e 	b.w	8006e50 <__malloc_unlock>
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	d908      	bls.n	8006f6a <_free_r+0x46>
 8006f58:	6825      	ldr	r5, [r4, #0]
 8006f5a:	1961      	adds	r1, r4, r5
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	bf01      	itttt	eq
 8006f60:	6819      	ldreq	r1, [r3, #0]
 8006f62:	685b      	ldreq	r3, [r3, #4]
 8006f64:	1949      	addeq	r1, r1, r5
 8006f66:	6021      	streq	r1, [r4, #0]
 8006f68:	e7ed      	b.n	8006f46 <_free_r+0x22>
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b10b      	cbz	r3, 8006f74 <_free_r+0x50>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d9fa      	bls.n	8006f6a <_free_r+0x46>
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	1855      	adds	r5, r2, r1
 8006f78:	42a5      	cmp	r5, r4
 8006f7a:	d10b      	bne.n	8006f94 <_free_r+0x70>
 8006f7c:	6824      	ldr	r4, [r4, #0]
 8006f7e:	4421      	add	r1, r4
 8006f80:	1854      	adds	r4, r2, r1
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	6011      	str	r1, [r2, #0]
 8006f86:	d1e0      	bne.n	8006f4a <_free_r+0x26>
 8006f88:	681c      	ldr	r4, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	6053      	str	r3, [r2, #4]
 8006f8e:	440c      	add	r4, r1
 8006f90:	6014      	str	r4, [r2, #0]
 8006f92:	e7da      	b.n	8006f4a <_free_r+0x26>
 8006f94:	d902      	bls.n	8006f9c <_free_r+0x78>
 8006f96:	230c      	movs	r3, #12
 8006f98:	6003      	str	r3, [r0, #0]
 8006f9a:	e7d6      	b.n	8006f4a <_free_r+0x26>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf04      	itt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	bf04      	itt	eq
 8006fac:	1949      	addeq	r1, r1, r5
 8006fae:	6021      	streq	r1, [r4, #0]
 8006fb0:	6054      	str	r4, [r2, #4]
 8006fb2:	e7ca      	b.n	8006f4a <_free_r+0x26>
 8006fb4:	b003      	add	sp, #12
 8006fb6:	bd30      	pop	{r4, r5, pc}
 8006fb8:	20001e7c 	.word	0x20001e7c

08006fbc <__ssputs_r>:
 8006fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	688e      	ldr	r6, [r1, #8]
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	42be      	cmp	r6, r7
 8006fc6:	680b      	ldr	r3, [r1, #0]
 8006fc8:	4682      	mov	sl, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	4690      	mov	r8, r2
 8006fce:	d82c      	bhi.n	800702a <__ssputs_r+0x6e>
 8006fd0:	898a      	ldrh	r2, [r1, #12]
 8006fd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fd6:	d026      	beq.n	8007026 <__ssputs_r+0x6a>
 8006fd8:	6965      	ldr	r5, [r4, #20]
 8006fda:	6909      	ldr	r1, [r1, #16]
 8006fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe0:	eba3 0901 	sub.w	r9, r3, r1
 8006fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe8:	1c7b      	adds	r3, r7, #1
 8006fea:	444b      	add	r3, r9
 8006fec:	106d      	asrs	r5, r5, #1
 8006fee:	429d      	cmp	r5, r3
 8006ff0:	bf38      	it	cc
 8006ff2:	461d      	movcc	r5, r3
 8006ff4:	0553      	lsls	r3, r2, #21
 8006ff6:	d527      	bpl.n	8007048 <__ssputs_r+0x8c>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7ff fea3 	bl	8006d44 <_malloc_r>
 8006ffe:	4606      	mov	r6, r0
 8007000:	b360      	cbz	r0, 800705c <__ssputs_r+0xa0>
 8007002:	6921      	ldr	r1, [r4, #16]
 8007004:	464a      	mov	r2, r9
 8007006:	f000 fadb 	bl	80075c0 <memcpy>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	6126      	str	r6, [r4, #16]
 8007018:	6165      	str	r5, [r4, #20]
 800701a:	444e      	add	r6, r9
 800701c:	eba5 0509 	sub.w	r5, r5, r9
 8007020:	6026      	str	r6, [r4, #0]
 8007022:	60a5      	str	r5, [r4, #8]
 8007024:	463e      	mov	r6, r7
 8007026:	42be      	cmp	r6, r7
 8007028:	d900      	bls.n	800702c <__ssputs_r+0x70>
 800702a:	463e      	mov	r6, r7
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	4632      	mov	r2, r6
 8007030:	4641      	mov	r1, r8
 8007032:	f000 faab 	bl	800758c <memmove>
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	1b9b      	subs	r3, r3, r6
 800703a:	60a3      	str	r3, [r4, #8]
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	4433      	add	r3, r6
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	2000      	movs	r0, #0
 8007044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007048:	462a      	mov	r2, r5
 800704a:	f000 fac7 	bl	80075dc <_realloc_r>
 800704e:	4606      	mov	r6, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	d1e0      	bne.n	8007016 <__ssputs_r+0x5a>
 8007054:	6921      	ldr	r1, [r4, #16]
 8007056:	4650      	mov	r0, sl
 8007058:	f7ff ff64 	bl	8006f24 <_free_r>
 800705c:	230c      	movs	r3, #12
 800705e:	f8ca 3000 	str.w	r3, [sl]
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
 800706e:	e7e9      	b.n	8007044 <__ssputs_r+0x88>

08007070 <_svfiprintf_r>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	4698      	mov	r8, r3
 8007076:	898b      	ldrh	r3, [r1, #12]
 8007078:	061b      	lsls	r3, r3, #24
 800707a:	b09d      	sub	sp, #116	; 0x74
 800707c:	4607      	mov	r7, r0
 800707e:	460d      	mov	r5, r1
 8007080:	4614      	mov	r4, r2
 8007082:	d50e      	bpl.n	80070a2 <_svfiprintf_r+0x32>
 8007084:	690b      	ldr	r3, [r1, #16]
 8007086:	b963      	cbnz	r3, 80070a2 <_svfiprintf_r+0x32>
 8007088:	2140      	movs	r1, #64	; 0x40
 800708a:	f7ff fe5b 	bl	8006d44 <_malloc_r>
 800708e:	6028      	str	r0, [r5, #0]
 8007090:	6128      	str	r0, [r5, #16]
 8007092:	b920      	cbnz	r0, 800709e <_svfiprintf_r+0x2e>
 8007094:	230c      	movs	r3, #12
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	f04f 30ff 	mov.w	r0, #4294967295
 800709c:	e0d0      	b.n	8007240 <_svfiprintf_r+0x1d0>
 800709e:	2340      	movs	r3, #64	; 0x40
 80070a0:	616b      	str	r3, [r5, #20]
 80070a2:	2300      	movs	r3, #0
 80070a4:	9309      	str	r3, [sp, #36]	; 0x24
 80070a6:	2320      	movs	r3, #32
 80070a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b0:	2330      	movs	r3, #48	; 0x30
 80070b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007258 <_svfiprintf_r+0x1e8>
 80070b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070ba:	f04f 0901 	mov.w	r9, #1
 80070be:	4623      	mov	r3, r4
 80070c0:	469a      	mov	sl, r3
 80070c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c6:	b10a      	cbz	r2, 80070cc <_svfiprintf_r+0x5c>
 80070c8:	2a25      	cmp	r2, #37	; 0x25
 80070ca:	d1f9      	bne.n	80070c0 <_svfiprintf_r+0x50>
 80070cc:	ebba 0b04 	subs.w	fp, sl, r4
 80070d0:	d00b      	beq.n	80070ea <_svfiprintf_r+0x7a>
 80070d2:	465b      	mov	r3, fp
 80070d4:	4622      	mov	r2, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	4638      	mov	r0, r7
 80070da:	f7ff ff6f 	bl	8006fbc <__ssputs_r>
 80070de:	3001      	adds	r0, #1
 80070e0:	f000 80a9 	beq.w	8007236 <_svfiprintf_r+0x1c6>
 80070e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e6:	445a      	add	r2, fp
 80070e8:	9209      	str	r2, [sp, #36]	; 0x24
 80070ea:	f89a 3000 	ldrb.w	r3, [sl]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80a1 	beq.w	8007236 <_svfiprintf_r+0x1c6>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070fe:	f10a 0a01 	add.w	sl, sl, #1
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800710a:	931a      	str	r3, [sp, #104]	; 0x68
 800710c:	4654      	mov	r4, sl
 800710e:	2205      	movs	r2, #5
 8007110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007114:	4850      	ldr	r0, [pc, #320]	; (8007258 <_svfiprintf_r+0x1e8>)
 8007116:	f7f9 f863 	bl	80001e0 <memchr>
 800711a:	9a04      	ldr	r2, [sp, #16]
 800711c:	b9d8      	cbnz	r0, 8007156 <_svfiprintf_r+0xe6>
 800711e:	06d0      	lsls	r0, r2, #27
 8007120:	bf44      	itt	mi
 8007122:	2320      	movmi	r3, #32
 8007124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007128:	0711      	lsls	r1, r2, #28
 800712a:	bf44      	itt	mi
 800712c:	232b      	movmi	r3, #43	; 0x2b
 800712e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007132:	f89a 3000 	ldrb.w	r3, [sl]
 8007136:	2b2a      	cmp	r3, #42	; 0x2a
 8007138:	d015      	beq.n	8007166 <_svfiprintf_r+0xf6>
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4654      	mov	r4, sl
 800713e:	2000      	movs	r0, #0
 8007140:	f04f 0c0a 	mov.w	ip, #10
 8007144:	4621      	mov	r1, r4
 8007146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714a:	3b30      	subs	r3, #48	; 0x30
 800714c:	2b09      	cmp	r3, #9
 800714e:	d94d      	bls.n	80071ec <_svfiprintf_r+0x17c>
 8007150:	b1b0      	cbz	r0, 8007180 <_svfiprintf_r+0x110>
 8007152:	9207      	str	r2, [sp, #28]
 8007154:	e014      	b.n	8007180 <_svfiprintf_r+0x110>
 8007156:	eba0 0308 	sub.w	r3, r0, r8
 800715a:	fa09 f303 	lsl.w	r3, r9, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	46a2      	mov	sl, r4
 8007164:	e7d2      	b.n	800710c <_svfiprintf_r+0x9c>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	9103      	str	r1, [sp, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfbb      	ittet	lt
 8007172:	425b      	neglt	r3, r3
 8007174:	f042 0202 	orrlt.w	r2, r2, #2
 8007178:	9307      	strge	r3, [sp, #28]
 800717a:	9307      	strlt	r3, [sp, #28]
 800717c:	bfb8      	it	lt
 800717e:	9204      	strlt	r2, [sp, #16]
 8007180:	7823      	ldrb	r3, [r4, #0]
 8007182:	2b2e      	cmp	r3, #46	; 0x2e
 8007184:	d10c      	bne.n	80071a0 <_svfiprintf_r+0x130>
 8007186:	7863      	ldrb	r3, [r4, #1]
 8007188:	2b2a      	cmp	r3, #42	; 0x2a
 800718a:	d134      	bne.n	80071f6 <_svfiprintf_r+0x186>
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	1d1a      	adds	r2, r3, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	9203      	str	r2, [sp, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	bfb8      	it	lt
 8007198:	f04f 33ff 	movlt.w	r3, #4294967295
 800719c:	3402      	adds	r4, #2
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007268 <_svfiprintf_r+0x1f8>
 80071a4:	7821      	ldrb	r1, [r4, #0]
 80071a6:	2203      	movs	r2, #3
 80071a8:	4650      	mov	r0, sl
 80071aa:	f7f9 f819 	bl	80001e0 <memchr>
 80071ae:	b138      	cbz	r0, 80071c0 <_svfiprintf_r+0x150>
 80071b0:	9b04      	ldr	r3, [sp, #16]
 80071b2:	eba0 000a 	sub.w	r0, r0, sl
 80071b6:	2240      	movs	r2, #64	; 0x40
 80071b8:	4082      	lsls	r2, r0
 80071ba:	4313      	orrs	r3, r2
 80071bc:	3401      	adds	r4, #1
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c4:	4825      	ldr	r0, [pc, #148]	; (800725c <_svfiprintf_r+0x1ec>)
 80071c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ca:	2206      	movs	r2, #6
 80071cc:	f7f9 f808 	bl	80001e0 <memchr>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d038      	beq.n	8007246 <_svfiprintf_r+0x1d6>
 80071d4:	4b22      	ldr	r3, [pc, #136]	; (8007260 <_svfiprintf_r+0x1f0>)
 80071d6:	bb1b      	cbnz	r3, 8007220 <_svfiprintf_r+0x1b0>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	3307      	adds	r3, #7
 80071dc:	f023 0307 	bic.w	r3, r3, #7
 80071e0:	3308      	adds	r3, #8
 80071e2:	9303      	str	r3, [sp, #12]
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	4433      	add	r3, r6
 80071e8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ea:	e768      	b.n	80070be <_svfiprintf_r+0x4e>
 80071ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f0:	460c      	mov	r4, r1
 80071f2:	2001      	movs	r0, #1
 80071f4:	e7a6      	b.n	8007144 <_svfiprintf_r+0xd4>
 80071f6:	2300      	movs	r3, #0
 80071f8:	3401      	adds	r4, #1
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	4619      	mov	r1, r3
 80071fe:	f04f 0c0a 	mov.w	ip, #10
 8007202:	4620      	mov	r0, r4
 8007204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007208:	3a30      	subs	r2, #48	; 0x30
 800720a:	2a09      	cmp	r2, #9
 800720c:	d903      	bls.n	8007216 <_svfiprintf_r+0x1a6>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0c6      	beq.n	80071a0 <_svfiprintf_r+0x130>
 8007212:	9105      	str	r1, [sp, #20]
 8007214:	e7c4      	b.n	80071a0 <_svfiprintf_r+0x130>
 8007216:	fb0c 2101 	mla	r1, ip, r1, r2
 800721a:	4604      	mov	r4, r0
 800721c:	2301      	movs	r3, #1
 800721e:	e7f0      	b.n	8007202 <_svfiprintf_r+0x192>
 8007220:	ab03      	add	r3, sp, #12
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	462a      	mov	r2, r5
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <_svfiprintf_r+0x1f4>)
 8007228:	a904      	add	r1, sp, #16
 800722a:	4638      	mov	r0, r7
 800722c:	f3af 8000 	nop.w
 8007230:	1c42      	adds	r2, r0, #1
 8007232:	4606      	mov	r6, r0
 8007234:	d1d6      	bne.n	80071e4 <_svfiprintf_r+0x174>
 8007236:	89ab      	ldrh	r3, [r5, #12]
 8007238:	065b      	lsls	r3, r3, #25
 800723a:	f53f af2d 	bmi.w	8007098 <_svfiprintf_r+0x28>
 800723e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007240:	b01d      	add	sp, #116	; 0x74
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	ab03      	add	r3, sp, #12
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	462a      	mov	r2, r5
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <_svfiprintf_r+0x1f4>)
 800724e:	a904      	add	r1, sp, #16
 8007250:	4638      	mov	r0, r7
 8007252:	f000 f879 	bl	8007348 <_printf_i>
 8007256:	e7eb      	b.n	8007230 <_svfiprintf_r+0x1c0>
 8007258:	08008a50 	.word	0x08008a50
 800725c:	08008a5a 	.word	0x08008a5a
 8007260:	00000000 	.word	0x00000000
 8007264:	08006fbd 	.word	0x08006fbd
 8007268:	08008a56 	.word	0x08008a56

0800726c <_printf_common>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	4616      	mov	r6, r2
 8007272:	4699      	mov	r9, r3
 8007274:	688a      	ldr	r2, [r1, #8]
 8007276:	690b      	ldr	r3, [r1, #16]
 8007278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800727c:	4293      	cmp	r3, r2
 800727e:	bfb8      	it	lt
 8007280:	4613      	movlt	r3, r2
 8007282:	6033      	str	r3, [r6, #0]
 8007284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007288:	4607      	mov	r7, r0
 800728a:	460c      	mov	r4, r1
 800728c:	b10a      	cbz	r2, 8007292 <_printf_common+0x26>
 800728e:	3301      	adds	r3, #1
 8007290:	6033      	str	r3, [r6, #0]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	0699      	lsls	r1, r3, #26
 8007296:	bf42      	ittt	mi
 8007298:	6833      	ldrmi	r3, [r6, #0]
 800729a:	3302      	addmi	r3, #2
 800729c:	6033      	strmi	r3, [r6, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	f015 0506 	ands.w	r5, r5, #6
 80072a4:	d106      	bne.n	80072b4 <_printf_common+0x48>
 80072a6:	f104 0a19 	add.w	sl, r4, #25
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	6832      	ldr	r2, [r6, #0]
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dc26      	bgt.n	8007302 <_printf_common+0x96>
 80072b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b8:	1e13      	subs	r3, r2, #0
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	bf18      	it	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	0692      	lsls	r2, r2, #26
 80072c2:	d42b      	bmi.n	800731c <_printf_common+0xb0>
 80072c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c8:	4649      	mov	r1, r9
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c0      	blx	r8
 80072ce:	3001      	adds	r0, #1
 80072d0:	d01e      	beq.n	8007310 <_printf_common+0xa4>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	f003 0306 	and.w	r3, r3, #6
 80072da:	2b04      	cmp	r3, #4
 80072dc:	bf02      	ittt	eq
 80072de:	68e5      	ldreq	r5, [r4, #12]
 80072e0:	6833      	ldreq	r3, [r6, #0]
 80072e2:	1aed      	subeq	r5, r5, r3
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	bf0c      	ite	eq
 80072e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072ec:	2500      	movne	r5, #0
 80072ee:	4293      	cmp	r3, r2
 80072f0:	bfc4      	itt	gt
 80072f2:	1a9b      	subgt	r3, r3, r2
 80072f4:	18ed      	addgt	r5, r5, r3
 80072f6:	2600      	movs	r6, #0
 80072f8:	341a      	adds	r4, #26
 80072fa:	42b5      	cmp	r5, r6
 80072fc:	d11a      	bne.n	8007334 <_printf_common+0xc8>
 80072fe:	2000      	movs	r0, #0
 8007300:	e008      	b.n	8007314 <_printf_common+0xa8>
 8007302:	2301      	movs	r3, #1
 8007304:	4652      	mov	r2, sl
 8007306:	4649      	mov	r1, r9
 8007308:	4638      	mov	r0, r7
 800730a:	47c0      	blx	r8
 800730c:	3001      	adds	r0, #1
 800730e:	d103      	bne.n	8007318 <_printf_common+0xac>
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007318:	3501      	adds	r5, #1
 800731a:	e7c6      	b.n	80072aa <_printf_common+0x3e>
 800731c:	18e1      	adds	r1, r4, r3
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	2030      	movs	r0, #48	; 0x30
 8007322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007326:	4422      	add	r2, r4
 8007328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800732c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007330:	3302      	adds	r3, #2
 8007332:	e7c7      	b.n	80072c4 <_printf_common+0x58>
 8007334:	2301      	movs	r3, #1
 8007336:	4622      	mov	r2, r4
 8007338:	4649      	mov	r1, r9
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d0e6      	beq.n	8007310 <_printf_common+0xa4>
 8007342:	3601      	adds	r6, #1
 8007344:	e7d9      	b.n	80072fa <_printf_common+0x8e>
	...

08007348 <_printf_i>:
 8007348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	7e0f      	ldrb	r7, [r1, #24]
 800734e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007350:	2f78      	cmp	r7, #120	; 0x78
 8007352:	4691      	mov	r9, r2
 8007354:	4680      	mov	r8, r0
 8007356:	460c      	mov	r4, r1
 8007358:	469a      	mov	sl, r3
 800735a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800735e:	d807      	bhi.n	8007370 <_printf_i+0x28>
 8007360:	2f62      	cmp	r7, #98	; 0x62
 8007362:	d80a      	bhi.n	800737a <_printf_i+0x32>
 8007364:	2f00      	cmp	r7, #0
 8007366:	f000 80d4 	beq.w	8007512 <_printf_i+0x1ca>
 800736a:	2f58      	cmp	r7, #88	; 0x58
 800736c:	f000 80c0 	beq.w	80074f0 <_printf_i+0x1a8>
 8007370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007378:	e03a      	b.n	80073f0 <_printf_i+0xa8>
 800737a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800737e:	2b15      	cmp	r3, #21
 8007380:	d8f6      	bhi.n	8007370 <_printf_i+0x28>
 8007382:	a101      	add	r1, pc, #4	; (adr r1, 8007388 <_printf_i+0x40>)
 8007384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007388:	080073e1 	.word	0x080073e1
 800738c:	080073f5 	.word	0x080073f5
 8007390:	08007371 	.word	0x08007371
 8007394:	08007371 	.word	0x08007371
 8007398:	08007371 	.word	0x08007371
 800739c:	08007371 	.word	0x08007371
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	08007371 	.word	0x08007371
 80073a8:	08007371 	.word	0x08007371
 80073ac:	08007371 	.word	0x08007371
 80073b0:	08007371 	.word	0x08007371
 80073b4:	080074f9 	.word	0x080074f9
 80073b8:	08007421 	.word	0x08007421
 80073bc:	080074b3 	.word	0x080074b3
 80073c0:	08007371 	.word	0x08007371
 80073c4:	08007371 	.word	0x08007371
 80073c8:	0800751b 	.word	0x0800751b
 80073cc:	08007371 	.word	0x08007371
 80073d0:	08007421 	.word	0x08007421
 80073d4:	08007371 	.word	0x08007371
 80073d8:	08007371 	.word	0x08007371
 80073dc:	080074bb 	.word	0x080074bb
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	602a      	str	r2, [r5, #0]
 80073e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f0:	2301      	movs	r3, #1
 80073f2:	e09f      	b.n	8007534 <_printf_i+0x1ec>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	0607      	lsls	r7, r0, #24
 80073fa:	f103 0104 	add.w	r1, r3, #4
 80073fe:	6029      	str	r1, [r5, #0]
 8007400:	d501      	bpl.n	8007406 <_printf_i+0xbe>
 8007402:	681e      	ldr	r6, [r3, #0]
 8007404:	e003      	b.n	800740e <_printf_i+0xc6>
 8007406:	0646      	lsls	r6, r0, #25
 8007408:	d5fb      	bpl.n	8007402 <_printf_i+0xba>
 800740a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800740e:	2e00      	cmp	r6, #0
 8007410:	da03      	bge.n	800741a <_printf_i+0xd2>
 8007412:	232d      	movs	r3, #45	; 0x2d
 8007414:	4276      	negs	r6, r6
 8007416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800741a:	485a      	ldr	r0, [pc, #360]	; (8007584 <_printf_i+0x23c>)
 800741c:	230a      	movs	r3, #10
 800741e:	e012      	b.n	8007446 <_printf_i+0xfe>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	1d19      	adds	r1, r3, #4
 8007426:	6029      	str	r1, [r5, #0]
 8007428:	0605      	lsls	r5, r0, #24
 800742a:	d501      	bpl.n	8007430 <_printf_i+0xe8>
 800742c:	681e      	ldr	r6, [r3, #0]
 800742e:	e002      	b.n	8007436 <_printf_i+0xee>
 8007430:	0641      	lsls	r1, r0, #25
 8007432:	d5fb      	bpl.n	800742c <_printf_i+0xe4>
 8007434:	881e      	ldrh	r6, [r3, #0]
 8007436:	4853      	ldr	r0, [pc, #332]	; (8007584 <_printf_i+0x23c>)
 8007438:	2f6f      	cmp	r7, #111	; 0x6f
 800743a:	bf0c      	ite	eq
 800743c:	2308      	moveq	r3, #8
 800743e:	230a      	movne	r3, #10
 8007440:	2100      	movs	r1, #0
 8007442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007446:	6865      	ldr	r5, [r4, #4]
 8007448:	60a5      	str	r5, [r4, #8]
 800744a:	2d00      	cmp	r5, #0
 800744c:	bfa2      	ittt	ge
 800744e:	6821      	ldrge	r1, [r4, #0]
 8007450:	f021 0104 	bicge.w	r1, r1, #4
 8007454:	6021      	strge	r1, [r4, #0]
 8007456:	b90e      	cbnz	r6, 800745c <_printf_i+0x114>
 8007458:	2d00      	cmp	r5, #0
 800745a:	d04b      	beq.n	80074f4 <_printf_i+0x1ac>
 800745c:	4615      	mov	r5, r2
 800745e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007462:	fb03 6711 	mls	r7, r3, r1, r6
 8007466:	5dc7      	ldrb	r7, [r0, r7]
 8007468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800746c:	4637      	mov	r7, r6
 800746e:	42bb      	cmp	r3, r7
 8007470:	460e      	mov	r6, r1
 8007472:	d9f4      	bls.n	800745e <_printf_i+0x116>
 8007474:	2b08      	cmp	r3, #8
 8007476:	d10b      	bne.n	8007490 <_printf_i+0x148>
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	07de      	lsls	r6, r3, #31
 800747c:	d508      	bpl.n	8007490 <_printf_i+0x148>
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	6861      	ldr	r1, [r4, #4]
 8007482:	4299      	cmp	r1, r3
 8007484:	bfde      	ittt	le
 8007486:	2330      	movle	r3, #48	; 0x30
 8007488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800748c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007490:	1b52      	subs	r2, r2, r5
 8007492:	6122      	str	r2, [r4, #16]
 8007494:	f8cd a000 	str.w	sl, [sp]
 8007498:	464b      	mov	r3, r9
 800749a:	aa03      	add	r2, sp, #12
 800749c:	4621      	mov	r1, r4
 800749e:	4640      	mov	r0, r8
 80074a0:	f7ff fee4 	bl	800726c <_printf_common>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d14a      	bne.n	800753e <_printf_i+0x1f6>
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	b004      	add	sp, #16
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f043 0320 	orr.w	r3, r3, #32
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	4833      	ldr	r0, [pc, #204]	; (8007588 <_printf_i+0x240>)
 80074bc:	2778      	movs	r7, #120	; 0x78
 80074be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	6829      	ldr	r1, [r5, #0]
 80074c6:	061f      	lsls	r7, r3, #24
 80074c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074cc:	d402      	bmi.n	80074d4 <_printf_i+0x18c>
 80074ce:	065f      	lsls	r7, r3, #25
 80074d0:	bf48      	it	mi
 80074d2:	b2b6      	uxthmi	r6, r6
 80074d4:	07df      	lsls	r7, r3, #31
 80074d6:	bf48      	it	mi
 80074d8:	f043 0320 	orrmi.w	r3, r3, #32
 80074dc:	6029      	str	r1, [r5, #0]
 80074de:	bf48      	it	mi
 80074e0:	6023      	strmi	r3, [r4, #0]
 80074e2:	b91e      	cbnz	r6, 80074ec <_printf_i+0x1a4>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	f023 0320 	bic.w	r3, r3, #32
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	2310      	movs	r3, #16
 80074ee:	e7a7      	b.n	8007440 <_printf_i+0xf8>
 80074f0:	4824      	ldr	r0, [pc, #144]	; (8007584 <_printf_i+0x23c>)
 80074f2:	e7e4      	b.n	80074be <_printf_i+0x176>
 80074f4:	4615      	mov	r5, r2
 80074f6:	e7bd      	b.n	8007474 <_printf_i+0x12c>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	6826      	ldr	r6, [r4, #0]
 80074fc:	6961      	ldr	r1, [r4, #20]
 80074fe:	1d18      	adds	r0, r3, #4
 8007500:	6028      	str	r0, [r5, #0]
 8007502:	0635      	lsls	r5, r6, #24
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	d501      	bpl.n	800750c <_printf_i+0x1c4>
 8007508:	6019      	str	r1, [r3, #0]
 800750a:	e002      	b.n	8007512 <_printf_i+0x1ca>
 800750c:	0670      	lsls	r0, r6, #25
 800750e:	d5fb      	bpl.n	8007508 <_printf_i+0x1c0>
 8007510:	8019      	strh	r1, [r3, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	4615      	mov	r5, r2
 8007518:	e7bc      	b.n	8007494 <_printf_i+0x14c>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	1d1a      	adds	r2, r3, #4
 800751e:	602a      	str	r2, [r5, #0]
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	2100      	movs	r1, #0
 8007526:	4628      	mov	r0, r5
 8007528:	f7f8 fe5a 	bl	80001e0 <memchr>
 800752c:	b108      	cbz	r0, 8007532 <_printf_i+0x1ea>
 800752e:	1b40      	subs	r0, r0, r5
 8007530:	6060      	str	r0, [r4, #4]
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	2300      	movs	r3, #0
 8007538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753c:	e7aa      	b.n	8007494 <_printf_i+0x14c>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	462a      	mov	r2, r5
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d0ad      	beq.n	80074a8 <_printf_i+0x160>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	079b      	lsls	r3, r3, #30
 8007550:	d413      	bmi.n	800757a <_printf_i+0x232>
 8007552:	68e0      	ldr	r0, [r4, #12]
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	4298      	cmp	r0, r3
 8007558:	bfb8      	it	lt
 800755a:	4618      	movlt	r0, r3
 800755c:	e7a6      	b.n	80074ac <_printf_i+0x164>
 800755e:	2301      	movs	r3, #1
 8007560:	4632      	mov	r2, r6
 8007562:	4649      	mov	r1, r9
 8007564:	4640      	mov	r0, r8
 8007566:	47d0      	blx	sl
 8007568:	3001      	adds	r0, #1
 800756a:	d09d      	beq.n	80074a8 <_printf_i+0x160>
 800756c:	3501      	adds	r5, #1
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	9903      	ldr	r1, [sp, #12]
 8007572:	1a5b      	subs	r3, r3, r1
 8007574:	42ab      	cmp	r3, r5
 8007576:	dcf2      	bgt.n	800755e <_printf_i+0x216>
 8007578:	e7eb      	b.n	8007552 <_printf_i+0x20a>
 800757a:	2500      	movs	r5, #0
 800757c:	f104 0619 	add.w	r6, r4, #25
 8007580:	e7f5      	b.n	800756e <_printf_i+0x226>
 8007582:	bf00      	nop
 8007584:	08008a61 	.word	0x08008a61
 8007588:	08008a72 	.word	0x08008a72

0800758c <memmove>:
 800758c:	4288      	cmp	r0, r1
 800758e:	b510      	push	{r4, lr}
 8007590:	eb01 0402 	add.w	r4, r1, r2
 8007594:	d902      	bls.n	800759c <memmove+0x10>
 8007596:	4284      	cmp	r4, r0
 8007598:	4623      	mov	r3, r4
 800759a:	d807      	bhi.n	80075ac <memmove+0x20>
 800759c:	1e43      	subs	r3, r0, #1
 800759e:	42a1      	cmp	r1, r4
 80075a0:	d008      	beq.n	80075b4 <memmove+0x28>
 80075a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075aa:	e7f8      	b.n	800759e <memmove+0x12>
 80075ac:	4402      	add	r2, r0
 80075ae:	4601      	mov	r1, r0
 80075b0:	428a      	cmp	r2, r1
 80075b2:	d100      	bne.n	80075b6 <memmove+0x2a>
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075be:	e7f7      	b.n	80075b0 <memmove+0x24>

080075c0 <memcpy>:
 80075c0:	440a      	add	r2, r1
 80075c2:	4291      	cmp	r1, r2
 80075c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075c8:	d100      	bne.n	80075cc <memcpy+0xc>
 80075ca:	4770      	bx	lr
 80075cc:	b510      	push	{r4, lr}
 80075ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075d6:	4291      	cmp	r1, r2
 80075d8:	d1f9      	bne.n	80075ce <memcpy+0xe>
 80075da:	bd10      	pop	{r4, pc}

080075dc <_realloc_r>:
 80075dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e0:	4680      	mov	r8, r0
 80075e2:	4614      	mov	r4, r2
 80075e4:	460e      	mov	r6, r1
 80075e6:	b921      	cbnz	r1, 80075f2 <_realloc_r+0x16>
 80075e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ec:	4611      	mov	r1, r2
 80075ee:	f7ff bba9 	b.w	8006d44 <_malloc_r>
 80075f2:	b92a      	cbnz	r2, 8007600 <_realloc_r+0x24>
 80075f4:	f7ff fc96 	bl	8006f24 <_free_r>
 80075f8:	4625      	mov	r5, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007600:	f000 f81b 	bl	800763a <_malloc_usable_size_r>
 8007604:	4284      	cmp	r4, r0
 8007606:	4607      	mov	r7, r0
 8007608:	d802      	bhi.n	8007610 <_realloc_r+0x34>
 800760a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800760e:	d812      	bhi.n	8007636 <_realloc_r+0x5a>
 8007610:	4621      	mov	r1, r4
 8007612:	4640      	mov	r0, r8
 8007614:	f7ff fb96 	bl	8006d44 <_malloc_r>
 8007618:	4605      	mov	r5, r0
 800761a:	2800      	cmp	r0, #0
 800761c:	d0ed      	beq.n	80075fa <_realloc_r+0x1e>
 800761e:	42bc      	cmp	r4, r7
 8007620:	4622      	mov	r2, r4
 8007622:	4631      	mov	r1, r6
 8007624:	bf28      	it	cs
 8007626:	463a      	movcs	r2, r7
 8007628:	f7ff ffca 	bl	80075c0 <memcpy>
 800762c:	4631      	mov	r1, r6
 800762e:	4640      	mov	r0, r8
 8007630:	f7ff fc78 	bl	8006f24 <_free_r>
 8007634:	e7e1      	b.n	80075fa <_realloc_r+0x1e>
 8007636:	4635      	mov	r5, r6
 8007638:	e7df      	b.n	80075fa <_realloc_r+0x1e>

0800763a <_malloc_usable_size_r>:
 800763a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763e:	1f18      	subs	r0, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	bfbc      	itt	lt
 8007644:	580b      	ldrlt	r3, [r1, r0]
 8007646:	18c0      	addlt	r0, r0, r3
 8007648:	4770      	bx	lr
	...

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
