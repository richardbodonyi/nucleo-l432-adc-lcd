
nucleo-l432-adc-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b44  08008b44  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b4c  08008b4c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f64  2000005c  08008bb0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001fc0  08008bb0  00021fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a496  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003543  00000000  00000000  0003a565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0003daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f7  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024517  00000000  00000000  00040177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a98d  00000000  00000000  0006468e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dec71  00000000  00000000  0007f01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062a0  00000000  00000000  0015dc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00163f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cc8 	.word	0x08007cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007cc8 	.word	0x08007cc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <init_display>:
uint16_t draw_index = 0;

void init_display(SPI_HandleTypeDef* spi,
    TIM_HandleTypeDef* timer,
    ADC_HandleTypeDef* adc,
    UART_HandleTypeDef* uart) {
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b09d      	sub	sp, #116	; 0x74
 8000b8c:	af0a      	add	r7, sp, #40	; 0x28
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
  timer_hal = timer;
 8000b96:	4a49      	ldr	r2, [pc, #292]	; (8000cbc <init_display+0x134>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	6013      	str	r3, [r2, #0]
  uart_hal = uart;
 8000b9c:	4a48      	ldr	r2, [pc, #288]	; (8000cc0 <init_display+0x138>)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	6013      	str	r3, [r2, #0]
  ili9341_lcd = ili9341_new(
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9308      	str	r3, [sp, #32]
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	9307      	str	r3, [sp, #28]
 8000bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb2:	9306      	str	r3, [sp, #24]
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	9305      	str	r3, [sp, #20]
 8000bba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bbe:	9304      	str	r3, [sp, #16]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9303      	str	r3, [sp, #12]
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <init_display+0x13c>)
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <init_display+0x13c>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	493b      	ldr	r1, [pc, #236]	; (8000cc4 <init_display+0x13c>)
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f000 f98c 	bl	8000ef4 <ili9341_new>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a3a      	ldr	r2, [pc, #232]	; (8000cc8 <init_display+0x140>)
 8000be0:	6013      	str	r3, [r2, #0]
          isoLandscape,
          TOUCH_CS_GPIO_Port,  TOUCH_CS_Pin,
          TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin,
          itsSupported,
          itnNormalized);
  ili9341_spi_tft_select(ili9341_lcd);
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <init_display+0x140>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fa9e 	bl	8001128 <ili9341_spi_tft_select>

  char message[40];
  sprintf(message, "Screen: %d x %d\r\n", ili9341_lcd->screen_size.width, ili9341_lcd->screen_size.height);
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <init_display+0x140>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	8b9b      	ldrh	r3, [r3, #28]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <init_display+0x140>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	8bdb      	ldrh	r3, [r3, #30]
 8000bfa:	f107 0020 	add.w	r0, r7, #32
 8000bfe:	4933      	ldr	r1, [pc, #204]	; (8000ccc <init_display+0x144>)
 8000c00:	f006 fc6a 	bl	80074d8 <siprintf>
  HAL_UART_Transmit(uart_hal, (uint8_t*) message, strlen(message), 100);
 8000c04:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <init_display+0x138>)
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fadf 	bl	80001d0 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f107 0120 	add.w	r1, r7, #32
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f005 fedb 	bl	80069d8 <HAL_UART_Transmit>
  sprintf(message, "Orientation: %d\r\n", ili9341_lcd->orientation);
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <init_display+0x140>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4927      	ldr	r1, [pc, #156]	; (8000cd0 <init_display+0x148>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f006 fc50 	bl	80074d8 <siprintf>
  HAL_UART_Transmit(uart_hal, (uint8_t*) message, strlen(message), 100);
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <init_display+0x138>)
 8000c3a:	681c      	ldr	r4, [r3, #0]
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fac5 	bl	80001d0 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	f107 0120 	add.w	r1, r7, #32
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	4620      	mov	r0, r4
 8000c52:	f005 fec1 	bl	80069d8 <HAL_UART_Transmit>

  ili9341_fill_screen(ili9341_lcd, ILI9341_BLACK);
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <init_display+0x140>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <init_display+0x14c>)
 8000c5c:	8812      	ldrh	r2, [r2, #0]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 ffc7 	bl	8001bf4 <ili9341_fill_screen>

  ili9341_text_attr_t attr;
  attr.bg_color = ILI9341_BLUE;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <init_display+0x150>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	837b      	strh	r3, [r7, #26]
  attr.fg_color = ILI9341_WHITE;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <init_display+0x154>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	833b      	strh	r3, [r7, #24]
  attr.font = &ili9341_font_11x18;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <init_display+0x158>)
 8000c74:	617b      	str	r3, [r7, #20]
  attr.origin_x = 50;
 8000c76:	2332      	movs	r3, #50	; 0x32
 8000c78:	83bb      	strh	r3, [r7, #28]
  attr.origin_y = 50;
 8000c7a:	2332      	movs	r3, #50	; 0x32
 8000c7c:	83fb      	strh	r3, [r7, #30]
  ili9341_draw_string(ili9341_lcd, attr, "Hello");
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <init_display+0x140>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <init_display+0x15c>)
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8c:	f001 f8b0 	bl	8001df0 <ili9341_draw_string>

  ili9341_draw_line(ili9341_lcd, ILI9341_RED, 0, 239, 319, 0);
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <init_display+0x140>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <init_display+0x160>)
 8000c96:	8819      	ldrh	r1, [r3, #0]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	f240 133f 	movw	r3, #319	; 0x13f
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	23ef      	movs	r3, #239	; 0xef
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f000 fe26 	bl	80018f6 <ili9341_draw_line>

  HAL_ADC_Start_DMA(adc, (uint32_t*) dma_values, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	490f      	ldr	r1, [pc, #60]	; (8000cec <init_display+0x164>)
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f002 fa2e 	bl	8003110 <HAL_ADC_Start_DMA>
}
 8000cb4:	bf00      	nop
 8000cb6:	374c      	adds	r7, #76	; 0x4c
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	20000078 	.word	0x20000078
 8000cc0:	2000007c 	.word	0x2000007c
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	20000080 	.word	0x20000080
 8000ccc:	08007ce0 	.word	0x08007ce0
 8000cd0:	08007cf4 	.word	0x08007cf4
 8000cd4:	08008abe 	.word	0x08008abe
 8000cd8:	08008ac2 	.word	0x08008ac2
 8000cdc:	08008ac6 	.word	0x08008ac6
 8000ce0:	08007d60 	.word	0x08007d60
 8000ce4:	08007d08 	.word	0x08007d08
 8000ce8:	08008ac4 	.word	0x08008ac4
 8000cec:	20000084 	.word	0x20000084

08000cf0 <printToUart>:


void printToUart(UART_HandleTypeDef *huart, char *msg) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huart, (uint8_t*) msg, strlen(msg), 100);
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f7ff fa68 	bl	80001d0 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	2364      	movs	r3, #100	; 0x64
 8000d06:	6839      	ldr	r1, [r7, #0]
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f005 fe65 	bl	80069d8 <HAL_UART_Transmit>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <translate_y>:

uint16_t translate_y(uint16_t value) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
//  return 239 - value * 0.0589;
  return 239 - (value - 2000) * 0.0589;
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fd25 	bl	8000778 <__aeabi_i2d>
 8000d2e:	a30c      	add	r3, pc, #48	; (adr r3, 8000d60 <translate_y+0x48>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff faa4 	bl	8000280 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	a10a      	add	r1, pc, #40	; (adr r1, 8000d68 <translate_y+0x50>)
 8000d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d42:	f7ff fbcb 	bl	80004dc <__aeabi_dsub>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff fd7d 	bl	800084c <__aeabi_d2uiz>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29b      	uxth	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0b780347 	.word	0x0b780347
 8000d64:	3fae2824 	.word	0x3fae2824
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	406de000 	.word	0x406de000

08000d70 <display_graph>:

void display_graph() {
 8000d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af02      	add	r7, sp, #8
  if (fill_index > draw_index) {
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <display_graph+0xe8>)
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <display_graph+0xec>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d964      	bls.n	8000e4e <display_graph+0xde>
    int x = draw_index % ili9341_lcd->screen_size.width;
 8000d84:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <display_graph+0xec>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <display_graph+0xf0>)
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	8b92      	ldrh	r2, [r2, #28]
 8000d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d92:	fb01 f202 	mul.w	r2, r1, r2
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	607b      	str	r3, [r7, #4]
    ili9341_draw_line(ili9341_lcd, ILI9341_BLACK, x, 0, x, 239);
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <display_graph+0xf0>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <display_graph+0xf4>)
 8000da2:	8819      	ldrh	r1, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	24ef      	movs	r4, #239	; 0xef
 8000dae:	9401      	str	r4, [sp, #4]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	f000 fd9f 	bl	80018f6 <ili9341_draw_line>
    if (x == 0) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d116      	bne.n	8000dec <display_graph+0x7c>
      ili9341_draw_pixel(ili9341_lcd, ILI9341_LIGHTGREY, x, translate_y(raw_values[draw_index]));
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <display_graph+0xf0>)
 8000dc0:	681c      	ldr	r4, [r3, #0]
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <display_graph+0xf8>)
 8000dc4:	881d      	ldrh	r5, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	b21e      	sxth	r6, r3
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <display_graph+0xec>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <display_graph+0xfc>)
 8000dd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff9e 	bl	8000d18 <translate_y>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4632      	mov	r2, r6
 8000de2:	4629      	mov	r1, r5
 8000de4:	4620      	mov	r0, r4
 8000de6:	f000 fd2e 	bl	8001846 <ili9341_draw_pixel>
 8000dea:	e02a      	b.n	8000e42 <display_graph+0xd2>
    }
    else {
      ili9341_draw_line(ili9341_lcd, ILI9341_LIGHTGREY, x - 1, translate_y(raw_values[draw_index - 1]), x, translate_y(raw_values[draw_index]));
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <display_graph+0xf0>)
 8000dee:	681d      	ldr	r5, [r3, #0]
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <display_graph+0xf8>)
 8000df2:	881e      	ldrh	r6, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	fa0f f883 	sxth.w	r8, r3
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <display_graph+0xec>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <display_graph+0xfc>)
 8000e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff83 	bl	8000d18 <translate_y>
 8000e12:	4603      	mov	r3, r0
 8000e14:	fa0f f983 	sxth.w	r9, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	b21c      	sxth	r4, r3
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <display_graph+0xec>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <display_graph+0xfc>)
 8000e24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff75 	bl	8000d18 <translate_y>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9400      	str	r4, [sp, #0]
 8000e36:	464b      	mov	r3, r9
 8000e38:	4642      	mov	r2, r8
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	f000 fd5a 	bl	80018f6 <ili9341_draw_line>
    }
    draw_index++;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <display_graph+0xec>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <display_graph+0xec>)
 8000e4c:	801a      	strh	r2, [r3, #0]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e58:	2000140c 	.word	0x2000140c
 8000e5c:	2000140e 	.word	0x2000140e
 8000e60:	20000080 	.word	0x20000080
 8000e64:	08008abe 	.word	0x08008abe
 8000e68:	08008ac0 	.word	0x08008ac0
 8000e6c:	20000084 	.word	0x20000084

08000e70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b08d      	sub	sp, #52	; 0x34
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (fill_index >= BUFFER_SIZE) {
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d829      	bhi.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x68>
    return;
  }
  raw_values[fill_index] = dma_values[0];
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e8c:	8819      	ldrh	r1, [r3, #0]
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  char message[40];
  sprintf(message, "%d -> %d\r\n", fill_index, translate_y(raw_values[fill_index]));
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	461c      	mov	r4, r3
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ea2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff36 	bl	8000d18 <translate_y>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f107 0008 	add.w	r0, r7, #8
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	490d      	ldr	r1, [pc, #52]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000eb6:	f006 fb0f 	bl	80074d8 <siprintf>
  printToUart(uart_hal, message);
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff13 	bl	8000cf0 <printToUart>
  fill_index++;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ed4:	801a      	strh	r2, [r3, #0]
 8000ed6:	e000      	b.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x6a>
    return;
 8000ed8:	bf00      	nop
}
 8000eda:	3734      	adds	r7, #52	; 0x34
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	2000140c 	.word	0x2000140c
 8000ee4:	20000084 	.word	0x20000084
 8000ee8:	20000084 	.word	0x20000084
 8000eec:	08007d10 	.word	0x08007d10
 8000ef0:	2000007c 	.word	0x2000007c

08000ef4 <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b09b      	sub	sp, #108	; 0x6c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	80fb      	strh	r3, [r7, #6]
  ili9341_t *lcd = NULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	667b      	str	r3, [r7, #100]	; 0x64

  if (NULL != spi_hal) {
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8107 	beq.w	800111e <ili9341_new+0x22a>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8103 	beq.w	800111e <ili9341_new+0x22a>
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80ff 	beq.w	800111e <ili9341_new+0x22a>
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	0c1b      	lsrs	r3, r3, #16
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 80f9 	bne.w	800111e <ili9341_new+0x22a>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 80f5 	beq.w	800111e <ili9341_new+0x22a>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 8000f34:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80f0 	beq.w	800111e <ili9341_new+0x22a>
 8000f3e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 80e9 	bne.w	800111e <ili9341_new+0x22a>
 8000f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80e5 	beq.w	800111e <ili9341_new+0x22a>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 8000f54:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80e0 	beq.w	800111e <ili9341_new+0x22a>
 8000f5e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 80d9 	bne.w	800111e <ili9341_new+0x22a>
 8000f6c:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f2c0 80d4 	blt.w	800111e <ili9341_new+0x22a>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 8000f76:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	f300 80cf 	bgt.w	800111e <ili9341_new+0x22a>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8000f80:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d121      	bne.n	8000fcc <ili9341_new+0xd8>
 8000f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80c6 	beq.w	800111e <ili9341_new+0x22a>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8000f92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80c1 	beq.w	800111e <ili9341_new+0x22a>
 8000f9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f040 80ba 	bne.w	800111e <ili9341_new+0x22a>
 8000faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80b5 	beq.w	800111e <ili9341_new+0x22a>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 8000fb4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80b0 	beq.w	800111e <ili9341_new+0x22a>
 8000fbe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000fc2:	0c1b      	lsrs	r3, r3, #16
 8000fc4:	041b      	lsls	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 80a9 	bne.w	800111e <ili9341_new+0x22a>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 8000fcc:	2068      	movs	r0, #104	; 0x68
 8000fce:	f006 f9cf 	bl	8007370 <malloc>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8000fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80a0 	beq.w	800111e <ili9341_new+0x22a>

          lcd->spi_hal              = spi_hal;
 8000fde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	601a      	str	r2, [r3, #0]

          lcd->reset_port           = reset_port;
 8000fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	605a      	str	r2, [r3, #4]
          lcd->reset_pin            = reset_pin;
 8000fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fec:	88fa      	ldrh	r2, [r7, #6]
 8000fee:	811a      	strh	r2, [r3, #8]
          lcd->tft_select_port      = tft_select_port;
 8000ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	60da      	str	r2, [r3, #12]
          lcd->tft_select_pin       = tft_select_pin;
 8000ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000ffc:	821a      	strh	r2, [r3, #16]
          lcd->data_command_port    = data_command_port;
 8000ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001000:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001002:	615a      	str	r2, [r3, #20]
          lcd->data_command_pin     = data_command_pin;
 8001004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001006:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800100a:	831a      	strh	r2, [r3, #24]

          lcd->orientation          = orientation;
 800100c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800100e:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8001012:	769a      	strb	r2, [r3, #26]
          lcd->screen_size          = ili9341_screen_size(orientation);
 8001014:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8001016:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fb24 	bl	8001668 <ili9341_screen_size>
 8001020:	4603      	mov	r3, r0
 8001022:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 8001024:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 8001028:	2b00      	cmp	r3, #0
 800102a:	d03d      	beq.n	80010a8 <ili9341_new+0x1b4>

            lcd->touch_select_port    = touch_select_port;
 800102c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800102e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001032:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = touch_select_pin;
 8001034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001036:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800103a:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = touch_irq_port;
 800103c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = touch_irq_pin;
 8001044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001046:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800104a:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 800104c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104e:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8001052:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = touch_normalize;
 8001056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001058:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 800105c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8001060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001062:	2200      	movs	r2, #0
 8001064:	861a      	strh	r2, [r3, #48]	; 0x30
 8001066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001068:	2200      	movs	r2, #0
 800106a:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 800106c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8001074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001076:	3336      	adds	r3, #54	; 0x36
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 800107e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001080:	3340      	adds	r3, #64	; 0x40
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNotPressed;
 8001092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001094:	2200      	movs	r2, #0
 8001096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 800109a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800109c:	2200      	movs	r2, #0
 800109e:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 80010a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010a2:	2200      	movs	r2, #0
 80010a4:	665a      	str	r2, [r3, #100]	; 0x64
 80010a6:	e037      	b.n	8001118 <ili9341_new+0x224>

          } else {

            lcd->touch_select_port    = NULL;
 80010a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = 0;
 80010ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010b0:	2200      	movs	r2, #0
 80010b2:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = NULL;
 80010b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = 0;
 80010ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010bc:	2200      	movs	r2, #0
 80010be:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 80010c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c2:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 80010c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = itnNONE;
 80010ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 80010d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010d4:	2200      	movs	r2, #0
 80010d6:	861a      	strh	r2, [r3, #48]	; 0x30
 80010d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010da:	2200      	movs	r2, #0
 80010dc:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 80010de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80010e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e8:	3336      	adds	r3, #54	; 0x36
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80010f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f2:	3340      	adds	r3, #64	; 0x40
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNONE;
 8001104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 800110c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800110e:	2200      	movs	r2, #0
 8001110:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 8001112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001114:	2200      	movs	r2, #0
 8001116:	665a      	str	r2, [r3, #100]	; 0x64
          }

          ili9341_initialize(lcd);
 8001118:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800111a:	f000 f945 	bl	80013a8 <ili9341_initialize>
        }
      }
    }
  }

  return lcd;
 800111e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8001120:	4618      	mov	r0, r3
 8001122:	376c      	adds	r7, #108	; 0x6c
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68d8      	ldr	r0, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	8a1b      	ldrh	r3, [r3, #16]
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	f003 fa08 	bl	8004550 <HAL_GPIO_WritePin>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_t *lcd)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68d8      	ldr	r0, [r3, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8a1b      	ldrh	r3, [r3, #16]
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	f003 f9f8 	bl	8004550 <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_t *lcd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a18      	ldr	r0, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	f003 f9e8 	bl	8004550 <HAL_GPIO_WritePin>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_t *lcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a18      	ldr	r0, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001198:	2201      	movs	r2, #1
 800119a:	4619      	mov	r1, r3
 800119c:	f003 f9d8 	bl	8004550 <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 80011b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <ili9341_spi_slave_select+0x1a>
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d004      	beq.n	80011ca <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
    default: break;
 80011c0:	e007      	b.n	80011d2 <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <ili9341_spi_tft_select>
 80011c8:	e003      	b.n	80011d2 <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffcc 	bl	8001168 <ili9341_spi_touch_select>
 80011d0:	bf00      	nop
  }
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 80011e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <ili9341_spi_slave_release+0x1a>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d004      	beq.n	80011fc <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
    default: break;
 80011f2:	e007      	b.n	8001204 <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ffa7 	bl	8001148 <ili9341_spi_tft_release>
 80011fa:	e003      	b.n	8001204 <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ffc3 	bl	8001188 <ili9341_spi_touch_release>
 8001202:	bf00      	nop
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
 8001218:	4613      	mov	r3, r2
 800121a:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(lcd, spi_slave);
 800121c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db09      	blt.n	8001238 <ili9341_spi_write_command+0x2c>
 8001224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001228:	2b01      	cmp	r3, #1
 800122a:	dc05      	bgt.n	8001238 <ili9341_spi_write_command+0x2c>
 800122c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffb8 	bl	80011a8 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6958      	ldr	r0, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	8b1b      	ldrh	r3, [r3, #24]
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	f003 f984 	bl	8004550 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	1cb9      	adds	r1, r7, #2
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2201      	movs	r2, #1
 8001254:	f004 fcb1 	bl	8005bba <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8001258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db09      	blt.n	8001274 <ili9341_spi_write_command+0x68>
 8001260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001264:	2b01      	cmp	r3, #1
 8001266:	dc05      	bgt.n	8001274 <ili9341_spi_write_command+0x68>
 8001268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffb3 	bl	80011da <ili9341_spi_slave_release>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	72fb      	strb	r3, [r7, #11]
 800128a:	4613      	mov	r3, r2
 800128c:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(lcd, spi_slave);
 800128e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db09      	blt.n	80012aa <ili9341_spi_write_data+0x2e>
 8001296:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800129a:	2b01      	cmp	r3, #1
 800129c:	dc05      	bgt.n	80012aa <ili9341_spi_write_data+0x2e>
 800129e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012a2:	4619      	mov	r1, r3
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff ff7f 	bl	80011a8 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6958      	ldr	r0, [r3, #20]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8b1b      	ldrh	r3, [r3, #24]
 80012b2:	2201      	movs	r2, #1
 80012b4:	4619      	mov	r1, r3
 80012b6:	f003 f94b 	bl	8004550 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	893a      	ldrh	r2, [r7, #8]
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	f004 fc78 	bl	8005bba <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 80012ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db09      	blt.n	80012e6 <ili9341_spi_write_data+0x6a>
 80012d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	dc05      	bgt.n	80012e6 <ili9341_spi_write_data+0x6a>
 80012da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012de:	4619      	mov	r1, r3
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff7a 	bl	80011da <ili9341_spi_slave_release>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	4608      	mov	r0, r1
 80012f8:	4611      	mov	r1, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	4603      	mov	r3, r0
 80012fe:	70fb      	strb	r3, [r7, #3]
 8001300:	460b      	mov	r3, r1
 8001302:	70bb      	strb	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(lcd, spi_slave);
 8001308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db09      	blt.n	8001324 <ili9341_spi_write_command_data+0x36>
 8001310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001314:	2b01      	cmp	r3, #1
 8001316:	dc05      	bgt.n	8001324 <ili9341_spi_write_command_data+0x36>
 8001318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800131c:	4619      	mov	r1, r3
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ff42 	bl	80011a8 <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 8001324:	78bb      	ldrb	r3, [r7, #2]
 8001326:	461a      	mov	r2, r3
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff6d 	bl	800120c <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 8001332:	883a      	ldrh	r2, [r7, #0]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f04f 31ff 	mov.w	r1, #4294967295
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff9e 	bl	800127c <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 8001340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db09      	blt.n	800135c <ili9341_spi_write_command_data+0x6e>
 8001348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800134c:	2b01      	cmp	r3, #1
 800134e:	dc05      	bgt.n	800135c <ili9341_spi_write_command_data+0x6e>
 8001350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001354:	4619      	mov	r1, r3
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff3f 	bl	80011da <ili9341_spi_slave_release>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_t *lcd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6858      	ldr	r0, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	891b      	ldrh	r3, [r3, #8]
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	f003 f8ea 	bl	8004550 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800137c:	20c8      	movs	r0, #200	; 0xc8
 800137e:	f001 fb99 	bl	8002ab4 <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6858      	ldr	r0, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	891b      	ldrh	r3, [r3, #8]
 800138a:	2201      	movs	r2, #1
 800138c:	4619      	mov	r1, r3
 800138e:	f003 f8df 	bl	8004550 <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(lcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fed8 	bl	8001148 <ili9341_spi_tft_release>
  ili9341_spi_touch_release(lcd);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fef5 	bl	8001188 <ili9341_spi_touch_release>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <ili9341_initialize>:

static void ili9341_initialize(ili9341_t *lcd)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b09f      	sub	sp, #124	; 0x7c
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
  ili9341_reset(lcd);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffd7 	bl	8001364 <ili9341_reset>
  ili9341_spi_tft_select(lcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff feb6 	bl	8001128 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 80013bc:	2201      	movs	r2, #1
 80013be:	f04f 31ff 	mov.w	r1, #4294967295
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff22 	bl	800120c <ili9341_spi_write_command>
  HAL_Delay(1000);
 80013c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013cc:	f001 fb72 	bl	8002ab4 <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 80013d0:	4a9d      	ldr	r2, [pc, #628]	; (8001648 <ili9341_initialize+0x2a0>)
 80013d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013da:	6018      	str	r0, [r3, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80013e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2305      	movs	r3, #5
 80013e8:	22cb      	movs	r2, #203	; 0xcb
 80013ea:	f04f 31ff 	mov.w	r1, #4294967295
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff7d 	bl	80012ee <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 80013f4:	4a95      	ldr	r2, [pc, #596]	; (800164c <ili9341_initialize+0x2a4>)
 80013f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	4611      	mov	r1, r2
 80013fe:	8019      	strh	r1, [r3, #0]
 8001400:	3302      	adds	r3, #2
 8001402:	0c12      	lsrs	r2, r2, #16
 8001404:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8001406:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2303      	movs	r3, #3
 800140e:	22cf      	movs	r2, #207	; 0xcf
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff6a 	bl	80012ee <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 800141a:	4a8d      	ldr	r2, [pc, #564]	; (8001650 <ili9341_initialize+0x2a8>)
 800141c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	4611      	mov	r1, r2
 8001424:	8019      	strh	r1, [r3, #0]
 8001426:	3302      	adds	r3, #2
 8001428:	0c12      	lsrs	r2, r2, #16
 800142a:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 800142c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2303      	movs	r3, #3
 8001434:	22e8      	movs	r2, #232	; 0xe8
 8001436:	f04f 31ff 	mov.w	r1, #4294967295
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff57 	bl	80012ee <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8001440:	2300      	movs	r3, #0
 8001442:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001446:	2300      	movs	r3, #0
 8001448:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ili9341_spi_write_command_data(lcd, issNONE,
 800144c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	22ea      	movs	r2, #234	; 0xea
 8001456:	f04f 31ff 	mov.w	r1, #4294967295
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff47 	bl	80012ee <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <ili9341_initialize+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	65bb      	str	r3, [r7, #88]	; 0x58
  ili9341_spi_write_command_data(lcd, issNONE,
 8001466:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2304      	movs	r3, #4
 800146e:	22ed      	movs	r2, #237	; 0xed
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff3a 	bl	80012ee <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 800147a:	2320      	movs	r3, #32
 800147c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  ili9341_spi_write_command_data(lcd, issNONE,
 8001480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	22f7      	movs	r2, #247	; 0xf7
 800148a:	f04f 31ff 	mov.w	r1, #4294967295
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff2d 	bl	80012ee <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8001494:	2323      	movs	r3, #35	; 0x23
 8001496:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  ili9341_spi_write_command_data(lcd, issNONE,
 800149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	22c0      	movs	r2, #192	; 0xc0
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff20 	bl	80012ee <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 80014ae:	2310      	movs	r3, #16
 80014b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  ili9341_spi_write_command_data(lcd, issNONE,
 80014b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	22c1      	movs	r2, #193	; 0xc1
 80014be:	f04f 31ff 	mov.w	r1, #4294967295
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff13 	bl	80012ee <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 80014c8:	4b63      	ldr	r3, [pc, #396]	; (8001658 <ili9341_initialize+0x2b0>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 80014d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	22c5      	movs	r2, #197	; 0xc5
 80014da:	f04f 31ff 	mov.w	r1, #4294967295
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff05 	bl	80012ee <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 80014e4:	2386      	movs	r3, #134	; 0x86
 80014e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 80014ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	22c7      	movs	r2, #199	; 0xc7
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fef8 	bl	80012ee <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 80014fe:	2348      	movs	r3, #72	; 0x48
 8001500:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	2236      	movs	r2, #54	; 0x36
 800150e:	f04f 31ff 	mov.w	r1, #4294967295
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff feeb 	bl	80012ee <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(lcd, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8001518:	2355      	movs	r3, #85	; 0x55
 800151a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 800151e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	223a      	movs	r2, #58	; 0x3a
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fede 	bl	80012ee <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8001532:	2300      	movs	r3, #0
 8001534:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001538:	2318      	movs	r3, #24
 800153a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  ili9341_spi_write_command_data(lcd, issNONE,
 800153e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2302      	movs	r3, #2
 8001546:	22b1      	movs	r2, #177	; 0xb1
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fece 	bl	80012ee <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8001552:	4a42      	ldr	r2, [pc, #264]	; (800165c <ili9341_initialize+0x2b4>)
 8001554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4611      	mov	r1, r2
 800155c:	8019      	strh	r1, [r3, #0]
 800155e:	3302      	adds	r3, #2
 8001560:	0c12      	lsrs	r2, r2, #16
 8001562:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8001564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2303      	movs	r3, #3
 800156c:	22b6      	movs	r2, #182	; 0xb6
 800156e:	f04f 31ff 	mov.w	r1, #4294967295
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff febb 	bl	80012ee <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 800157e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	22f2      	movs	r2, #242	; 0xf2
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff feae 	bl	80012ee <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(lcd, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 8001592:	2301      	movs	r3, #1
 8001594:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 8001598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	2226      	movs	r2, #38	; 0x26
 80015a2:	f04f 31ff 	mov.w	r1, #4294967295
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fea1 	bl	80012ee <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <ili9341_initialize+0x2b8>)
 80015ae:	f107 041c 	add.w	r4, r7, #28
 80015b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b4:	c407      	stmia	r4!, {r0, r1, r2}
 80015b6:	8023      	strh	r3, [r4, #0]
 80015b8:	3402      	adds	r4, #2
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	230f      	movs	r3, #15
 80015c6:	22e0      	movs	r2, #224	; 0xe0
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fe8e 	bl	80012ee <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <ili9341_initialize+0x2bc>)
 80015d4:	f107 040c 	add.w	r4, r7, #12
 80015d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015da:	c407      	stmia	r4!, {r0, r1, r2}
 80015dc:	8023      	strh	r3, [r4, #0]
 80015de:	3402      	adds	r4, #2
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	230f      	movs	r3, #15
 80015ec:	22e1      	movs	r2, #225	; 0xe1
 80015ee:	f04f 31ff 	mov.w	r1, #4294967295
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fe7b 	bl	80012ee <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 80015f8:	2211      	movs	r2, #17
 80015fa:	f04f 31ff 	mov.w	r1, #4294967295
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fe04 	bl	800120c <ili9341_spi_write_command>
  HAL_Delay(120);
 8001604:	2078      	movs	r0, #120	; 0x78
 8001606:	f001 fa55 	bl	8002ab4 <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 800160a:	2229      	movs	r2, #41	; 0x29
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fdfb 	bl	800120c <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f993 301a 	ldrsb.w	r3, [r3, #26]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f853 	bl	80016c8 <ili9341_screen_rotation>
 8001622:	4603      	mov	r3, r0
 8001624:	723b      	strb	r3, [r7, #8]
  ili9341_spi_write_command_data(lcd, issNONE,
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2301      	movs	r3, #1
 800162e:	2236      	movs	r2, #54	; 0x36
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fe5a 	bl	80012ee <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(lcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fd84 	bl	8001148 <ili9341_spi_tft_release>
}
 8001640:	bf00      	nop
 8001642:	3774      	adds	r7, #116	; 0x74
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	08007d1c 	.word	0x08007d1c
 800164c:	08007d24 	.word	0x08007d24
 8001650:	08007d28 	.word	0x08007d28
 8001654:	08007d2c 	.word	0x08007d2c
 8001658:	08007d30 	.word	0x08007d30
 800165c:	08007d34 	.word	0x08007d34
 8001660:	08007d38 	.word	0x08007d38
 8001664:	08007d48 	.word	0x08007d48

08001668 <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d011      	beq.n	800169e <ili9341_screen_size+0x36>
 800167a:	2b03      	cmp	r3, #3
 800167c:	dc03      	bgt.n	8001686 <ili9341_screen_size+0x1e>
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <ili9341_screen_size+0x26>
 8001682:	2b02      	cmp	r3, #2
 8001684:	d007      	beq.n	8001696 <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <ili9341_screen_size+0x58>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	e00a      	b.n	80016a4 <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <ili9341_screen_size+0x5c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	e006      	b.n	80016a4 <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <ili9341_screen_size+0x58>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e002      	b.n	80016a4 <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <ili9341_screen_size+0x5c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	61fb      	str	r3, [r7, #28]
  }
}
 80016a4:	2300      	movs	r3, #0
 80016a6:	8bba      	ldrh	r2, [r7, #28]
 80016a8:	f362 030f 	bfi	r3, r2, #0, #16
 80016ac:	8bfa      	ldrh	r2, [r7, #30]
 80016ae:	f362 431f 	bfi	r3, r2, #16, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	08007d58 	.word	0x08007d58
 80016c4:	08007d5c 	.word	0x08007d5c

080016c8 <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d00b      	beq.n	80016f2 <ili9341_screen_rotation+0x2a>
 80016da:	2b03      	cmp	r3, #3
 80016dc:	dc03      	bgt.n	80016e6 <ili9341_screen_rotation+0x1e>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d003      	beq.n	80016ea <ili9341_screen_rotation+0x22>
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 80016e6:	2348      	movs	r3, #72	; 0x48
 80016e8:	e004      	b.n	80016f4 <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 80016ea:	23e8      	movs	r3, #232	; 0xe8
 80016ec:	e002      	b.n	80016f4 <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 80016ee:	2388      	movs	r3, #136	; 0x88
 80016f0:	e000      	b.n	80016f4 <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 80016f2:	2328      	movs	r3, #40	; 0x28
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b1f      	cmp	r3, #31
 800170e:	d906      	bls.n	800171e <glyph_index+0x1e>
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b7e      	cmp	r3, #126	; 0x7e
 8001714:	d803      	bhi.n	800171e <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3b20      	subs	r3, #32
 800171a:	b2db      	uxtb	r3, r3
 800171c:	e000      	b.n	8001720 <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(ili9341_t *lcd,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	4608      	mov	r0, r1
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	4603      	mov	r3, r0
 800173c:	817b      	strh	r3, [r7, #10]
 800173e:	460b      	mov	r3, r1
 8001740:	813b      	strh	r3, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(lcd);
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff fcee 	bl	8001128 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 800174c:	897b      	ldrh	r3, [r7, #10]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	b29b      	uxth	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	753b      	strb	r3, [r7, #20]
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	757b      	strb	r3, [r7, #21]
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	75bb      	strb	r3, [r7, #22]
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(lcd, issNONE,
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2304      	movs	r3, #4
 8001774:	222a      	movs	r2, #42	; 0x2a
 8001776:	f04f 31ff 	mov.w	r1, #4294967295
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff fdb7 	bl	80012ee <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b29b      	uxth	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	743b      	strb	r3, [r7, #16]
 800178a:	893b      	ldrh	r3, [r7, #8]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	747b      	strb	r3, [r7, #17]
 8001790:	8c3b      	ldrh	r3, [r7, #32]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	74bb      	strb	r3, [r7, #18]
 800179a:	8c3b      	ldrh	r3, [r7, #32]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(lcd, issNONE,
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2304      	movs	r3, #4
 80017a8:	222b      	movs	r2, #43	; 0x2b
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff fd9d 	bl	80012ee <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 80017b4:	222c      	movs	r2, #44	; 0x2c
 80017b6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fd26 	bl	800120c <ili9341_spi_write_command>

  ili9341_spi_tft_release(lcd);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fcc1 	bl	8001148 <ili9341_spi_tft_release>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_t *lcd)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  if (NULL == lcd)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80017dc:	e000      	b.n	80017e0 <ili9341_transmit_wait+0x12>
    { continue; }
 80017de:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fd09 	bl	80041fe <HAL_DMA_GetState>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d0f5      	beq.n	80017de <ili9341_transmit_wait+0x10>
 80017f2:	e000      	b.n	80017f6 <ili9341_transmit_wait+0x28>
    { return; }
 80017f4:	bf00      	nop
}
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_t *lcd, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	461a      	mov	r2, r3
 8001808:	460b      	mov	r3, r1
 800180a:	817b      	strh	r3, [r7, #10]
 800180c:	4613      	mov	r3, r2
 800180e:	727b      	strb	r3, [r7, #9]
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <ili9341_transmit_color+0x42>
 8001816:	897b      	ldrh	r3, [r7, #10]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <ili9341_transmit_color+0x42>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	897a      	ldrh	r2, [r7, #10]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f004 fb3a 	bl	8005ea4 <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 8001830:	7a7b      	ldrb	r3, [r7, #9]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(lcd); }
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff ffc9 	bl	80017ce <ili9341_transmit_wait>
 800183c:	e000      	b.n	8001840 <ili9341_transmit_color+0x44>
    { return; }
 800183e:	bf00      	nop
}
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b088      	sub	sp, #32
 800184a:	af02      	add	r7, sp, #8
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	4608      	mov	r0, r1
 8001850:	4611      	mov	r1, r2
 8001852:	461a      	mov	r2, r3
 8001854:	4603      	mov	r3, r0
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	460b      	mov	r3, r1
 800185a:	813b      	strh	r3, [r7, #8]
 800185c:	4613      	mov	r3, r2
 800185e:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, NULL, NULL)))
 8001860:	1dba      	adds	r2, r7, #6
 8001862:	f107 0108 	add.w	r1, r7, #8
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 fb0c 	bl	8001e8a <ili9341_clip_rect>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d03a      	beq.n	80018ee <ili9341_draw_pixel+0xa8>
    { return; }

  uint16_t color_le = __LEu16(&color);
 8001878:	f107 030a 	add.w	r3, r7, #10
 800187c:	3301      	adds	r3, #1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b21a      	sxth	r2, r3
 8001882:	f107 030a 	add.w	r3, r7, #10
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21b      	sxth	r3, r3
 8001890:	b29b      	uxth	r3, r3
 8001892:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 8001894:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001898:	b299      	uxth	r1, r3
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	b298      	uxth	r0, r3
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f7ff ff37 	bl	800172c <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(lcd);
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fc32 	bl	8001128 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6958      	ldr	r0, [r3, #20]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8b1b      	ldrh	r3, [r3, #24]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4619      	mov	r1, r3
 80018d0:	f002 fe3e 	bl	8004550 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f107 0116 	add.w	r1, r7, #22
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	2202      	movs	r2, #2
 80018e2:	f004 f96a 	bl	8005bba <HAL_SPI_Transmit>

  ili9341_spi_tft_release(lcd);
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff fc2e 	bl	8001148 <ili9341_spi_tft_release>
 80018ec:	e000      	b.n	80018f0 <ili9341_draw_pixel+0xaa>
    { return; }
 80018ee:	bf00      	nop
}
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <ili9341_draw_line>:

void ili9341_draw_line(ili9341_t *lcd, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80018f6:	b590      	push	{r4, r7, lr}
 80018f8:	b08d      	sub	sp, #52	; 0x34
 80018fa:	af02      	add	r7, sp, #8
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	4608      	mov	r0, r1
 8001900:	4611      	mov	r1, r2
 8001902:	461a      	mov	r2, r3
 8001904:	4603      	mov	r3, r0
 8001906:	817b      	strh	r3, [r7, #10]
 8001908:	460b      	mov	r3, r1
 800190a:	813b      	strh	r3, [r7, #8]
 800190c:	4613      	mov	r3, r2
 800190e:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8001910:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 800191a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 8001924:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d117      	bne.n	800195c <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 800192c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80c7 	beq.w	8001ac4 <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 8001936:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfb8      	it	lt
 800193e:	425b      	neglt	r3, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001946:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2301      	movs	r3, #1
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4603      	mov	r3, r0
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f8bb 	bl	8001ad0 <ili9341_fill_rect>
    return;
 800195a:	e0b6      	b.n	8001aca <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 800195c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d117      	bne.n	8001994 <ili9341_draw_line+0x9e>
    // horizontal line
    if (0 == dx)
 8001964:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ad 	beq.w	8001ac8 <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 800196e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001972:	2b00      	cmp	r3, #0
 8001974:	bfb8      	it	lt
 8001976:	425b      	neglt	r3, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800197e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001982:	8979      	ldrh	r1, [r7, #10]
 8001984:	2401      	movs	r4, #1
 8001986:	9401      	str	r4, [sp, #4]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4603      	mov	r3, r0
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f89f 	bl	8001ad0 <ili9341_fill_rect>
    return;
 8001992:	e09a      	b.n	8001aca <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8001994:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001998:	2b00      	cmp	r3, #0
 800199a:	bfb8      	it	lt
 800199c:	425b      	neglt	r3, r3
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bfb8      	it	lt
 80019a8:	425b      	neglt	r3, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	429a      	cmp	r2, r3
 80019ae:	bf8c      	ite	hi
 80019b0:	2301      	movhi	r3, #1
 80019b2:	2300      	movls	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 80019b8:	7efb      	ldrb	r3, [r7, #27]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 80019be:	893b      	ldrh	r3, [r7, #8]
 80019c0:	833b      	strh	r3, [r7, #24]
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	813b      	strh	r3, [r7, #8]
 80019c6:	8b3b      	ldrh	r3, [r7, #24]
 80019c8:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 80019ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80019cc:	82fb      	strh	r3, [r7, #22]
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  if (x0 > x1) {
 80019d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019da:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80019de:	429a      	cmp	r2, r3
 80019e0:	dd0b      	ble.n	80019fa <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 80019e2:	893b      	ldrh	r3, [r7, #8]
 80019e4:	82bb      	strh	r3, [r7, #20]
 80019e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80019e8:	813b      	strh	r3, [r7, #8]
 80019ea:	8abb      	ldrh	r3, [r7, #20]
 80019ec:	873b      	strh	r3, [r7, #56]	; 0x38
    __SWAP(int16_t, y0, y1);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	827b      	strh	r3, [r7, #18]
 80019f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019f4:	80fb      	strh	r3, [r7, #6]
 80019f6:	8a7b      	ldrh	r3, [r7, #18]
 80019f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  dx = x1 - x0;
 80019fa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80019fc:	893b      	ldrh	r3, [r7, #8]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 8001a04:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	425b      	neglt	r3, r3
 8001a14:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 8001a16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a1a:	105b      	asrs	r3, r3, #1
 8001a1c:	847b      	strh	r3, [r7, #34]	; 0x22

  if (y0 < y1)
 8001a1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a22:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001a26:	429a      	cmp	r2, r3
 8001a28:	da02      	bge.n	8001a30 <ili9341_draw_line+0x13a>
    { step = 1; }
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	843b      	strh	r3, [r7, #32]
 8001a2e:	e042      	b.n	8001ab6 <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 8001a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a34:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 8001a36:	e03e      	b.n	8001ab6 <ili9341_draw_line+0x1c0>

    if (is_steep)
 8001a38:	7efb      	ldrb	r3, [r7, #27]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a42:	893b      	ldrh	r3, [r7, #8]
 8001a44:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001a46:	e003      	b.n	8001a50 <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 8001a48:	893b      	ldrh	r3, [r7, #8]
 8001a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	84bb      	strh	r3, [r7, #36]	; 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 8001a50:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db17      	blt.n	8001a88 <ili9341_draw_line+0x192>
 8001a58:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	8b92      	ldrh	r2, [r2, #28]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	dc11      	bgt.n	8001a88 <ili9341_draw_line+0x192>
 8001a64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0d      	blt.n	8001a88 <ili9341_draw_line+0x192>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 8001a6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	8bd2      	ldrh	r2, [r2, #30]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	dc07      	bgt.n	8001a88 <ili9341_draw_line+0x192>
      ili9341_draw_pixel(lcd, color, x, y);
 8001a78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001a7c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001a80:	8979      	ldrh	r1, [r7, #10]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff fedf 	bl	8001846 <ili9341_draw_pixel>
    }

    err -= dy;
 8001a88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a8a:	8bbb      	ldrh	r3, [r7, #28]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	847b      	strh	r3, [r7, #34]	; 0x22
    if (err < 0) {
 8001a92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da09      	bge.n	8001aae <ili9341_draw_line+0x1b8>
      y0 += step;
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	8c3b      	ldrh	r3, [r7, #32]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	80fb      	strh	r3, [r7, #6]
      err += dx;
 8001aa4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001aa6:	8bfb      	ldrh	r3, [r7, #30]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ++x0;
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 8001ab6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001aba:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	ddba      	ble.n	8001a38 <ili9341_draw_line+0x142>
 8001ac2:	e002      	b.n	8001aca <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8001ac4:	bf00      	nop
 8001ac6:	e000      	b.n	8001aca <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8001ac8:	bf00      	nop
  }
}
 8001aca:	372c      	adds	r7, #44	; 0x2c
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <ili9341_fill_rect>:
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
}

void ili9341_fill_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b08d      	sub	sp, #52	; 0x34
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	4608      	mov	r0, r1
 8001ada:	4611      	mov	r1, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	813b      	strh	r3, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8001aea:	1dba      	adds	r2, r7, #6
 8001aec:	f107 0108 	add.w	r1, r7, #8
 8001af0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f9c5 	bl	8001e8a <ili9341_clip_rect>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06f      	beq.n	8001be6 <ili9341_fill_rect+0x116>
    { return; }

  uint32_t num_pixels = w * h;
 8001b06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b08:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d902      	bls.n	8001b26 <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8001b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b24:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 8001b26:	f107 030a 	add.w	r3, r7, #10
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	f107 030a 	add.w	r3, r7, #10
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 8001b40:	2300      	movs	r3, #0
 8001b42:	83fb      	strh	r3, [r7, #30]
 8001b44:	e007      	b.n	8001b56 <ili9341_fill_rect+0x86>
    { spi_tx_block[i] = color_le; }
 8001b46:	8bfb      	ldrh	r3, [r7, #30]
 8001b48:	4929      	ldr	r1, [pc, #164]	; (8001bf0 <ili9341_fill_rect+0x120>)
 8001b4a:	8a7a      	ldrh	r2, [r7, #18]
 8001b4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8001b50:	8bfb      	ldrh	r3, [r7, #30]
 8001b52:	3301      	adds	r3, #1
 8001b54:	83fb      	strh	r3, [r7, #30]
 8001b56:	8bfb      	ldrh	r3, [r7, #30]
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8f3      	bhi.n	8001b46 <ili9341_fill_rect+0x76>

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8001b5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b62:	b299      	uxth	r1, r3
 8001b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b68:	b298      	uxth	r0, r3
 8001b6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b72:	4413      	add	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29c      	uxth	r4, r3
 8001b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b82:	4413      	add	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff fdcb 	bl	800172c <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fac6 	bl	8001128 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6958      	ldr	r0, [r3, #20]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8b1b      	ldrh	r3, [r3, #24]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f002 fcd2 	bl	8004550 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8001bac:	e014      	b.n	8001bd8 <ili9341_fill_rect+0x108>
    curr_wc = rect_wc;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d901      	bls.n	8001bbe <ili9341_fill_rect+0xee>
      { curr_wc = block_wc; }
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <ili9341_fill_rect+0x120>)
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff fe16 	bl	80017fc <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (rect_wc > 0) {
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e7      	bne.n	8001bae <ili9341_fill_rect+0xde>
  }

  ili9341_spi_tft_release(lcd);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fab2 	bl	8001148 <ili9341_spi_tft_release>
 8001be4:	e000      	b.n	8001be8 <ili9341_fill_rect+0x118>
    { return; }
 8001be6:	bf00      	nop
}
 8001be8:	372c      	adds	r7, #44	; 0x2c
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001410 	.word	0x20001410

08001bf4 <ili9341_fill_screen>:
  ili9341_draw_line(lcd, color, x, y - r, x, (y - r) + (2 * r) + 1);
  ili9341_fill_quarter_circle(lcd, color, x, y, r, 3, 0);
}

void ili9341_fill_screen(ili9341_t *lcd, ili9341_color_t color)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(lcd, color,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	8b9b      	ldrh	r3, [r3, #28]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	8bd2      	ldrh	r2, [r2, #30]
 8001c08:	8879      	ldrh	r1, [r7, #2]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff5c 	bl	8001ad0 <ili9341_fill_rect>
      0, 0, lcd->screen_size.width, lcd->screen_size.height);
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <ili9341_draw_char>:
  ili9341_spi_tft_release(lcd);
  ili9341_transmit_wait(lcd);
}

void ili9341_draw_char(ili9341_t *lcd, ili9341_text_attr_t attr, char ch)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b093      	sub	sp, #76	; 0x4c
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	4638      	mov	r0, r7
 8001c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 8001c2e:	893b      	ldrh	r3, [r7, #8]
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 8001c4a:	f107 0016 	add.w	r0, r7, #22
 8001c4e:	f107 0218 	add.w	r2, r7, #24
 8001c52:	f107 011a 	add.w	r1, r7, #26
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f913 	bl	8001e8a <ili9341_clip_rect>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80bc 	beq.w	8001de4 <ili9341_draw_char+0x1c4>
    { return; }

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rect_wc    = num_pixels;
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8001c80:	463b      	mov	r3, r7
 8001c82:	3304      	adds	r3, #4
 8001c84:	3301      	adds	r3, #1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d902      	bls.n	8001cc6 <ili9341_draw_char+0xa6>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 8001cc6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fd18 	bl	8001700 <glyph_index>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cda:	e03d      	b.n	8001d58 <ili9341_draw_char+0x138>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	7849      	ldrb	r1, [r1, #1]
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cee:	440b      	add	r3, r1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	885b      	ldrh	r3, [r3, #2]
 8001cf6:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfc:	e023      	b.n	8001d46 <ili9341_draw_char+0x126>
      if ((gl << xi) & 0x8000)
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <ili9341_draw_char+0x108>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d16:	fb03 f202 	mul.w	r2, r3, r2
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4933      	ldr	r1, [pc, #204]	; (8001dec <ili9341_draw_char+0x1cc>)
 8001d20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001d26:	e00b      	b.n	8001d40 <ili9341_draw_char+0x120>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	fb03 f202 	mul.w	r2, r3, r2
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	4413      	add	r3, r2
 8001d38:	492c      	ldr	r1, [pc, #176]	; (8001dec <ili9341_draw_char+0x1cc>)
 8001d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d42:	3301      	adds	r3, #1
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d3d5      	bcc.n	8001cfe <ili9341_draw_char+0xde>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	3301      	adds	r3, #1
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d3bb      	bcc.n	8001cdc <ili9341_draw_char+0xbc>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(lcd,
 8001d64:	8939      	ldrh	r1, [r7, #8]
 8001d66:	8978      	ldrh	r0, [r7, #10]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 8001d68:	893a      	ldrh	r2, [r7, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 8001d78:	897a      	ldrh	r2, [r7, #10]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff fccc 	bl	800172c <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff f9c7 	bl	8001128 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6958      	ldr	r0, [r3, #20]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8b1b      	ldrh	r3, [r3, #24]
 8001da2:	2201      	movs	r2, #1
 8001da4:	4619      	mov	r1, r3
 8001da6:	f002 fbd3 	bl	8004550 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8001daa:	e014      	b.n	8001dd6 <ili9341_draw_char+0x1b6>
    curr_wc = rect_wc;
 8001dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (curr_wc > block_wc)
 8001db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d901      	bls.n	8001dbc <ili9341_draw_char+0x19c>
      { curr_wc = block_wc; }
 8001db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	b299      	uxth	r1, r3
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <ili9341_draw_char+0x1cc>)
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fd17 	bl	80017fc <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8001dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (rect_wc > 0) {
 8001dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e7      	bne.n	8001dac <ili9341_draw_char+0x18c>
  }

  ili9341_spi_tft_release(lcd);
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff f9b3 	bl	8001148 <ili9341_spi_tft_release>
 8001de2:	e000      	b.n	8001de6 <ili9341_draw_char+0x1c6>
    { return; }
 8001de4:	bf00      	nop
}
 8001de6:	3744      	adds	r7, #68	; 0x44
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	20001410 	.word	0x20001410

08001df0 <ili9341_draw_string>:

void ili9341_draw_string(ili9341_t *lcd, ili9341_text_attr_t attr, char str[])
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	4638      	mov	r0, r7
 8001dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int16_t curr_x = attr.origin_x;
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	82fb      	strh	r3, [r7, #22]
  int16_t curr_y = attr.origin_y;
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	82bb      	strh	r3, [r7, #20]
  int16_t start_x = attr.origin_x;
 8001e06:	893b      	ldrh	r3, [r7, #8]
 8001e08:	827b      	strh	r3, [r7, #18]

  while ('\0' != *str) {
 8001e0a:	e036      	b.n	8001e7a <ili9341_draw_string+0x8a>
    if('\r' == *str)
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b0d      	cmp	r3, #13
 8001e12:	d102      	bne.n	8001e1a <ili9341_draw_string+0x2a>
    {
      curr_x = start_x;
 8001e14:	8a7b      	ldrh	r3, [r7, #18]
 8001e16:	82fb      	strh	r3, [r7, #22]
 8001e18:	e02c      	b.n	8001e74 <ili9341_draw_string+0x84>
    }
    else if('\n' == *str)
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	d109      	bne.n	8001e36 <ili9341_draw_string+0x46>
    {
      curr_y += attr.font->height;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	8abb      	ldrh	r3, [r7, #20]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	82bb      	strh	r3, [r7, #20]
      curr_x = start_x;
 8001e30:	8a7b      	ldrh	r3, [r7, #18]
 8001e32:	82fb      	strh	r3, [r7, #22]
 8001e34:	e01e      	b.n	8001e74 <ili9341_draw_string+0x84>
    }
    else
    {
      if ( (curr_x > lcd->screen_size.width) ||
 8001e36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	8b92      	ldrh	r2, [r2, #28]
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	dc1f      	bgt.n	8001e82 <ili9341_draw_string+0x92>
          (curr_y > lcd->screen_size.height) )
 8001e42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	8bd2      	ldrh	r2, [r2, #30]
      if ( (curr_x > lcd->screen_size.width) ||
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	dc19      	bgt.n	8001e82 <ili9341_draw_string+0x92>
        { break; }

      attr.origin_x = curr_x;
 8001e4e:	8afb      	ldrh	r3, [r7, #22]
 8001e50:	813b      	strh	r3, [r7, #8]
      attr.origin_y = curr_y;
 8001e52:	8abb      	ldrh	r3, [r7, #20]
 8001e54:	817b      	strh	r3, [r7, #10]

      ili9341_draw_char(lcd, attr, *str);
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff fedd 	bl	8001c20 <ili9341_draw_char>

      curr_x += attr.font->width;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	8afb      	ldrh	r3, [r7, #22]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	82fb      	strh	r3, [r7, #22]
    }
    ++str;
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	3301      	adds	r3, #1
 8001e78:	623b      	str	r3, [r7, #32]
  while ('\0' != *str) {
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1c4      	bne.n	8001e0c <ili9341_draw_string+0x1c>
  }
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <ili9341_clip_rect+0x1a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e089      	b.n	8001fbc <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8b9b      	ldrh	r3, [r3, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	da07      	bge.n	8001ec8 <ili9341_clip_rect+0x3e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8bdb      	ldrh	r3, [r3, #30]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	db01      	blt.n	8001ecc <ili9341_clip_rect+0x42>
    { return ibFalse; }
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e077      	b.n	8001fbc <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <ili9341_clip_rect+0x62>
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <ili9341_clip_rect+0x5e>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <ili9341_clip_rect+0x62>
      { return ibFalse; }
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e067      	b.n	8001fbc <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	da0f      	bge.n	8001f16 <ili9341_clip_rect+0x8c>
    if (NULL != w)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <ili9341_clip_rect+0x86>
      { *w -= *x; }
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	801a      	strh	r2, [r3, #0]
    *x = 0;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da0f      	bge.n	8001f40 <ili9341_clip_rect+0xb6>
    if (NULL != h)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	801a      	strh	r2, [r3, #0]
    *y = 0;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d039      	beq.n	8001fba <ili9341_clip_rect+0x130>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d036      	beq.n	8001fba <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	461a      	mov	r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	8b92      	ldrh	r2, [r2, #28]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	dd09      	ble.n	8001f76 <ili9341_clip_rect+0xec>
      { *w = lcd->screen_size.width - *x; }
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8b9a      	ldrh	r2, [r3, #28]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	8bd2      	ldrh	r2, [r2, #30]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dd09      	ble.n	8001fa0 <ili9341_clip_rect+0x116>
      { *h = lcd->screen_size.height - *y; }
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8bda      	ldrh	r2, [r3, #30]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <ili9341_clip_rect+0x12a>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <ili9341_clip_rect+0x12a>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <ili9341_clip_rect+0x12c>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e000      	b.n	8001fbc <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fcc:	f000 fcfd 	bl	80029ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd0:	f000 f820 	bl	8002014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f000 f9c2 	bl	800235c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd8:	f000 f99a 	bl	8002310 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001fdc:	f000 f968 	bl	80022b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001fe0:	f000 f87a 	bl	80020d8 <MX_ADC1_Init>
  MX_TIM16_Init();
 8001fe4:	f000 f93e 	bl	8002264 <MX_TIM16_Init>
  MX_OPAMP1_Init();
 8001fe8:	f000 f8da 	bl	80021a0 <MX_OPAMP1_Init>
  MX_SPI1_Init();
 8001fec:	f000 f8fc 	bl	80021e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  init_tasks(&hspi1, &htim16, &hadc1, &huart2);
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <main+0x3c>)
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <main+0x40>)
 8001ff4:	4905      	ldr	r1, [pc, #20]	; (800200c <main+0x44>)
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <main+0x48>)
 8001ff8:	f000 fca4 	bl	8002944 <init_tasks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    manage_tasks();
 8001ffc:	f000 fcb6 	bl	800296c <manage_tasks>
 8002000:	e7fc      	b.n	8001ffc <main+0x34>
 8002002:	bf00      	nop
 8002004:	20001de8 	.word	0x20001de8
 8002008:	20001c10 	.word	0x20001c10
 800200c:	20001d9c 	.word	0x20001d9c
 8002010:	20001cf0 	.word	0x20001cf0

08002014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b096      	sub	sp, #88	; 0x58
 8002018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	2244      	movs	r2, #68	; 0x44
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f005 fa78 	bl	8007518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002028:	463b      	mov	r3, r7
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002036:	f44f 7000 	mov.w	r0, #512	; 0x200
 800203a:	f002 fb95 	bl	8004768 <HAL_PWREx_ControlVoltageScaling>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002044:	f000 f9e2 	bl	800240c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002048:	f002 fb70 	bl	800472c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <SystemClock_Config+0xc0>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <SystemClock_Config+0xc0>)
 8002054:	f023 0318 	bic.w	r3, r3, #24
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800205c:	2314      	movs	r3, #20
 800205e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002060:	2301      	movs	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002064:	2301      	movs	r3, #1
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800206c:	2360      	movs	r3, #96	; 0x60
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002070:	2302      	movs	r3, #2
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002074:	2301      	movs	r3, #1
 8002076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800207c:	2310      	movs	r3, #16
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002080:	2307      	movs	r3, #7
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002084:	2302      	movs	r3, #2
 8002086:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002088:	2302      	movs	r3, #2
 800208a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fbbf 	bl	8004814 <HAL_RCC_OscConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800209c:	f000 f9b6 	bl	800240c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a0:	230f      	movs	r3, #15
 80020a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a4:	2303      	movs	r3, #3
 80020a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 ffbf 	bl	800503c <HAL_RCC_ClockConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020c4:	f000 f9a2 	bl	800240c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020c8:	f003 fbd2 	bl	8005870 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020cc:	bf00      	nop
 80020ce:	3758      	adds	r7, #88	; 0x58
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <MX_ADC1_Init+0xbc>)
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <MX_ADC1_Init+0xc0>)
 80020f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <MX_ADC1_Init+0xbc>)
 80020f6:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 80020fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <MX_ADC1_Init+0xbc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <MX_ADC1_Init+0xbc>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002110:	2204      	movs	r2, #4
 8002112:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002116:	2200      	movs	r2, #0
 8002118:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <MX_ADC1_Init+0xbc>)
 800211c:	2201      	movs	r2, #1
 800211e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002122:	2201      	movs	r2, #1
 8002124:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002136:	2200      	movs	r2, #0
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <MX_ADC1_Init+0xbc>)
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002144:	2200      	movs	r2, #0
 8002146:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <MX_ADC1_Init+0xbc>)
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002150:	4810      	ldr	r0, [pc, #64]	; (8002194 <MX_ADC1_Init+0xbc>)
 8002152:	f000 fe9b 	bl	8002e8c <HAL_ADC_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800215c:	f000 f956 	bl	800240c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_ADC1_Init+0xc4>)
 8002162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002164:	2306      	movs	r3, #6
 8002166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002168:	2307      	movs	r3, #7
 800216a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800216c:	237f      	movs	r3, #127	; 0x7f
 800216e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002170:	2304      	movs	r3, #4
 8002172:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002178:	463b      	mov	r3, r7
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_ADC1_Init+0xbc>)
 800217e:	f001 f869 	bl	8003254 <HAL_ADC_ConfigChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002188:	f000 f940 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20001c10 	.word	0x20001c10
 8002198:	50040000 	.word	0x50040000
 800219c:	2a000400 	.word	0x2a000400

080021a0 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <MX_OPAMP1_Init+0x44>)
 80021a8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021b0:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021b4:	220c      	movs	r2, #12
 80021b6:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_OPAMP1_Init+0x40>)
 80021cc:	f002 f9d8 	bl	8004580 <HAL_OPAMP_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 80021d6:	f000 f919 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20001cbc 	.word	0x20001cbc
 80021e4:	40007800 	.word	0x40007800

080021e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_SPI1_Init+0x74>)
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <MX_SPI1_Init+0x78>)
 80021f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_SPI1_Init+0x74>)
 80021f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <MX_SPI1_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_SPI1_Init+0x74>)
 8002202:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002206:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_SPI1_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_SPI1_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_SPI1_Init+0x74>)
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_SPI1_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_SPI1_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_SPI1_Init+0x74>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_SPI1_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_SPI1_Init+0x74>)
 8002236:	2207      	movs	r2, #7
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_SPI1_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_SPI1_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_SPI1_Init+0x74>)
 8002248:	f003 fc14 	bl	8005a74 <HAL_SPI_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002252:	f000 f8db 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20001cf0 	.word	0x20001cf0
 8002260:	40013000 	.word	0x40013000

08002264 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_TIM16_Init+0x44>)
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <MX_TIM16_Init+0x48>)
 800226c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32 - 1;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_TIM16_Init+0x44>)
 8002270:	221f      	movs	r2, #31
 8002272:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_TIM16_Init+0x44>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8000 - 1;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_TIM16_Init+0x44>)
 800227c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002280:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_TIM16_Init+0x44>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <MX_TIM16_Init+0x44>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_TIM16_Init+0x44>)
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_TIM16_Init+0x44>)
 8002296:	f004 f8f9 	bl	800648c <HAL_TIM_Base_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80022a0:	f000 f8b4 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20001d9c 	.word	0x20001d9c
 80022ac:	40014400 	.word	0x40014400

080022b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <MX_USART2_UART_Init+0x5c>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022f4:	f004 fb22 	bl	800693c <HAL_UART_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022fe:	f000 f885 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20001de8 	.word	0x20001de8
 800230c:	40004400 	.word	0x40004400

08002310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <MX_DMA_Init+0x48>)
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <MX_DMA_Init+0x48>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6493      	str	r3, [r2, #72]	; 0x48
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <MX_DMA_Init+0x48>)
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	200b      	movs	r0, #11
 8002334:	f001 fd65 	bl	8003e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002338:	200b      	movs	r0, #11
 800233a:	f001 fd7e 	bl	8003e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	200d      	movs	r0, #13
 8002344:	f001 fd5d 	bl	8003e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002348:	200d      	movs	r0, #13
 800234a:	f001 fd76 	bl	8003e3a <HAL_NVIC_EnableIRQ>

}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <MX_GPIO_Init+0xa8>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <MX_GPIO_Init+0xa8>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <MX_GPIO_Init+0xa8>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <MX_GPIO_Init+0xa8>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <MX_GPIO_Init+0xa8>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_GPIO_Init+0xa8>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_GPIO_Init+0xa8>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <MX_GPIO_Init+0xa8>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_GPIO_Init+0xa8>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LED_Pin|DC_Pin|RESET_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	21c9      	movs	r1, #201	; 0xc9
 80023be:	4812      	ldr	r0, [pc, #72]	; (8002408 <MX_GPIO_Init+0xac>)
 80023c0:	f002 f8c6 	bl	8004550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 80023c4:	2341      	movs	r3, #65	; 0x41
 80023c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4619      	mov	r1, r3
 80023da:	480b      	ldr	r0, [pc, #44]	; (8002408 <MX_GPIO_Init+0xac>)
 80023dc:	f001 ff4e 	bl	800427c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RESET_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin;
 80023e0:	2388      	movs	r3, #136	; 0x88
 80023e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	4619      	mov	r1, r3
 80023f6:	4804      	ldr	r0, [pc, #16]	; (8002408 <MX_GPIO_Init+0xac>)
 80023f8:	f001 ff40 	bl	800427c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023fc:	bf00      	nop
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	48000400 	.word	0x48000400

0800240c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002410:	b672      	cpsid	i
}
 8002412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002414:	e7fe      	b.n	8002414 <Error_Handler+0x8>
	...

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_MspInit+0x44>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_MspInit+0x44>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6613      	str	r3, [r2, #96]	; 0x60
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_MspInit+0x44>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_MspInit+0x44>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_MspInit+0x44>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_MspInit+0x44>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b09e      	sub	sp, #120	; 0x78
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2254      	movs	r2, #84	; 0x54
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f005 f849 	bl	8007518 <memset>
  if(hadc->Instance==ADC1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <HAL_ADC_MspInit+0x118>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d16e      	bne.n	800256e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002494:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002496:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800249a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800249c:	2301      	movs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80024a4:	2310      	movs	r3, #16
 80024a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80024a8:	2307      	movs	r3, #7
 80024aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80024b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 ffe0 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80024ca:	f7ff ff9f 	bl	800240c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_ADC_MspInit+0x11c>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_ADC_MspInit+0x11c>)
 80024d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_ADC_MspInit+0x11c>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_ADC_MspInit+0x11c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_ADC_MspInit+0x11c>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_ADC_MspInit+0x11c>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024fe:	2320      	movs	r3, #32
 8002500:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002502:	230b      	movs	r3, #11
 8002504:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f001 feb2 	bl	800427c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_ADC_MspInit+0x120>)
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_ADC_MspInit+0x124>)
 800251c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_ADC_MspInit+0x120>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800253c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002544:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002548:	2220      	movs	r2, #32
 800254a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_ADC_MspInit+0x120>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002552:	480b      	ldr	r0, [pc, #44]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002554:	f001 fc8c 	bl	8003e70 <HAL_DMA_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800255e:	f7ff ff55 	bl	800240c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a06      	ldr	r2, [pc, #24]	; (8002580 <HAL_ADC_MspInit+0x120>)
 8002566:	64da      	str	r2, [r3, #76]	; 0x4c
 8002568:	4a05      	ldr	r2, [pc, #20]	; (8002580 <HAL_ADC_MspInit+0x120>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3778      	adds	r7, #120	; 0x78
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	50040000 	.word	0x50040000
 800257c:	40021000 	.word	0x40021000
 8002580:	20001c74 	.word	0x20001c74
 8002584:	40020008 	.word	0x40020008

08002588 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_OPAMP_MspInit+0x74>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d124      	bne.n	80025f4 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_OPAMP_MspInit+0x78>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	4a14      	ldr	r2, [pc, #80]	; (8002600 <HAL_OPAMP_MspInit+0x78>)
 80025b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_OPAMP_MspInit+0x78>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_OPAMP_MspInit+0x78>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_OPAMP_MspInit+0x78>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_OPAMP_MspInit+0x78>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80025da:	2309      	movs	r3, #9
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025de:	2303      	movs	r3, #3
 80025e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f0:	f001 fe44 	bl	800427c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3728      	adds	r7, #40	; 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40007800 	.word	0x40007800
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a34      	ldr	r2, [pc, #208]	; (80026f4 <HAL_SPI_MspInit+0xf0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d162      	bne.n	80026ec <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002626:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_SPI_MspInit+0xf4>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	4a33      	ldr	r2, [pc, #204]	; (80026f8 <HAL_SPI_MspInit+0xf4>)
 800262c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002630:	6613      	str	r3, [r2, #96]	; 0x60
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_SPI_MspInit+0xf4>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_SPI_MspInit+0xf4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_SPI_MspInit+0xf4>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_SPI_MspInit+0xf4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002656:	2382      	movs	r3, #130	; 0x82
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800265e:	2302      	movs	r3, #2
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002666:	2305      	movs	r3, #5
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f001 fe02 	bl	800427c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002688:	2305      	movs	r3, #5
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f001 fdf1 	bl	800427c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_SPI_MspInit+0xfc>)
 800269e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026a8:	2210      	movs	r2, #16
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026d0:	480a      	ldr	r0, [pc, #40]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026d2:	f001 fbcd 	bl	8003e70 <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 80026dc:	f7ff fe96 	bl	800240c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a06      	ldr	r2, [pc, #24]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <HAL_SPI_MspInit+0xf8>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013000 	.word	0x40013000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	20001d54 	.word	0x20001d54
 8002700:	40020030 	.word	0x40020030

08002704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_TIM_Base_MspInit+0x44>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d113      	bne.n	800273e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_TIM_Base_MspInit+0x48>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_TIM_Base_MspInit+0x48>)
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	6613      	str	r3, [r2, #96]	; 0x60
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_TIM_Base_MspInit+0x48>)
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2019      	movs	r0, #25
 8002734:	f001 fb65 	bl	8003e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002738:	2019      	movs	r0, #25
 800273a:	f001 fb7e 	bl	8003e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40014400 	.word	0x40014400
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b09e      	sub	sp, #120	; 0x78
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	2254      	movs	r2, #84	; 0x54
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f004 fed1 	bl	8007518 <memset>
  if(huart->Instance==USART2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_UART_MspInit+0xcc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d148      	bne.n	8002812 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002784:	2300      	movs	r3, #0
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fe79 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002798:	f7ff fe38 	bl	800240c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800279c:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_UART_MspInit+0xd0>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_UART_MspInit+0xd0>)
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_UART_MspInit+0xd0>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_UART_MspInit+0xd0>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_UART_MspInit+0xd0>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_UART_MspInit+0xd0>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027cc:	2304      	movs	r3, #4
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027dc:	2307      	movs	r3, #7
 80027de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027e4:	4619      	mov	r1, r3
 80027e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ea:	f001 fd47 	bl	800427c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002800:	2303      	movs	r3, #3
 8002802:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f001 fd35 	bl	800427c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3778      	adds	r7, #120	; 0x78
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40004400 	.word	0x40004400
 8002820:	40021000 	.word	0x40021000

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002828:	e7fe      	b.n	8002828 <NMI_Handler+0x4>

0800282a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <HardFault_Handler+0x4>

08002830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <MemManage_Handler+0x4>

08002836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283a:	e7fe      	b.n	800283a <BusFault_Handler+0x4>

0800283c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <UsageFault_Handler+0x4>

08002842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002870:	f000 f900 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <DMA1_Channel1_IRQHandler+0x10>)
 800287e:	f001 fc0f 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20001c74 	.word	0x20001c74

0800288c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <DMA1_Channel3_IRQHandler+0x10>)
 8002892:	f001 fc05 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20001d54 	.word	0x20001d54

080028a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80028a6:	f003 fe9d 	bl	80065e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20001d9c 	.word	0x20001d9c

080028b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_sbrk+0x5c>)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <_sbrk+0x60>)
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_sbrk+0x64>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <_sbrk+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e4:	f004 fe30 	bl	8007548 <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	220c      	movs	r2, #12
 80028ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e009      	b.n	8002908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <_sbrk+0x64>)
 8002904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000c000 	.word	0x2000c000
 8002914:	00000800 	.word	0x00000800
 8002918:	20001e70 	.word	0x20001e70
 800291c:	20001fc0 	.word	0x20001fc0

08002920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <SystemInit+0x20>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <SystemInit+0x20>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <init_tasks>:

void init_tasks(
    SPI_HandleTypeDef* spi,
    TIM_HandleTypeDef* timer,
    ADC_HandleTypeDef* adc,
    UART_HandleTypeDef* uart) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]

  init_display(spi, timer, adc, uart);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7fe f915 	bl	8000b88 <init_display>
  HAL_TIM_Base_Start_IT(timer);
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	f003 fdec 	bl	800653c <HAL_TIM_Base_Start_IT>
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <manage_tasks>:

void manage_tasks() {
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  display_graph();
 8002970:	f7fe f9fe 	bl	8000d70 <display_graph>
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800297c:	f7ff ffd0 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002982:	490d      	ldr	r1, [pc, #52]	; (80029b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <LoopForever+0xe>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <LoopForever+0x16>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029a6:	f004 fdd5 	bl	8007554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029aa:	f7ff fb0d 	bl	8001fc8 <main>

080029ae <LoopForever>:

LoopForever:
    b LoopForever
 80029ae:	e7fe      	b.n	80029ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029b0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80029bc:	08008b54 	.word	0x08008b54
  ldr r2, =_sbss
 80029c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80029c4:	20001fc0 	.word	0x20001fc0

080029c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC1_IRQHandler>

080029ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d4:	2003      	movs	r0, #3
 80029d6:	f001 fa09 	bl	8003dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f80e 	bl	80029fc <HAL_InitTick>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	e001      	b.n	80029f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ec:	f7ff fd14 	bl	8002418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f0:	79fb      	ldrb	r3, [r7, #7]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_InitTick+0x6c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_InitTick+0x70>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_InitTick+0x6c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fa15 	bl	8003e56 <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d809      	bhi.n	8002a4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f001 f9df 	bl	8003e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a44:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_InitTick+0x74>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e007      	b.n	8002a5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e004      	b.n	8002a5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	e001      	b.n	8002a5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20001e74 	.word	0x20001e74

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20001e74 	.word	0x20001e74

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000008 	.word	0x20000008

08002afc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <LL_ADC_SetOffset+0x44>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	03fff000 	.word	0x03fff000

08002bac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	461a      	mov	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3360      	adds	r3, #96	; 0x60
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3330      	adds	r3, #48	; 0x30
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	4413      	add	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	211f      	movs	r1, #31
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	401a      	ands	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	f003 011f 	and.w	r1, r3, #31
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0e5b      	lsrs	r3, r3, #25
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	4413      	add	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0d1b      	lsrs	r3, r3, #20
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2107      	movs	r1, #7
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	0d1b      	lsrs	r3, r3, #20
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0318 	and.w	r3, r3, #24
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d08:	40d9      	lsrs	r1, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	0007ffff 	.word	0x0007ffff

08002d2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6093      	str	r3, [r2, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d64:	d101      	bne.n	8002d6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db4:	d101      	bne.n	8002dba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <LL_ADC_IsEnabled+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_ADC_IsEnabled+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e2a:	f043 0204 	orr.w	r2, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d101      	bne.n	8002e56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e126      	b.n	80030f4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fad3 	bl	8002460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff3f 	bl	8002d50 <LL_ADC_IsDeepPowerDownEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff25 	bl	8002d2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff5a 	bl	8002da0 <LL_ADC_IsInternalRegulatorEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d115      	bne.n	8002f1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff3e 	bl	8002d78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002efc:	4b7f      	ldr	r3, [pc, #508]	; (80030fc <HAL_ADC_Init+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	4a7f      	ldr	r2, [pc, #508]	; (8003100 <HAL_ADC_Init+0x274>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff3c 	bl	8002da0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff75 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8002f54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 80bf 	bne.w	80030e2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 80bb 	bne.w	80030e2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff35 	bl	8002df0 <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8c:	485d      	ldr	r0, [pc, #372]	; (8003104 <HAL_ADC_Init+0x278>)
 8002f8e:	f7ff ff2f 	bl	8002df0 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	485a      	ldr	r0, [pc, #360]	; (8003108 <HAL_ADC_Init+0x27c>)
 8002fa0:	f7ff fdac 	bl	8002afc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e5b      	ldrb	r3, [r3, #25]
 8002fa8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fb4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d106      	bne.n	8002fe0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	045b      	lsls	r3, r3, #17
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <HAL_ADC_Init+0x280>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	430b      	orrs	r3, r1
 800300e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff25 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 800301a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d13d      	bne.n	800309e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13a      	bne.n	800309e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800302c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003034:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003044:	f023 0302 	bic.w	r3, r3, #2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	69b9      	ldr	r1, [r7, #24]
 800304e:	430b      	orrs	r3, r1
 8003050:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003058:	2b01      	cmp	r3, #1
 800305a:	d118      	bne.n	800308e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003066:	f023 0304 	bic.w	r3, r3, #4
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800307e:	430a      	orrs	r2, r1
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	611a      	str	r2, [r3, #16]
 800308c:	e007      	b.n	800309e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10c      	bne.n	80030c0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f023 010f 	bic.w	r1, r3, #15
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
 80030be:	e007      	b.n	80030d0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 020f 	bic.w	r2, r2, #15
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f023 0303 	bic.w	r3, r3, #3
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
 80030e0:	e007      	b.n	80030f2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000000 	.word	0x20000000
 8003100:	053e2d63 	.word	0x053e2d63
 8003104:	50040000 	.word	0x50040000
 8003108:	50040300 	.word	0x50040300
 800310c:	fff0c007 	.word	0xfff0c007

08003110 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe8c 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d167      	bne.n	80031fc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Start_DMA+0x2a>
 8003136:	2302      	movs	r3, #2
 8003138:	e063      	b.n	8003202 <HAL_ADC_Start_DMA+0xf2>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fc68 	bl	8003a18 <ADC_Enable>
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14f      	bne.n	80031f2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f023 0206 	bic.w	r2, r3, #6
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58
 800317e:	e002      	b.n	8003186 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	4a20      	ldr	r2, [pc, #128]	; (800320c <HAL_ADC_Start_DMA+0xfc>)
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_ADC_Start_DMA+0x100>)
 8003194:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <HAL_ADC_Start_DMA+0x104>)
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	221c      	movs	r2, #28
 80031a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0210 	orr.w	r2, r2, #16
 80031bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3340      	adds	r3, #64	; 0x40
 80031d8:	4619      	mov	r1, r3
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f000 feff 	bl	8003fe0 <HAL_DMA_Start_IT>
 80031e2:	4603      	mov	r3, r0
 80031e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe13 	bl	8002e16 <LL_ADC_REG_StartConversion>
 80031f0:	e006      	b.n	8003200 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80031fa:	e001      	b.n	8003200 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	08003b25 	.word	0x08003b25
 8003210:	08003bfd 	.word	0x08003bfd
 8003214:	08003c19 	.word	0x08003c19

08003218 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0b6      	sub	sp, #216	; 0xd8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x22>
 8003272:	2302      	movs	r3, #2
 8003274:	e3bb      	b.n	80039ee <HAL_ADC_ConfigChannel+0x79a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fddb 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 83a0 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d824      	bhi.n	80032ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	3b02      	subs	r3, #2
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d81b      	bhi.n	80032e2 <HAL_ADC_ConfigChannel+0x8e>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_ADC_ConfigChannel+0x5c>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032c9 	.word	0x080032c9
 80032b8:	080032d1 	.word	0x080032d1
 80032bc:	080032d9 	.word	0x080032d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80032c0:	230c      	movs	r3, #12
 80032c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032c6:	e010      	b.n	80032ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80032c8:	2312      	movs	r3, #18
 80032ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032ce:	e00c      	b.n	80032ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80032d0:	2318      	movs	r3, #24
 80032d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032d6:	e008      	b.n	80032ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80032d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032e0:	e003      	b.n	80032ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80032e2:	2306      	movs	r3, #6
 80032e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80032f8:	f7ff fc9c 	bl	8002c34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fd9c 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8003306:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fda8 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 8003314:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 81a4 	bne.w	800366a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 819f 	bne.w	800366a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	461a      	mov	r2, r3
 800333a:	f7ff fca7 	bl	8002c8c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00a      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6919      	ldr	r1, [r3, #16]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003370:	f7ff fbf8 	bl	8002b64 <LL_ADC_SetOffset>
 8003374:	e179      	b.n	800366a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fc15 	bl	8002bac <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x14e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fc0a 	bl	8002bac <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	e01e      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x18c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fbff 	bl	8002bac <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e004      	b.n	80033de <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80033d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1a4>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	e018      	b.n	800342a <HAL_ADC_ConfigChannel+0x1d6>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800340c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e004      	b.n	800342a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800342a:	429a      	cmp	r2, r3
 800342c:	d106      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fbce 	bl	8002bd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fbb2 	bl	8002bac <LL_ADC_GetOffsetChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x214>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fba7 	bl	8002bac <LL_ADC_GetOffsetChannel>
 800345e:	4603      	mov	r3, r0
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	f003 021f 	and.w	r2, r3, #31
 8003466:	e01e      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x252>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fb9c 	bl	8002bac <LL_ADC_GetOffsetChannel>
 8003474:	4603      	mov	r3, r0
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800348a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800348e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e004      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800349a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_ADC_ConfigChannel+0x26a>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0e9b      	lsrs	r3, r3, #26
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	e018      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x29c>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80034d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80034da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e004      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80034e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d106      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fb6b 	bl	8002bd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2102      	movs	r1, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fb4f 	bl	8002bac <LL_ADC_GetOffsetChannel>
 800350e:	4603      	mov	r3, r0
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_ADC_ConfigChannel+0x2da>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fb44 	bl	8002bac <LL_ADC_GetOffsetChannel>
 8003524:	4603      	mov	r3, r0
 8003526:	0e9b      	lsrs	r3, r3, #26
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	e01e      	b.n	800356c <HAL_ADC_ConfigChannel+0x318>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fb39 	bl	8002bac <LL_ADC_GetOffsetChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800354c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800355c:	2320      	movs	r3, #32
 800355e:	e004      	b.n	800356a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x330>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0e9b      	lsrs	r3, r3, #26
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	e014      	b.n	80035ae <HAL_ADC_ConfigChannel+0x35a>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80035a0:	2320      	movs	r3, #32
 80035a2:	e004      	b.n	80035ae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80035a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d106      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fb0c 	bl	8002bd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2103      	movs	r1, #3
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff faf0 	bl	8002bac <LL_ADC_GetOffsetChannel>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x398>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2103      	movs	r1, #3
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fae5 	bl	8002bac <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	f003 021f 	and.w	r2, r3, #31
 80035ea:	e017      	b.n	800361c <HAL_ADC_ConfigChannel+0x3c8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2103      	movs	r1, #3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fada 	bl	8002bac <LL_ADC_GetOffsetChannel>
 80035f8:	4603      	mov	r3, r0
 80035fa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x3e0>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	e011      	b.n	8003658 <HAL_ADC_ConfigChannel+0x404>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003644:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e003      	b.n	8003658 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003658:	429a      	cmp	r2, r3
 800365a:	d106      	bne.n	800366a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	2103      	movs	r1, #3
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fab7 	bl	8002bd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fbbe 	bl	8002df0 <LL_ADC_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 8140 	bne.w	80038fc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	461a      	mov	r2, r3
 800368a:	f7ff fb2b 	bl	8002ce4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4a8f      	ldr	r2, [pc, #572]	; (80038d0 <HAL_ADC_ConfigChannel+0x67c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f040 8131 	bne.w	80038fc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x46e>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	3301      	adds	r3, #1
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2b09      	cmp	r3, #9
 80036b8:	bf94      	ite	ls
 80036ba:	2301      	movls	r3, #1
 80036bc:	2300      	movhi	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e019      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x4a2>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e003      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80036de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d079      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x4c2>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	3301      	adds	r3, #1
 800370e:	069b      	lsls	r3, r3, #26
 8003710:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003714:	e015      	b.n	8003742 <HAL_ADC_ConfigChannel+0x4ee>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003726:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e003      	b.n	800373a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3301      	adds	r3, #1
 800373c:	069b      	lsls	r3, r3, #26
 800373e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x50e>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	0e9b      	lsrs	r3, r3, #26
 8003754:	3301      	adds	r3, #1
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	e017      	b.n	8003792 <HAL_ADC_ConfigChannel+0x53e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e003      	b.n	8003786 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800377e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	b2db      	uxtb	r3, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2101      	movs	r1, #1
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	ea42 0103 	orr.w	r1, r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x564>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	0e9b      	lsrs	r3, r3, #26
 80037a8:	3301      	adds	r3, #1
 80037aa:	f003 021f 	and.w	r2, r3, #31
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	051b      	lsls	r3, r3, #20
 80037b6:	e018      	b.n	80037ea <HAL_ADC_ConfigChannel+0x596>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80037d0:	2320      	movs	r3, #32
 80037d2:	e003      	b.n	80037dc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f003 021f 	and.w	r2, r3, #31
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ea:	430b      	orrs	r3, r1
 80037ec:	e081      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_ADC_ConfigChannel+0x5b6>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	0e9b      	lsrs	r3, r3, #26
 8003800:	3301      	adds	r3, #1
 8003802:	069b      	lsls	r3, r3, #26
 8003804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003808:	e015      	b.n	8003836 <HAL_ADC_ConfigChannel+0x5e2>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e003      	b.n	800382e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3301      	adds	r3, #1
 8003830:	069b      	lsls	r3, r3, #26
 8003832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x602>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	3301      	adds	r3, #1
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	e017      	b.n	8003886 <HAL_ADC_ConfigChannel+0x632>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	61bb      	str	r3, [r7, #24]
  return result;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	ea42 0103 	orr.w	r1, r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x65e>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0e9b      	lsrs	r3, r3, #26
 800389c:	3301      	adds	r3, #1
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	3b1e      	subs	r3, #30
 80038aa:	051b      	lsls	r3, r3, #20
 80038ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038b0:	e01e      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x69c>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	60fb      	str	r3, [r7, #12]
  return result;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80038ca:	2320      	movs	r3, #32
 80038cc:	e006      	b.n	80038dc <HAL_ADC_ConfigChannel+0x688>
 80038ce:	bf00      	nop
 80038d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f003 021f 	and.w	r2, r3, #31
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	3b1e      	subs	r3, #30
 80038ea:	051b      	lsls	r3, r3, #20
 80038ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7ff f9c8 	bl	8002c8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d06c      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003908:	483c      	ldr	r0, [pc, #240]	; (80039fc <HAL_ADC_ConfigChannel+0x7a8>)
 800390a:	f7ff f91d 	bl	8002b48 <LL_ADC_GetCommonPathInternalCh>
 800390e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_ADC_ConfigChannel+0x7ac>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d127      	bne.n	800396c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800391c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d121      	bne.n	800396c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a35      	ldr	r2, [pc, #212]	; (8003a04 <HAL_ADC_ConfigChannel+0x7b0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d157      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800393a:	4619      	mov	r1, r3
 800393c:	482f      	ldr	r0, [pc, #188]	; (80039fc <HAL_ADC_ConfigChannel+0x7a8>)
 800393e:	f7ff f8f0 	bl	8002b22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003942:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_ADC_ConfigChannel+0x7b4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <HAL_ADC_ConfigChannel+0x7b8>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800395c:	e002      	b.n	8003964 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3b01      	subs	r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800396a:	e03a      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_ADC_ConfigChannel+0x7bc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d113      	bne.n	800399e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800397a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_ADC_ConfigChannel+0x7b0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d12a      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800398c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003994:	4619      	mov	r1, r3
 8003996:	4819      	ldr	r0, [pc, #100]	; (80039fc <HAL_ADC_ConfigChannel+0x7a8>)
 8003998:	f7ff f8c3 	bl	8002b22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800399c:	e021      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_ADC_ConfigChannel+0x7c0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d11c      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <HAL_ADC_ConfigChannel+0x7b0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d111      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c6:	4619      	mov	r1, r3
 80039c8:	480c      	ldr	r0, [pc, #48]	; (80039fc <HAL_ADC_ConfigChannel+0x7a8>)
 80039ca:	f7ff f8aa 	bl	8002b22 <LL_ADC_SetCommonPathInternalCh>
 80039ce:	e008      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	37d8      	adds	r7, #216	; 0xd8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	80080000 	.word	0x80080000
 80039fc:	50040300 	.word	0x50040300
 8003a00:	c7520000 	.word	0xc7520000
 8003a04:	50040000 	.word	0x50040000
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	053e2d63 	.word	0x053e2d63
 8003a10:	cb840000 	.word	0xcb840000
 8003a14:	80000001 	.word	0x80000001

08003a18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f9e1 	bl	8002df0 <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d169      	bne.n	8003b08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <ADC_Enable+0xfc>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e055      	b.n	8003b0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f9b0 	bl	8002dc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a68:	482b      	ldr	r0, [pc, #172]	; (8003b18 <ADC_Enable+0x100>)
 8003a6a:	f7ff f86d 	bl	8002b48 <LL_ADC_GetCommonPathInternalCh>
 8003a6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <ADC_Enable+0x104>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <ADC_Enable+0x108>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a92:	e002      	b.n	8003a9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f9      	bne.n	8003a94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe fffc 	bl	8002a9c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa6:	e028      	b.n	8003afa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f99f 	bl	8002df0 <LL_ADC_IsEnabled>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f983 	bl	8002dc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ac2:	f7fe ffeb 	bl	8002a9c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d914      	bls.n	8003afa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d00d      	beq.n	8003afa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d1cf      	bne.n	8003aa8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	8000003f 	.word	0x8000003f
 8003b18:	50040300 	.word	0x50040300
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	053e2d63 	.word	0x053e2d63

08003b24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d14b      	bne.n	8003bd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d021      	beq.n	8003b9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff f856 	bl	8002c0e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d032      	beq.n	8003bce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d12b      	bne.n	8003bce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11f      	bne.n	8003bce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f043 0201 	orr.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
 8003b9a:	e018      	b.n	8003bce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d111      	bne.n	8003bce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fb22 	bl	8003218 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bd4:	e00e      	b.n	8003bf4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fb2c 	bl	8003240 <HAL_ADC_ErrorCallback>
}
 8003be8:	e004      	b.n	8003bf4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff fb0e 	bl	800322c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	f043 0204 	orr.w	r2, r3, #4
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff fafe 	bl	8003240 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7e:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	60d3      	str	r3, [r2, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <__NVIC_GetPriorityGrouping+0x18>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	db0b      	blt.n	8003cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <__NVIC_EnableIRQ+0x38>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000e100 	.word	0xe000e100

08003cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db0a      	blt.n	8003d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	490c      	ldr	r1, [pc, #48]	; (8003d38 <__NVIC_SetPriority+0x4c>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	440b      	add	r3, r1
 8003d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d14:	e00a      	b.n	8003d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	4908      	ldr	r1, [pc, #32]	; (8003d3c <__NVIC_SetPriority+0x50>)
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3b04      	subs	r3, #4
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	440b      	add	r3, r1
 8003d2a:	761a      	strb	r2, [r3, #24]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000e100 	.word	0xe000e100
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f1c3 0307 	rsb	r3, r3, #7
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	bf28      	it	cs
 8003d5e:	2304      	movcs	r3, #4
 8003d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d902      	bls.n	8003d70 <NVIC_EncodePriority+0x30>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3b03      	subs	r3, #3
 8003d6e:	e000      	b.n	8003d72 <NVIC_EncodePriority+0x32>
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	401a      	ands	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d88:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	43d9      	mvns	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	4313      	orrs	r3, r2
         );
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3724      	adds	r7, #36	; 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db8:	d301      	bcc.n	8003dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00f      	b.n	8003dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <SysTick_Config+0x40>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc6:	210f      	movs	r1, #15
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	f7ff ff8e 	bl	8003cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <SysTick_Config+0x40>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd6:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <SysTick_Config+0x40>)
 8003dd8:	2207      	movs	r2, #7
 8003dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	e000e010 	.word	0xe000e010

08003dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff29 	bl	8003c4c <__NVIC_SetPriorityGrouping>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e14:	f7ff ff3e 	bl	8003c94 <__NVIC_GetPriorityGrouping>
 8003e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	6978      	ldr	r0, [r7, #20]
 8003e20:	f7ff ff8e 	bl	8003d40 <NVIC_EncodePriority>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff5d 	bl	8003cec <__NVIC_SetPriority>
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	4603      	mov	r3, r0
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff31 	bl	8003cb0 <__NVIC_EnableIRQ>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ffa2 	bl	8003da8 <SysTick_Config>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e098      	b.n	8003fb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	4b4d      	ldr	r3, [pc, #308]	; (8003fc0 <HAL_DMA_Init+0x150>)
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d80f      	bhi.n	8003eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_DMA_Init+0x154>)
 8003e96:	4413      	add	r3, r2
 8003e98:	4a4b      	ldr	r2, [pc, #300]	; (8003fc8 <HAL_DMA_Init+0x158>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	009a      	lsls	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a48      	ldr	r2, [pc, #288]	; (8003fcc <HAL_DMA_Init+0x15c>)
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8003eac:	e00e      	b.n	8003ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_DMA_Init+0x160>)
 8003eb6:	4413      	add	r3, r2
 8003eb8:	4a43      	ldr	r2, [pc, #268]	; (8003fc8 <HAL_DMA_Init+0x158>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	009a      	lsls	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <HAL_DMA_Init+0x164>)
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f26:	d039      	beq.n	8003f9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_DMA_Init+0x15c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d11a      	bne.n	8003f68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f32:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	f003 031c 	and.w	r3, r3, #28
 8003f3e:	210f      	movs	r1, #15
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	4924      	ldr	r1, [pc, #144]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f003 031c 	and.w	r3, r3, #28
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	491d      	ldr	r1, [pc, #116]	; (8003fd8 <HAL_DMA_Init+0x168>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	e019      	b.n	8003f9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f68:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 031c 	and.w	r3, r3, #28
 8003f74:	210f      	movs	r1, #15
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f003 031c 	and.w	r3, r3, #28
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	4911      	ldr	r1, [pc, #68]	; (8003fdc <HAL_DMA_Init+0x16c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40020407 	.word	0x40020407
 8003fc4:	bffdfff8 	.word	0xbffdfff8
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	bffdfbf8 	.word	0xbffdfbf8
 8003fd4:	40020400 	.word	0x40020400
 8003fd8:	400200a8 	.word	0x400200a8
 8003fdc:	400204a8 	.word	0x400204a8

08003fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_DMA_Start_IT+0x20>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e04b      	b.n	8004098 <HAL_DMA_Start_IT+0xb8>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d13a      	bne.n	800408a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f8ee 	bl	800421a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 020e 	orr.w	r2, r2, #14
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e00f      	b.n	8004078 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0204 	bic.w	r2, r2, #4
 8004066:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 020a 	orr.w	r2, r2, #10
 8004076:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e005      	b.n	8004096 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004092:	2302      	movs	r3, #2
 8004094:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004096:	7dfb      	ldrb	r3, [r7, #23]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	f003 031c 	and.w	r3, r3, #28
 80040c0:	2204      	movs	r2, #4
 80040c2:	409a      	lsls	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d026      	beq.n	800411a <HAL_DMA_IRQHandler+0x7a>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d021      	beq.n	800411a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	f003 021c 	and.w	r2, r3, #28
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	2104      	movs	r1, #4
 8004102:	fa01 f202 	lsl.w	r2, r1, r2
 8004106:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d071      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004118:	e06c      	b.n	80041f4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f003 031c 	and.w	r3, r3, #28
 8004122:	2202      	movs	r2, #2
 8004124:	409a      	lsls	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02e      	beq.n	800418c <HAL_DMA_IRQHandler+0xec>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d029      	beq.n	800418c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 020a 	bic.w	r2, r2, #10
 8004154:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f003 021c 	and.w	r2, r3, #28
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2102      	movs	r1, #2
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d038      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800418a:	e033      	b.n	80041f4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f003 031c 	and.w	r3, r3, #28
 8004194:	2208      	movs	r2, #8
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02a      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x156>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d025      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 020e 	bic.w	r2, r2, #14
 80041b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f003 021c 	and.w	r2, r3, #28
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f202 	lsl.w	r2, r1, r2
 80041cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
}
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800420c:	b2db      	uxtb	r3, r3
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f003 021c 	and.w	r2, r3, #28
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b10      	cmp	r3, #16
 800424a:	d108      	bne.n	800425e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800425c:	e007      	b.n	800426e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	60da      	str	r2, [r3, #12]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800428a:	e148      	b.n	800451e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 813a 	beq.w	8004518 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_GPIO_Init+0x40>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d130      	bne.n	800431e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f2:	2201      	movs	r2, #1
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0201 	and.w	r2, r3, #1
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b03      	cmp	r3, #3
 8004328:	d017      	beq.n	800435a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d123      	bne.n	80043ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	08da      	lsrs	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3208      	adds	r2, #8
 80043a8:	6939      	ldr	r1, [r7, #16]
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8094 	beq.w	8004518 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f0:	4b52      	ldr	r3, [pc, #328]	; (800453c <HAL_GPIO_Init+0x2c0>)
 80043f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f4:	4a51      	ldr	r2, [pc, #324]	; (800453c <HAL_GPIO_Init+0x2c0>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6613      	str	r3, [r2, #96]	; 0x60
 80043fc:	4b4f      	ldr	r3, [pc, #316]	; (800453c <HAL_GPIO_Init+0x2c0>)
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004408:	4a4d      	ldr	r2, [pc, #308]	; (8004540 <HAL_GPIO_Init+0x2c4>)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004432:	d00d      	beq.n	8004450 <HAL_GPIO_Init+0x1d4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a43      	ldr	r2, [pc, #268]	; (8004544 <HAL_GPIO_Init+0x2c8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d007      	beq.n	800444c <HAL_GPIO_Init+0x1d0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a42      	ldr	r2, [pc, #264]	; (8004548 <HAL_GPIO_Init+0x2cc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_GPIO_Init+0x1cc>
 8004444:	2302      	movs	r3, #2
 8004446:	e004      	b.n	8004452 <HAL_GPIO_Init+0x1d6>
 8004448:	2307      	movs	r3, #7
 800444a:	e002      	b.n	8004452 <HAL_GPIO_Init+0x1d6>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_GPIO_Init+0x1d6>
 8004450:	2300      	movs	r3, #0
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	f002 0203 	and.w	r2, r2, #3
 8004458:	0092      	lsls	r2, r2, #2
 800445a:	4093      	lsls	r3, r2
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004462:	4937      	ldr	r1, [pc, #220]	; (8004540 <HAL_GPIO_Init+0x2c4>)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	3302      	adds	r3, #2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <HAL_GPIO_Init+0x2d0>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004494:	4a2d      	ldr	r2, [pc, #180]	; (800454c <HAL_GPIO_Init+0x2d0>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800449a:	4b2c      	ldr	r3, [pc, #176]	; (800454c <HAL_GPIO_Init+0x2d0>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044be:	4a23      	ldr	r2, [pc, #140]	; (800454c <HAL_GPIO_Init+0x2d0>)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_GPIO_Init+0x2d0>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_GPIO_Init+0x2d0>)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044ee:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_GPIO_Init+0x2d0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004512:	4a0e      	ldr	r2, [pc, #56]	; (800454c <HAL_GPIO_Init+0x2d0>)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3301      	adds	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f aeaf 	bne.w	800428c <HAL_GPIO_Init+0x10>
  }
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40021000 	.word	0x40021000
 8004540:	40010000 	.word	0x40010000
 8004544:	48000400 	.word	0x48000400
 8004548:	48000800 	.word	0x48000800
 800454c:	40010400 	.word	0x40010400

08004550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
 800455c:	4613      	mov	r3, r2
 800455e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004560:	787b      	ldrb	r3, [r7, #1]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800456c:	e002      	b.n	8004574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0c3      	b.n	800471e <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d101      	bne.n	80045a6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0bb      	b.n	800471e <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d101      	bne.n	80045b6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0b3      	b.n	800471e <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd ffd8 	bl	8002588 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045e6:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 80045fa:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6891      	ldr	r1, [r2, #8]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68d2      	ldr	r2, [r2, #12]
 8004606:	4311      	orrs	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6992      	ldr	r2, [r2, #24]
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6912      	ldr	r2, [r2, #16]
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6952      	ldr	r2, [r2, #20]
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	69d2      	ldr	r2, [r2, #28]
 800461e:	4311      	orrs	r1, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d115      	bne.n	800465c <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 800463a:	f023 030e 	bic.w	r3, r3, #14
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6891      	ldr	r1, [r2, #8]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68d2      	ldr	r2, [r2, #12]
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6952      	ldr	r2, [r2, #20]
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	69d2      	ldr	r2, [r2, #28]
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	430b      	orrs	r3, r1
 800465a:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d118      	bne.n	8004696 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 800466e:	f023 030e 	bic.w	r3, r3, #14
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6891      	ldr	r1, [r2, #8]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68d2      	ldr	r2, [r2, #12]
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6912      	ldr	r2, [r2, #16]
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6952      	ldr	r2, [r2, #20]
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	69d2      	ldr	r2, [r2, #28]
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	430b      	orrs	r3, r1
 8004694:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800469e:	d12a      	bne.n	80046f6 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d013      	beq.n	80046d0 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80046c0:	f023 031f 	bic.w	r3, r3, #31
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6053      	str	r3, [r2, #4]
 80046ce:	e012      	b.n	80046f6 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80046da:	4313      	orrs	r3, r2
 80046dc:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80046e8:	f023 031f 	bic.w	r3, r3, #31
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_OPAMP_Init+0x1a8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4909      	ldr	r1, [pc, #36]	; (8004728 <HAL_OPAMP_Init+0x1a8>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d103      	bne.n	800471c <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40007800 	.word	0x40007800

0800472c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40007000 	.word	0x40007000

0800474c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <HAL_PWREx_GetVoltageRange+0x18>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40007000 	.word	0x40007000

08004768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004776:	d130      	bne.n	80047da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004778:	4b23      	ldr	r3, [pc, #140]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004784:	d038      	beq.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800478e:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004794:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2232      	movs	r2, #50	; 0x32
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0c9b      	lsrs	r3, r3, #18
 80047a8:	3301      	adds	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ac:	e002      	b.n	80047b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047b4:	4b14      	ldr	r3, [pc, #80]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d102      	bne.n	80047c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f2      	bne.n	80047ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d110      	bne.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e00f      	b.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d007      	beq.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f0:	4a05      	ldr	r2, [pc, #20]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40007000 	.word	0x40007000
 800480c:	20000000 	.word	0x20000000
 8004810:	431bde83 	.word	0x431bde83

08004814 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f000 bc02 	b.w	800502c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004828:	4b96      	ldr	r3, [pc, #600]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004832:	4b94      	ldr	r3, [pc, #592]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80e4 	beq.w	8004a12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_RCC_OscConfig+0x4c>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	f040 808b 	bne.w	800496e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	f040 8087 	bne.w	800496e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004860:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_OscConfig+0x64>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e3d9      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_RCC_OscConfig+0x7e>
 8004888:	4b7e      	ldr	r3, [pc, #504]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004890:	e005      	b.n	800489e <HAL_RCC_OscConfig+0x8a>
 8004892:	4b7c      	ldr	r3, [pc, #496]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800489e:	4293      	cmp	r3, r2
 80048a0:	d223      	bcs.n	80048ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fd8c 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e3ba      	b.n	800502c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b6:	4b73      	ldr	r3, [pc, #460]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a72      	ldr	r2, [pc, #456]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048bc:	f043 0308 	orr.w	r3, r3, #8
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b70      	ldr	r3, [pc, #448]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	496d      	ldr	r1, [pc, #436]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d4:	4b6b      	ldr	r3, [pc, #428]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	4968      	ldr	r1, [pc, #416]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
 80048e8:	e025      	b.n	8004936 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a65      	ldr	r2, [pc, #404]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4960      	ldr	r1, [pc, #384]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004908:	4b5e      	ldr	r3, [pc, #376]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	495b      	ldr	r1, [pc, #364]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fd4c 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e37a      	b.n	800502c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004936:	f000 fc81 	bl	800523c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b51      	ldr	r3, [pc, #324]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	4950      	ldr	r1, [pc, #320]	; (8004a88 <HAL_RCC_OscConfig+0x274>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a4e      	ldr	r2, [pc, #312]	; (8004a8c <HAL_RCC_OscConfig+0x278>)
 8004954:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004956:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <HAL_RCC_OscConfig+0x27c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe f84e 	bl	80029fc <HAL_InitTick>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d052      	beq.n	8004a10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	e35e      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d032      	beq.n	80049dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004976:	4b43      	ldr	r3, [pc, #268]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a42      	ldr	r2, [pc, #264]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004982:	f7fe f88b 	bl	8002a9c <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800498a:	f7fe f887 	bl	8002a9c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e347      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800499c:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a35      	ldr	r2, [pc, #212]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049ae:	f043 0308 	orr.w	r3, r3, #8
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4930      	ldr	r1, [pc, #192]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	492b      	ldr	r1, [pc, #172]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
 80049da:	e01a      	b.n	8004a12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049dc:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049e8:	f7fe f858 	bl	8002a9c <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049f0:	f7fe f854 	bl	8002a9c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e314      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a02:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x1dc>
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d073      	beq.n	8004b06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_OscConfig+0x21c>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d10e      	bne.n	8004a48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d10b      	bne.n	8004a48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d063      	beq.n	8004b04 <HAL_RCC_OscConfig+0x2f0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d15f      	bne.n	8004b04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e2f1      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d106      	bne.n	8004a60 <HAL_RCC_OscConfig+0x24c>
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e025      	b.n	8004aac <HAL_RCC_OscConfig+0x298>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d114      	bne.n	8004a94 <HAL_RCC_OscConfig+0x280>
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e013      	b.n	8004aac <HAL_RCC_OscConfig+0x298>
 8004a84:	40021000 	.word	0x40021000
 8004a88:	08008ac8 	.word	0x08008ac8
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	20000004 	.word	0x20000004
 8004a94:	4ba0      	ldr	r3, [pc, #640]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a9f      	ldr	r2, [pc, #636]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b9d      	ldr	r3, [pc, #628]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a9c      	ldr	r2, [pc, #624]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fff2 	bl	8002a9c <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd ffee 	bl	8002a9c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e2ae      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ace:	4b92      	ldr	r3, [pc, #584]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x2a8>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd ffde 	bl	8002a9c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fd ffda 	bl	8002a9c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e29a      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af6:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2d0>
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d060      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_OscConfig+0x310>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d119      	bne.n	8004b52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d116      	bne.n	8004b52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b24:	4b7c      	ldr	r3, [pc, #496]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_OscConfig+0x328>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e277      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b76      	ldr	r3, [pc, #472]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	4973      	ldr	r1, [pc, #460]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b50:	e040      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d023      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5a:	4b6f      	ldr	r3, [pc, #444]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6e      	ldr	r2, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fd ff99 	bl	8002a9c <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6e:	f7fd ff95 	bl	8002a9c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e255      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b80:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8c:	4b62      	ldr	r3, [pc, #392]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	061b      	lsls	r3, r3, #24
 8004b9a:	495f      	ldr	r1, [pc, #380]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
 8004ba0:	e018      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5c      	ldr	r2, [pc, #368]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd ff75 	bl	8002a9c <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fd ff71 	bl	8002a9c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e231      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d03c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01c      	beq.n	8004c22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be8:	4b4b      	ldr	r3, [pc, #300]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bee:	4a4a      	ldr	r2, [pc, #296]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fd ff50 	bl	8002a9c <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fd ff4c 	bl	8002a9c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e20c      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c12:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ef      	beq.n	8004c00 <HAL_RCC_OscConfig+0x3ec>
 8004c20:	e01b      	b.n	8004c5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c22:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c28:	4a3b      	ldr	r2, [pc, #236]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c32:	f7fd ff33 	bl	8002a9c <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3a:	f7fd ff2f 	bl	8002a9c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1ef      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c4c:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1ef      	bne.n	8004c3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80a6 	beq.w	8004db4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6593      	str	r3, [r2, #88]	; 0x58
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c90:	2301      	movs	r3, #1
 8004c92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <HAL_RCC_OscConfig+0x508>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d118      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_RCC_OscConfig+0x508>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_RCC_OscConfig+0x508>)
 8004ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cac:	f7fd fef6 	bl	8002a9c <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb4:	f7fd fef2 	bl	8002a9c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e1b2      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc6:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_RCC_OscConfig+0x508>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d108      	bne.n	8004cec <HAL_RCC_OscConfig+0x4d8>
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cea:	e029      	b.n	8004d40 <HAL_RCC_OscConfig+0x52c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	d115      	bne.n	8004d20 <HAL_RCC_OscConfig+0x50c>
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	4a07      	ldr	r2, [pc, #28]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a03      	ldr	r2, [pc, #12]	; (8004d18 <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d14:	e014      	b.n	8004d40 <HAL_RCC_OscConfig+0x52c>
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	4b9a      	ldr	r3, [pc, #616]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	4a99      	ldr	r2, [pc, #612]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d30:	4b96      	ldr	r3, [pc, #600]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	4a95      	ldr	r2, [pc, #596]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d016      	beq.n	8004d76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fd fea8 	bl	8002a9c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d50:	f7fd fea4 	bl	8002a9c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e162      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d66:	4b89      	ldr	r3, [pc, #548]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ed      	beq.n	8004d50 <HAL_RCC_OscConfig+0x53c>
 8004d74:	e015      	b.n	8004da2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d76:	f7fd fe91 	bl	8002a9c <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fd fe8d 	bl	8002a9c <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e14b      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d94:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ed      	bne.n	8004d7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da2:	7ffb      	ldrb	r3, [r7, #31]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da8:	4b78      	ldr	r3, [pc, #480]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	4a77      	ldr	r2, [pc, #476]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d03c      	beq.n	8004e3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01c      	beq.n	8004e02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dc8:	4b70      	ldr	r3, [pc, #448]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dce:	4a6f      	ldr	r2, [pc, #444]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fd fe60 	bl	8002a9c <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de0:	f7fd fe5c 	bl	8002a9c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e11c      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004df2:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ef      	beq.n	8004de0 <HAL_RCC_OscConfig+0x5cc>
 8004e00:	e01b      	b.n	8004e3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e02:	4b62      	ldr	r3, [pc, #392]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e08:	4a60      	ldr	r2, [pc, #384]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e12:	f7fd fe43 	bl	8002a9c <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e1a:	f7fd fe3f 	bl	8002a9c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0ff      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e2c:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ef      	bne.n	8004e1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80f3 	beq.w	800502a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f040 80c9 	bne.w	8004fe0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e4e:	4b4f      	ldr	r3, [pc, #316]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0203 	and.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d12c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d123      	bne.n	8004ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d11b      	bne.n	8004ebc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d113      	bne.n	8004ebc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d109      	bne.n	8004ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d06b      	beq.n	8004f94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d062      	beq.n	8004f88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ec2:	4b32      	ldr	r3, [pc, #200]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0ac      	b.n	800502c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004edc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ede:	f7fd fddd 	bl	8002a9c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fd fdd9 	bl	8002a9c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e099      	b.n	800502c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef8:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	4b21      	ldr	r3, [pc, #132]	; (8004f90 <HAL_RCC_OscConfig+0x77c>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f14:	3a01      	subs	r2, #1
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f1e:	0212      	lsls	r2, r2, #8
 8004f20:	4311      	orrs	r1, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f26:	0852      	lsrs	r2, r2, #1
 8004f28:	3a01      	subs	r2, #1
 8004f2a:	0552      	lsls	r2, r2, #21
 8004f2c:	4311      	orrs	r1, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f32:	0852      	lsrs	r2, r2, #1
 8004f34:	3a01      	subs	r2, #1
 8004f36:	0652      	lsls	r2, r2, #25
 8004f38:	4311      	orrs	r1, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f3e:	06d2      	lsls	r2, r2, #27
 8004f40:	430a      	orrs	r2, r1
 8004f42:	4912      	ldr	r1, [pc, #72]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f60:	f7fd fd9c 	bl	8002a9c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f68:	f7fd fd98 	bl	8002a9c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e058      	b.n	800502c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7a:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <HAL_RCC_OscConfig+0x778>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f86:	e050      	b.n	800502a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e04f      	b.n	800502c <HAL_RCC_OscConfig+0x818>
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f94:	4b27      	ldr	r3, [pc, #156]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d144      	bne.n	800502a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004faa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fb8:	f7fd fd70 	bl	8002a9c <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fd fd6c 	bl	8002a9c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e02c      	b.n	800502c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd2:	4b18      	ldr	r3, [pc, #96]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x7ac>
 8004fde:	e024      	b.n	800502a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d01f      	beq.n	8005026 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 8004fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fd fd53 	bl	8002a9c <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fd fd4f 	bl	8002a9c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e00f      	b.n	800502c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f0      	bne.n	8004ffa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	4905      	ldr	r1, [pc, #20]	; (8005034 <HAL_RCC_OscConfig+0x820>)
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <HAL_RCC_OscConfig+0x824>)
 8005020:	4013      	ands	r3, r2
 8005022:	60cb      	str	r3, [r1, #12]
 8005024:	e001      	b.n	800502a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	feeefffc 	.word	0xfeeefffc

0800503c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0e7      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005050:	4b75      	ldr	r3, [pc, #468]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d910      	bls.n	8005080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b72      	ldr	r3, [pc, #456]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	4970      	ldr	r1, [pc, #448]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b6e      	ldr	r3, [pc, #440]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0cf      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d010      	beq.n	80050ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	4b66      	ldr	r3, [pc, #408]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005098:	429a      	cmp	r2, r3
 800509a:	d908      	bls.n	80050ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509c:	4b63      	ldr	r3, [pc, #396]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4960      	ldr	r1, [pc, #384]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d04c      	beq.n	8005154 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	4b5a      	ldr	r3, [pc, #360]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d121      	bne.n	8005112 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0a6      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050da:	4b54      	ldr	r3, [pc, #336]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d115      	bne.n	8005112 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e09a      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050f2:	4b4e      	ldr	r3, [pc, #312]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e08e      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005102:	4b4a      	ldr	r3, [pc, #296]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e086      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b46      	ldr	r3, [pc, #280]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4943      	ldr	r1, [pc, #268]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005124:	f7fd fcba 	bl	8002a9c <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fd fcb6 	bl	8002a9c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e06e      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b3a      	ldr	r3, [pc, #232]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	4b31      	ldr	r3, [pc, #196]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800516c:	429a      	cmp	r2, r3
 800516e:	d208      	bcs.n	8005182 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005170:	4b2e      	ldr	r3, [pc, #184]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	492b      	ldr	r1, [pc, #172]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005182:	4b29      	ldr	r3, [pc, #164]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d210      	bcs.n	80051b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005190:	4b25      	ldr	r3, [pc, #148]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 0207 	bic.w	r2, r3, #7
 8005198:	4923      	ldr	r1, [pc, #140]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a0:	4b21      	ldr	r3, [pc, #132]	; (8005228 <HAL_RCC_ClockConfig+0x1ec>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e036      	b.n	8005220 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4918      	ldr	r1, [pc, #96]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4910      	ldr	r1, [pc, #64]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051f0:	f000 f824 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	490b      	ldr	r1, [pc, #44]	; (8005230 <HAL_RCC_ClockConfig+0x1f4>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 800520e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_RCC_ClockConfig+0x1fc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fd fbf1 	bl	80029fc <HAL_InitTick>
 800521a:	4603      	mov	r3, r0
 800521c:	72fb      	strb	r3, [r7, #11]

  return status;
 800521e:	7afb      	ldrb	r3, [r7, #11]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40022000 	.word	0x40022000
 800522c:	40021000 	.word	0x40021000
 8005230:	08008ac8 	.word	0x08008ac8
 8005234:	20000000 	.word	0x20000000
 8005238:	20000004 	.word	0x20000004

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	2300      	movs	r3, #0
 8005248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524a:	4b3e      	ldr	r3, [pc, #248]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005254:	4b3b      	ldr	r3, [pc, #236]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x34>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b0c      	cmp	r3, #12
 8005268:	d121      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11e      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005270:	4b34      	ldr	r3, [pc, #208]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800527c:	4b31      	ldr	r3, [pc, #196]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e005      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <HAL_RCC_GetSysClockFreq+0x10c>)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <HAL_RCC_GetSysClockFreq+0x110>)
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e004      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052c0:	4b23      	ldr	r3, [pc, #140]	; (8005350 <HAL_RCC_GetSysClockFreq+0x114>)
 80052c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d134      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ca:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d003      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0xac>
 80052e0:	e005      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052e2:	4b1a      	ldr	r3, [pc, #104]	; (800534c <HAL_RCC_GetSysClockFreq+0x110>)
 80052e4:	617b      	str	r3, [r7, #20]
      break;
 80052e6:	e005      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_GetSysClockFreq+0x114>)
 80052ea:	617b      	str	r3, [r7, #20]
      break;
 80052ec:	e002      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	617b      	str	r3, [r7, #20]
      break;
 80052f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	3301      	adds	r3, #1
 8005300:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	fb03 f202 	mul.w	r2, r3, r2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	0e5b      	lsrs	r3, r3, #25
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	3301      	adds	r3, #1
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005334:	69bb      	ldr	r3, [r7, #24]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	08008ae0 	.word	0x08008ae0
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000000 	.word	0x20000000

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005370:	f7ff fff0 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	08008ad8 	.word	0x08008ad8

08005398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800539c:	f7ff ffda 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0adb      	lsrs	r3, r3, #11
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08008ad8 	.word	0x08008ad8

080053c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053d0:	4b2a      	ldr	r3, [pc, #168]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053dc:	f7ff f9b6 	bl	800474c <HAL_PWREx_GetVoltageRange>
 80053e0:	6178      	str	r0, [r7, #20]
 80053e2:	e014      	b.n	800540e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	4a24      	ldr	r2, [pc, #144]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ee:	6593      	str	r3, [r2, #88]	; 0x58
 80053f0:	4b22      	ldr	r3, [pc, #136]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053fc:	f7ff f9a6 	bl	800474c <HAL_PWREx_GetVoltageRange>
 8005400:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d10b      	bne.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d919      	bls.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2ba0      	cmp	r3, #160	; 0xa0
 8005420:	d902      	bls.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005422:	2302      	movs	r3, #2
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e013      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005428:	2301      	movs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e010      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d902      	bls.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005434:	2303      	movs	r3, #3
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e00a      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d102      	bne.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005440:	2302      	movs	r3, #2
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e004      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b70      	cmp	r3, #112	; 0x70
 800544a:	d101      	bne.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800544c:	2301      	movs	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 0207 	bic.w	r2, r3, #7
 8005458:	4909      	ldr	r1, [pc, #36]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d001      	beq.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000
 8005480:	40022000 	.word	0x40022000

08005484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800548c:	2300      	movs	r3, #0
 800548e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005490:	2300      	movs	r3, #0
 8005492:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549c:	2b00      	cmp	r3, #0
 800549e:	d031      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054a8:	d01a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054ae:	d814      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b8:	d10f      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80054ba:	4b5d      	ldr	r3, [pc, #372]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4a5c      	ldr	r2, [pc, #368]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054c6:	e00c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f9de 	bl	8005890 <RCCEx_PLLSAI1_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	74fb      	strb	r3, [r7, #19]
      break;
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e8:	4b51      	ldr	r3, [pc, #324]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	494e      	ldr	r1, [pc, #312]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054fe:	e001      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 809e 	beq.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005516:	4b46      	ldr	r3, [pc, #280]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552c:	4b40      	ldr	r3, [pc, #256]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	4a3f      	ldr	r2, [pc, #252]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005536:	6593      	str	r3, [r2, #88]	; 0x58
 8005538:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005544:	2301      	movs	r3, #1
 8005546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005548:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a39      	ldr	r2, [pc, #228]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800554e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005554:	f7fd faa2 	bl	8002a9c <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800555a:	e009      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555c:	f7fd fa9e 	bl	8002a9c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d902      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	74fb      	strb	r3, [r7, #19]
        break;
 800556e:	e005      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005570:	4b30      	ldr	r3, [pc, #192]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0ef      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d15a      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005582:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01e      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	429a      	cmp	r2, r3
 800559c:	d019      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800559e:	4b24      	ldr	r3, [pc, #144]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b0:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ba:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c0:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055ca:	4a19      	ldr	r2, [pc, #100]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d016      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fd fa5e 	bl	8002a9c <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e2:	e00b      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fd fa5a 	bl	8002a9c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d902      	bls.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	74fb      	strb	r3, [r7, #19]
            break;
 80055fa:	e006      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ec      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	4904      	ldr	r1, [pc, #16]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005626:	e009      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	74bb      	strb	r3, [r7, #18]
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800562e:	bf00      	nop
 8005630:	40021000 	.word	0x40021000
 8005634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563c:	7c7b      	ldrb	r3, [r7, #17]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d105      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005642:	4b8a      	ldr	r3, [pc, #552]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005646:	4a89      	ldr	r2, [pc, #548]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565a:	4b84      	ldr	r3, [pc, #528]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f023 0203 	bic.w	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4980      	ldr	r1, [pc, #512]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567c:	4b7b      	ldr	r3, [pc, #492]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	f023 020c 	bic.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	4978      	ldr	r1, [pc, #480]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800569e:	4b73      	ldr	r3, [pc, #460]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	496f      	ldr	r1, [pc, #444]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c0:	4b6a      	ldr	r3, [pc, #424]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	4967      	ldr	r1, [pc, #412]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056e2:	4b62      	ldr	r3, [pc, #392]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	495e      	ldr	r1, [pc, #376]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	4956      	ldr	r1, [pc, #344]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005726:	4b51      	ldr	r3, [pc, #324]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	494d      	ldr	r1, [pc, #308]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d028      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005748:	4b48      	ldr	r3, [pc, #288]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	4945      	ldr	r1, [pc, #276]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005766:	d106      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005768:	4b40      	ldr	r3, [pc, #256]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a3f      	ldr	r2, [pc, #252]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005772:	60d3      	str	r3, [r2, #12]
 8005774:	e011      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800577e:	d10c      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	2101      	movs	r1, #1
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f882 	bl	8005890 <RCCEx_PLLSAI1_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005796:	7cfb      	ldrb	r3, [r7, #19]
 8005798:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d028      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a6:	4b31      	ldr	r3, [pc, #196]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	492d      	ldr	r1, [pc, #180]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c4:	d106      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a28      	ldr	r2, [pc, #160]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d0:	60d3      	str	r3, [r2, #12]
 80057d2:	e011      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	2101      	movs	r1, #1
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f853 	bl	8005890 <RCCEx_PLLSAI1_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ee:	7cfb      	ldrb	r3, [r7, #19]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01c      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005812:	4916      	ldr	r1, [pc, #88]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005822:	d10c      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f830 	bl	8005890 <RCCEx_PLLSAI1_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	4904      	ldr	r1, [pc, #16]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005860:	7cbb      	ldrb	r3, [r7, #18]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000

08005870 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800587a:	f043 0304 	orr.w	r3, r3, #4
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000

08005890 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800589e:	4b74      	ldr	r3, [pc, #464]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d018      	beq.n	80058dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058aa:	4b71      	ldr	r3, [pc, #452]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d10d      	bne.n	80058d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
       ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058c2:	4b6b      	ldr	r3, [pc, #428]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
       ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d047      	beq.n	8005966 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e044      	b.n	8005966 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d018      	beq.n	8005916 <RCCEx_PLLSAI1_Config+0x86>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d825      	bhi.n	8005934 <RCCEx_PLLSAI1_Config+0xa4>
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <RCCEx_PLLSAI1_Config+0x62>
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d009      	beq.n	8005904 <RCCEx_PLLSAI1_Config+0x74>
 80058f0:	e020      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11d      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005902:	e01a      	b.n	800593a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005904:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005914:	e013      	b.n	800593e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005916:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005922:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005932:	e006      	b.n	8005942 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e004      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005942:	bf00      	nop
    }

    if(status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800594a:	4b49      	ldr	r3, [pc, #292]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	430b      	orrs	r3, r1
 8005960:	4943      	ldr	r1, [pc, #268]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005962:	4313      	orrs	r3, r2
 8005964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d17c      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800596c:	4b40      	ldr	r3, [pc, #256]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3f      	ldr	r2, [pc, #252]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fd f890 	bl	8002a9c <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800597e:	e009      	b.n	8005994 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005980:	f7fd f88c 	bl	8002a9c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d902      	bls.n	8005994 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
        break;
 8005992:	e005      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005994:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ef      	bne.n	8005980 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d15f      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ac:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	0211      	lsls	r1, r2, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	06d2      	lsls	r2, r2, #27
 80059c4:	430a      	orrs	r2, r1
 80059c6:	492a      	ldr	r1, [pc, #168]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	610b      	str	r3, [r1, #16]
 80059cc:	e027      	b.n	8005a1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d112      	bne.n	80059fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d4:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6892      	ldr	r2, [r2, #8]
 80059e4:	0211      	lsls	r1, r2, #8
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6912      	ldr	r2, [r2, #16]
 80059ea:	0852      	lsrs	r2, r2, #1
 80059ec:	3a01      	subs	r2, #1
 80059ee:	0552      	lsls	r2, r2, #21
 80059f0:	430a      	orrs	r2, r1
 80059f2:	491f      	ldr	r1, [pc, #124]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]
 80059f8:	e011      	b.n	8005a1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6892      	ldr	r2, [r2, #8]
 8005a0a:	0211      	lsls	r1, r2, #8
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6952      	ldr	r2, [r2, #20]
 8005a10:	0852      	lsrs	r2, r2, #1
 8005a12:	3a01      	subs	r2, #1
 8005a14:	0652      	lsls	r2, r2, #25
 8005a16:	430a      	orrs	r2, r1
 8005a18:	4915      	ldr	r1, [pc, #84]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2a:	f7fd f837 	bl	8002a9c <HAL_GetTick>
 8005a2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a30:	e009      	b.n	8005a46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a32:	f7fd f833 	bl	8002a9c <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d902      	bls.n	8005a46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	73fb      	strb	r3, [r7, #15]
          break;
 8005a44:	e005      	b.n	8005a52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0ef      	beq.n	8005a32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	4903      	ldr	r1, [pc, #12]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e095      	b.n	8005bb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d009      	beq.n	8005aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	61da      	str	r2, [r3, #28]
 8005a9e:	e005      	b.n	8005aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc fd9c 	bl	8002604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aec:	d902      	bls.n	8005af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e002      	b.n	8005afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b02:	d007      	beq.n	8005b14 <HAL_SPI_Init+0xa0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	ea42 0103 	orr.w	r1, r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	f003 0204 	and.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b90:	ea42 0103 	orr.w	r1, r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b088      	sub	sp, #32
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_SPI_Transmit+0x22>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e15f      	b.n	8005e9c <HAL_SPI_Transmit+0x2e2>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be4:	f7fc ff5a 	bl	8002a9c <HAL_GetTick>
 8005be8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d002      	beq.n	8005c00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bfe:	e148      	b.n	8005e92 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_Transmit+0x52>
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c10:	e13f      	b.n	8005e92 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2203      	movs	r2, #3
 8005c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5c:	d10f      	bne.n	8005c7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d007      	beq.n	8005c9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca4:	d94f      	bls.n	8005d46 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_Transmit+0xfa>
 8005cae:	8afb      	ldrh	r3, [r7, #22]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d142      	bne.n	8005d3a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cd8:	e02f      	b.n	8005d3a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d112      	bne.n	8005d0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	1c9a      	adds	r2, r3, #2
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d0c:	e015      	b.n	8005d3a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0e:	f7fc fec5 	bl	8002a9c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d803      	bhi.n	8005d26 <HAL_SPI_Transmit+0x16c>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Transmit+0x172>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005d38:	e0ab      	b.n	8005e92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ca      	bne.n	8005cda <HAL_SPI_Transmit+0x120>
 8005d44:	e080      	b.n	8005e48 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_Transmit+0x19a>
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d174      	bne.n	8005e3e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d912      	bls.n	8005d84 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	881a      	ldrh	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	1c9a      	adds	r2, r3, #2
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b02      	subs	r3, #2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d82:	e05c      	b.n	8005e3e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005daa:	e048      	b.n	8005e3e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d12b      	bne.n	8005e12 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d912      	bls.n	8005dea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	881a      	ldrh	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	1c9a      	adds	r2, r3, #2
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b02      	subs	r3, #2
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005de8:	e029      	b.n	8005e3e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e10:	e015      	b.n	8005e3e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e12:	f7fc fe43 	bl	8002a9c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d803      	bhi.n	8005e2a <HAL_SPI_Transmit+0x270>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_Transmit+0x276>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005e3c:	e029      	b.n	8005e92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1b1      	bne.n	8005dac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fad7 	bl	8006400 <SPI_EndRxTxTransaction>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e003      	b.n	8005e92 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SPI_Transmit_DMA+0x20>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e0d4      	b.n	800606e <HAL_SPI_Transmit_DMA+0x1ca>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d002      	beq.n	8005ede <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005edc:	e0c2      	b.n	8006064 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_Transmit_DMA+0x46>
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eee:	e0b9      	b.n	8006064 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3a:	d10f      	bne.n	8005f5c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f60:	4a45      	ldr	r2, [pc, #276]	; (8006078 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	4a44      	ldr	r2, [pc, #272]	; (800607c <HAL_SPI_Transmit_DMA+0x1d8>)
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	4a43      	ldr	r2, [pc, #268]	; (8006080 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f78:	2200      	movs	r2, #0
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f8a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f94:	d82d      	bhi.n	8005ff2 <HAL_SPI_Transmit_DMA+0x14e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d127      	bne.n	8005ff2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10f      	bne.n	8005fd0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fbe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fce:	e010      	b.n	8005ff2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fde:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3301      	adds	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006008:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800600a:	f7fd ffe9 	bl	8003fe0 <HAL_DMA_Start_IT>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006018:	f043 0210 	orr.w	r2, r3, #16
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006024:	e01e      	b.n	8006064 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d007      	beq.n	8006044 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0220 	orr.w	r2, r2, #32
 8006052:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0202 	orr.w	r2, r2, #2
 8006062:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	08006167 	.word	0x08006167
 800607c:	080060c1 	.word	0x080060c1
 8006080:	08006183 	.word	0x08006183

08006084 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ce:	f7fc fce5 	bl	8002a9c <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d03b      	beq.n	800615a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0220 	bic.w	r2, r2, #32
 80060f0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0202 	bic.w	r2, r2, #2
 8006100:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	2164      	movs	r1, #100	; 0x64
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	f000 f97a 	bl	8006400 <SPI_EndRxTxTransaction>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006116:	f043 0220 	orr.w	r2, r3, #32
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ffaa 	bl	80060ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006158:	e002      	b.n	8006160 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800615a:	6978      	ldr	r0, [r7, #20]
 800615c:	f7ff ff92 	bl	8006084 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff ff8f 	bl	8006098 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0203 	bic.w	r2, r2, #3
 800619e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	f043 0210 	orr.w	r2, r3, #16
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff ff79 	bl	80060ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061d4:	f7fc fc62 	bl	8002a9c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061e4:	f7fc fc5a 	bl	8002a9c <HAL_GetTick>
 80061e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ea:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	015b      	lsls	r3, r3, #5
 80061f0:	0d1b      	lsrs	r3, r3, #20
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061fa:	e054      	b.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d050      	beq.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006204:	f7fc fc4a 	bl	8002a9c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	429a      	cmp	r2, r3
 8006212:	d902      	bls.n	800621a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d13d      	bne.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006232:	d111      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623c:	d004      	beq.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006246:	d107      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006260:	d10f      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e017      	b.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d19b      	bne.n	80061fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000000 	.word	0x20000000

080062d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062e6:	f7fc fbd9 	bl	8002a9c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	4413      	add	r3, r2
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062f6:	f7fc fbd1 	bl	8002a9c <HAL_GetTick>
 80062fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006304:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	00da      	lsls	r2, r3, #3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	0d1b      	lsrs	r3, r3, #20
 8006314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800631c:	e060      	b.n	80063e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006324:	d107      	bne.n	8006336 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006334:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d050      	beq.n	80063e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800633e:	f7fc fbad 	bl	8002a9c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634a:	429a      	cmp	r2, r3
 800634c:	d902      	bls.n	8006354 <SPI_WaitFifoStateUntilTimeout+0x80>
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d13d      	bne.n	80063d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006362:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636c:	d111      	bne.n	8006392 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006376:	d004      	beq.n	8006382 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d107      	bne.n	8006392 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006390:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639a:	d10f      	bne.n	80063bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e010      	b.n	80063f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	3b01      	subs	r3, #1
 80063de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d196      	bne.n	800631e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3728      	adds	r7, #40	; 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000000 	.word	0x20000000

08006400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff ff5b 	bl	80062d4 <SPI_WaitFifoStateUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e027      	b.n	8006484 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fec0 	bl	80061c4 <SPI_WaitFlagStateUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e014      	b.n	8006484 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2200      	movs	r2, #0
 8006462:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff ff34 	bl	80062d4 <SPI_WaitFifoStateUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e000      	b.n	8006484 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e049      	b.n	8006532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc f926 	bl	8002704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 f9b4 	bl	8006838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e03b      	b.n	80065cc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_TIM_Base_Start_IT+0x4e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d004      	beq.n	800658a <HAL_TIM_Base_Start_IT+0x4e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <HAL_TIM_Base_Start_IT+0xa0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d115      	bne.n	80065b6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006592:	4013      	ands	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b06      	cmp	r3, #6
 800659a:	d015      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x8c>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a2:	d011      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b4:	e008      	b.n	80065c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e000      	b.n	80065ca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40014000 	.word	0x40014000
 80065e0:	00010007 	.word	0x00010007

080065e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d020      	beq.n	8006648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0202 	mvn.w	r2, #2
 8006618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8e4 	bl	80067fc <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8d6 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f8e7 	bl	8006810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d020      	beq.n	8006694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0204 	mvn.w	r2, #4
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f8be 	bl	80067fc <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8b0 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f8c1 	bl	8006810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d020      	beq.n	80066e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0208 	mvn.w	r2, #8
 80066b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2204      	movs	r2, #4
 80066b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f898 	bl	80067fc <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f88a 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f89b 	bl	8006810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d020      	beq.n	800672c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0210 	mvn.w	r2, #16
 80066fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2208      	movs	r2, #8
 8006702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f872 	bl	80067fc <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f864 	bl	80067e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f875 	bl	8006810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0201 	mvn.w	r2, #1
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fa fb90 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8d0 	bl	8006914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8c8 	bl	8006928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f834 	bl	8006824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0220 	mvn.w	r2, #32
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f890 	bl	8006900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <TIM_Base_SetConfig+0xbc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0x20>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006856:	d108      	bne.n	800686a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <TIM_Base_SetConfig+0xbc>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00b      	beq.n	800688a <TIM_Base_SetConfig+0x52>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006878:	d007      	beq.n	800688a <TIM_Base_SetConfig+0x52>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <TIM_Base_SetConfig+0xc0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d003      	beq.n	800688a <TIM_Base_SetConfig+0x52>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <TIM_Base_SetConfig+0xc4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d108      	bne.n	800689c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <TIM_Base_SetConfig+0xbc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_Base_SetConfig+0xa0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a0b      	ldr	r2, [pc, #44]	; (80068f8 <TIM_Base_SetConfig+0xc0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0xa0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <TIM_Base_SetConfig+0xc4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400

08006900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e040      	b.n	80069d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fb fef6 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2224      	movs	r2, #36	; 0x24
 8006968:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fade 	bl	8006f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f8af 	bl	8006aec <UART_SetConfig>
 800698e:	4603      	mov	r3, r0
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e01b      	b.n	80069d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb5d 	bl	8007088 <UART_CheckIdleState>
 80069ce:	4603      	mov	r3, r0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d178      	bne.n	8006ae2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_UART_Transmit+0x24>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e071      	b.n	8006ae4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2221      	movs	r2, #33	; 0x21
 8006a0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a0e:	f7fc f845 	bl	8002a9c <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	88fa      	ldrh	r2, [r7, #6]
 8006a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d108      	bne.n	8006a40 <HAL_UART_Transmit+0x68>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	e003      	b.n	8006a48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a48:	e030      	b.n	8006aac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2180      	movs	r1, #128	; 0x80
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fbbf 	bl	80071d8 <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e03c      	b.n	8006ae4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	881a      	ldrh	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a7c:	b292      	uxth	r2, r2
 8006a7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	3302      	adds	r3, #2
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e008      	b.n	8006a9a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	b292      	uxth	r2, r2
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1c8      	bne.n	8006a4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb88 	bl	80071d8 <UART_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e005      	b.n	8006ae4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
  }
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af0:	b08a      	sub	sp, #40	; 0x28
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4bb4      	ldr	r3, [pc, #720]	; (8006dec <UART_SetConfig+0x300>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4aa9      	ldr	r2, [pc, #676]	; (8006df0 <UART_SetConfig+0x304>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b54:	4313      	orrs	r3, r2
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4aa0      	ldr	r2, [pc, #640]	; (8006df4 <UART_SetConfig+0x308>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d126      	bne.n	8006bc4 <UART_SetConfig+0xd8>
 8006b76:	4ba0      	ldr	r3, [pc, #640]	; (8006df8 <UART_SetConfig+0x30c>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d81b      	bhi.n	8006bbc <UART_SetConfig+0xd0>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <UART_SetConfig+0xa0>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006bad 	.word	0x08006bad
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e080      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e07c      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006bac:	2304      	movs	r3, #4
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e078      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bba:	e074      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006bbc:	2310      	movs	r3, #16
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e070      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a8c      	ldr	r2, [pc, #560]	; (8006dfc <UART_SetConfig+0x310>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d138      	bne.n	8006c40 <UART_SetConfig+0x154>
 8006bce:	4b8a      	ldr	r3, [pc, #552]	; (8006df8 <UART_SetConfig+0x30c>)
 8006bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd4:	f003 030c 	and.w	r3, r3, #12
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	d82d      	bhi.n	8006c38 <UART_SetConfig+0x14c>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xf8>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c19 	.word	0x08006c19
 8006be8:	08006c39 	.word	0x08006c39
 8006bec:	08006c39 	.word	0x08006c39
 8006bf0:	08006c39 	.word	0x08006c39
 8006bf4:	08006c29 	.word	0x08006c29
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c39 	.word	0x08006c39
 8006c04:	08006c21 	.word	0x08006c21
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1e:	e042      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c20:	2302      	movs	r3, #2
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c26:	e03e      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2e:	e03a      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c30:	2308      	movs	r3, #8
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c36:	e036      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3e:	e032      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6a      	ldr	r2, [pc, #424]	; (8006df0 <UART_SetConfig+0x304>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d12a      	bne.n	8006ca0 <UART_SetConfig+0x1b4>
 8006c4a:	4b6b      	ldr	r3, [pc, #428]	; (8006df8 <UART_SetConfig+0x30c>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c58:	d01a      	beq.n	8006c90 <UART_SetConfig+0x1a4>
 8006c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c5e:	d81b      	bhi.n	8006c98 <UART_SetConfig+0x1ac>
 8006c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c64:	d00c      	beq.n	8006c80 <UART_SetConfig+0x194>
 8006c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6a:	d815      	bhi.n	8006c98 <UART_SetConfig+0x1ac>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <UART_SetConfig+0x18c>
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c74:	d008      	beq.n	8006c88 <UART_SetConfig+0x19c>
 8006c76:	e00f      	b.n	8006c98 <UART_SetConfig+0x1ac>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e012      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c80:	2302      	movs	r3, #2
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e00e      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e00a      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e006      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e002      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a51      	ldr	r2, [pc, #324]	; (8006df0 <UART_SetConfig+0x304>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d17a      	bne.n	8006da6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d824      	bhi.n	8006d02 <UART_SetConfig+0x216>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x1d4>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fe fb42 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8006ce8:	61f8      	str	r0, [r7, #28]
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b44      	ldr	r3, [pc, #272]	; (8006e00 <UART_SetConfig+0x314>)
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe faa3 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8006cf6:	61f8      	str	r0, [r7, #28]
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61fb      	str	r3, [r7, #28]
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8107 	beq.w	8006f24 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d305      	bcc.n	8006d32 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d903      	bls.n	8006d3a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d38:	e0f4      	b.n	8006f24 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	461c      	mov	r4, r3
 8006d40:	4615      	mov	r5, r2
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	022b      	lsls	r3, r5, #8
 8006d4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d50:	0222      	lsls	r2, r4, #8
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	6849      	ldr	r1, [r1, #4]
 8006d56:	0849      	lsrs	r1, r1, #1
 8006d58:	2000      	movs	r0, #0
 8006d5a:	4688      	mov	r8, r1
 8006d5c:	4681      	mov	r9, r0
 8006d5e:	eb12 0a08 	adds.w	sl, r2, r8
 8006d62:	eb43 0b09 	adc.w	fp, r3, r9
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	4650      	mov	r0, sl
 8006d76:	4659      	mov	r1, fp
 8006d78:	f7f9 fd88 	bl	800088c <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d8a:	d308      	bcc.n	8006d9e <UART_SetConfig+0x2b2>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d92:	d204      	bcs.n	8006d9e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e0c2      	b.n	8006f24 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006da4:	e0be      	b.n	8006f24 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dae:	d16a      	bne.n	8006e86 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d834      	bhi.n	8006e22 <UART_SetConfig+0x336>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x2d4>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006e05 	.word	0x08006e05
 8006dc8:	08006e0d 	.word	0x08006e0d
 8006dcc:	08006e23 	.word	0x08006e23
 8006dd0:	08006e13 	.word	0x08006e13
 8006dd4:	08006e23 	.word	0x08006e23
 8006dd8:	08006e23 	.word	0x08006e23
 8006ddc:	08006e23 	.word	0x08006e23
 8006de0:	08006e1b 	.word	0x08006e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de4:	f7fe fac2 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8006de8:	61f8      	str	r0, [r7, #28]
        break;
 8006dea:	e020      	b.n	8006e2e <UART_SetConfig+0x342>
 8006dec:	efff69f3 	.word	0xefff69f3
 8006df0:	40008000 	.word	0x40008000
 8006df4:	40013800 	.word	0x40013800
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40004400 	.word	0x40004400
 8006e00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fe fac8 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 8006e08:	61f8      	str	r0, [r7, #28]
        break;
 8006e0a:	e010      	b.n	8006e2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <UART_SetConfig+0x454>)
 8006e0e:	61fb      	str	r3, [r7, #28]
        break;
 8006e10:	e00d      	b.n	8006e2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e12:	f7fe fa13 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8006e16:	61f8      	str	r0, [r7, #28]
        break;
 8006e18:	e009      	b.n	8006e2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e1e:	61fb      	str	r3, [r7, #28]
        break;
 8006e20:	e005      	b.n	8006e2e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d077      	beq.n	8006f24 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	005a      	lsls	r2, r3, #1
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	441a      	add	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b0f      	cmp	r3, #15
 8006e4e:	d916      	bls.n	8006e7e <UART_SetConfig+0x392>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e56:	d212      	bcs.n	8006e7e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f023 030f 	bic.w	r3, r3, #15
 8006e60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	8afb      	ldrh	r3, [r7, #22]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	8afa      	ldrh	r2, [r7, #22]
 8006e7a:	60da      	str	r2, [r3, #12]
 8006e7c:	e052      	b.n	8006f24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e84:	e04e      	b.n	8006f24 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d827      	bhi.n	8006ede <UART_SetConfig+0x3f2>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <UART_SetConfig+0x3a8>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	08006edf 	.word	0x08006edf
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	08006edf 	.word	0x08006edf
 8006eac:	08006edf 	.word	0x08006edf
 8006eb0:	08006edf 	.word	0x08006edf
 8006eb4:	08006ed7 	.word	0x08006ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb8:	f7fe fa58 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8006ebc:	61f8      	str	r0, [r7, #28]
        break;
 8006ebe:	e014      	b.n	8006eea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec0:	f7fe fa6a 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 8006ec4:	61f8      	str	r0, [r7, #28]
        break;
 8006ec6:	e010      	b.n	8006eea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <UART_SetConfig+0x454>)
 8006eca:	61fb      	str	r3, [r7, #28]
        break;
 8006ecc:	e00d      	b.n	8006eea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ece:	f7fe f9b5 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8006ed2:	61f8      	str	r0, [r7, #28]
        break;
 8006ed4:	e009      	b.n	8006eea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eda:	61fb      	str	r3, [r7, #28]
        break;
 8006edc:	e005      	b.n	8006eea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ee8:	bf00      	nop
    }

    if (pclk != 0U)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d019      	beq.n	8006f24 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	085a      	lsrs	r2, r3, #1
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d909      	bls.n	8006f1e <UART_SetConfig+0x432>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d205      	bcs.n	8006f1e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	e002      	b.n	8006f24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3728      	adds	r7, #40	; 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f3e:	bf00      	nop
 8006f40:	00f42400 	.word	0x00f42400

08006f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01a      	beq.n	800705a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007042:	d10a      	bne.n	800705a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
  }
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b098      	sub	sp, #96	; 0x60
 800708c:	af02      	add	r7, sp, #8
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007098:	f7fb fd00 	bl	8002a9c <HAL_GetTick>
 800709c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d12e      	bne.n	800710a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b4:	2200      	movs	r2, #0
 80070b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f88c 	bl	80071d8 <UART_WaitOnFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d021      	beq.n	800710a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070da:	653b      	str	r3, [r7, #80]	; 0x50
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
 80070e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e6      	bne.n	80070c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e062      	b.n	80071d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b04      	cmp	r3, #4
 8007116:	d149      	bne.n	80071ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007120:	2200      	movs	r2, #0
 8007122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f856 	bl	80071d8 <UART_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d03c      	beq.n	80071ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	623b      	str	r3, [r7, #32]
   return(result);
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	633b      	str	r3, [r7, #48]	; 0x30
 8007152:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	60fb      	str	r3, [r7, #12]
   return(result);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	64bb      	str	r3, [r7, #72]	; 0x48
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3308      	adds	r3, #8
 8007182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007184:	61fa      	str	r2, [r7, #28]
 8007186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	69b9      	ldr	r1, [r7, #24]
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	617b      	str	r3, [r7, #20]
   return(result);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e5      	bne.n	8007164 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e011      	b.n	80071d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3758      	adds	r7, #88	; 0x58
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	4613      	mov	r3, r2
 80071e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e8:	e049      	b.n	800727e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f0:	d045      	beq.n	800727e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f2:	f7fb fc53 	bl	8002a9c <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d302      	bcc.n	8007208 <UART_WaitOnFlagUntilTimeout+0x30>
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e048      	b.n	800729e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d031      	beq.n	800727e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b08      	cmp	r3, #8
 8007226:	d110      	bne.n	800724a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2208      	movs	r2, #8
 800722e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f838 	bl	80072a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2208      	movs	r2, #8
 800723a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e029      	b.n	800729e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007258:	d111      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f81e 	bl	80072a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e00f      	b.n	800729e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4013      	ands	r3, r2
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	bf0c      	ite	eq
 800728e:	2301      	moveq	r3, #1
 8007290:	2300      	movne	r3, #0
 8007292:	b2db      	uxtb	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	429a      	cmp	r2, r3
 800729a:	d0a6      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b095      	sub	sp, #84	; 0x54
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	643b      	str	r3, [r7, #64]	; 0x40
 80072ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f023 0301 	bic.w	r3, r3, #1
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007300:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007318:	2b01      	cmp	r3, #1
 800731a:	d118      	bne.n	800734e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	60bb      	str	r3, [r7, #8]
   return(result);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f023 0310 	bic.w	r3, r3, #16
 8007330:	647b      	str	r3, [r7, #68]	; 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	613b      	str	r3, [r7, #16]
   return(result);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e6      	bne.n	800731c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007362:	bf00      	nop
 8007364:	3754      	adds	r7, #84	; 0x54
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <malloc>:
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <malloc+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f000 b823 	b.w	80073c0 <_malloc_r>
 800737a:	bf00      	nop
 800737c:	20000058 	.word	0x20000058

08007380 <sbrk_aligned>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4e0e      	ldr	r6, [pc, #56]	; (80073bc <sbrk_aligned+0x3c>)
 8007384:	460c      	mov	r4, r1
 8007386:	6831      	ldr	r1, [r6, #0]
 8007388:	4605      	mov	r5, r0
 800738a:	b911      	cbnz	r1, 8007392 <sbrk_aligned+0x12>
 800738c:	f000 f8cc 	bl	8007528 <_sbrk_r>
 8007390:	6030      	str	r0, [r6, #0]
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f000 f8c7 	bl	8007528 <_sbrk_r>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d00a      	beq.n	80073b4 <sbrk_aligned+0x34>
 800739e:	1cc4      	adds	r4, r0, #3
 80073a0:	f024 0403 	bic.w	r4, r4, #3
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d007      	beq.n	80073b8 <sbrk_aligned+0x38>
 80073a8:	1a21      	subs	r1, r4, r0
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f8bc 	bl	8007528 <_sbrk_r>
 80073b0:	3001      	adds	r0, #1
 80073b2:	d101      	bne.n	80073b8 <sbrk_aligned+0x38>
 80073b4:	f04f 34ff 	mov.w	r4, #4294967295
 80073b8:	4620      	mov	r0, r4
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	20001e7c 	.word	0x20001e7c

080073c0 <_malloc_r>:
 80073c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c4:	1ccd      	adds	r5, r1, #3
 80073c6:	f025 0503 	bic.w	r5, r5, #3
 80073ca:	3508      	adds	r5, #8
 80073cc:	2d0c      	cmp	r5, #12
 80073ce:	bf38      	it	cc
 80073d0:	250c      	movcc	r5, #12
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	4607      	mov	r7, r0
 80073d6:	db01      	blt.n	80073dc <_malloc_r+0x1c>
 80073d8:	42a9      	cmp	r1, r5
 80073da:	d905      	bls.n	80073e8 <_malloc_r+0x28>
 80073dc:	230c      	movs	r3, #12
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	2600      	movs	r6, #0
 80073e2:	4630      	mov	r0, r6
 80073e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074bc <_malloc_r+0xfc>
 80073ec:	f000 f868 	bl	80074c0 <__malloc_lock>
 80073f0:	f8d8 3000 	ldr.w	r3, [r8]
 80073f4:	461c      	mov	r4, r3
 80073f6:	bb5c      	cbnz	r4, 8007450 <_malloc_r+0x90>
 80073f8:	4629      	mov	r1, r5
 80073fa:	4638      	mov	r0, r7
 80073fc:	f7ff ffc0 	bl	8007380 <sbrk_aligned>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	4604      	mov	r4, r0
 8007404:	d155      	bne.n	80074b2 <_malloc_r+0xf2>
 8007406:	f8d8 4000 	ldr.w	r4, [r8]
 800740a:	4626      	mov	r6, r4
 800740c:	2e00      	cmp	r6, #0
 800740e:	d145      	bne.n	800749c <_malloc_r+0xdc>
 8007410:	2c00      	cmp	r4, #0
 8007412:	d048      	beq.n	80074a6 <_malloc_r+0xe6>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	4631      	mov	r1, r6
 8007418:	4638      	mov	r0, r7
 800741a:	eb04 0903 	add.w	r9, r4, r3
 800741e:	f000 f883 	bl	8007528 <_sbrk_r>
 8007422:	4581      	cmp	r9, r0
 8007424:	d13f      	bne.n	80074a6 <_malloc_r+0xe6>
 8007426:	6821      	ldr	r1, [r4, #0]
 8007428:	1a6d      	subs	r5, r5, r1
 800742a:	4629      	mov	r1, r5
 800742c:	4638      	mov	r0, r7
 800742e:	f7ff ffa7 	bl	8007380 <sbrk_aligned>
 8007432:	3001      	adds	r0, #1
 8007434:	d037      	beq.n	80074a6 <_malloc_r+0xe6>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	442b      	add	r3, r5
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	f8d8 3000 	ldr.w	r3, [r8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d038      	beq.n	80074b6 <_malloc_r+0xf6>
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	42a2      	cmp	r2, r4
 8007448:	d12b      	bne.n	80074a2 <_malloc_r+0xe2>
 800744a:	2200      	movs	r2, #0
 800744c:	605a      	str	r2, [r3, #4]
 800744e:	e00f      	b.n	8007470 <_malloc_r+0xb0>
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	1b52      	subs	r2, r2, r5
 8007454:	d41f      	bmi.n	8007496 <_malloc_r+0xd6>
 8007456:	2a0b      	cmp	r2, #11
 8007458:	d917      	bls.n	800748a <_malloc_r+0xca>
 800745a:	1961      	adds	r1, r4, r5
 800745c:	42a3      	cmp	r3, r4
 800745e:	6025      	str	r5, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	6059      	strne	r1, [r3, #4]
 8007464:	6863      	ldr	r3, [r4, #4]
 8007466:	bf08      	it	eq
 8007468:	f8c8 1000 	streq.w	r1, [r8]
 800746c:	5162      	str	r2, [r4, r5]
 800746e:	604b      	str	r3, [r1, #4]
 8007470:	4638      	mov	r0, r7
 8007472:	f104 060b 	add.w	r6, r4, #11
 8007476:	f000 f829 	bl	80074cc <__malloc_unlock>
 800747a:	f026 0607 	bic.w	r6, r6, #7
 800747e:	1d23      	adds	r3, r4, #4
 8007480:	1af2      	subs	r2, r6, r3
 8007482:	d0ae      	beq.n	80073e2 <_malloc_r+0x22>
 8007484:	1b9b      	subs	r3, r3, r6
 8007486:	50a3      	str	r3, [r4, r2]
 8007488:	e7ab      	b.n	80073e2 <_malloc_r+0x22>
 800748a:	42a3      	cmp	r3, r4
 800748c:	6862      	ldr	r2, [r4, #4]
 800748e:	d1dd      	bne.n	800744c <_malloc_r+0x8c>
 8007490:	f8c8 2000 	str.w	r2, [r8]
 8007494:	e7ec      	b.n	8007470 <_malloc_r+0xb0>
 8007496:	4623      	mov	r3, r4
 8007498:	6864      	ldr	r4, [r4, #4]
 800749a:	e7ac      	b.n	80073f6 <_malloc_r+0x36>
 800749c:	4634      	mov	r4, r6
 800749e:	6876      	ldr	r6, [r6, #4]
 80074a0:	e7b4      	b.n	800740c <_malloc_r+0x4c>
 80074a2:	4613      	mov	r3, r2
 80074a4:	e7cc      	b.n	8007440 <_malloc_r+0x80>
 80074a6:	230c      	movs	r3, #12
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	4638      	mov	r0, r7
 80074ac:	f000 f80e 	bl	80074cc <__malloc_unlock>
 80074b0:	e797      	b.n	80073e2 <_malloc_r+0x22>
 80074b2:	6025      	str	r5, [r4, #0]
 80074b4:	e7dc      	b.n	8007470 <_malloc_r+0xb0>
 80074b6:	605b      	str	r3, [r3, #4]
 80074b8:	deff      	udf	#255	; 0xff
 80074ba:	bf00      	nop
 80074bc:	20001e78 	.word	0x20001e78

080074c0 <__malloc_lock>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__malloc_lock+0x8>)
 80074c2:	f000 b86b 	b.w	800759c <__retarget_lock_acquire_recursive>
 80074c6:	bf00      	nop
 80074c8:	20001fbc 	.word	0x20001fbc

080074cc <__malloc_unlock>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__malloc_unlock+0x8>)
 80074ce:	f000 b866 	b.w	800759e <__retarget_lock_release_recursive>
 80074d2:	bf00      	nop
 80074d4:	20001fbc 	.word	0x20001fbc

080074d8 <siprintf>:
 80074d8:	b40e      	push	{r1, r2, r3}
 80074da:	b500      	push	{lr}
 80074dc:	b09c      	sub	sp, #112	; 0x70
 80074de:	ab1d      	add	r3, sp, #116	; 0x74
 80074e0:	9002      	str	r0, [sp, #8]
 80074e2:	9006      	str	r0, [sp, #24]
 80074e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074e8:	4809      	ldr	r0, [pc, #36]	; (8007510 <siprintf+0x38>)
 80074ea:	9107      	str	r1, [sp, #28]
 80074ec:	9104      	str	r1, [sp, #16]
 80074ee:	4909      	ldr	r1, [pc, #36]	; (8007514 <siprintf+0x3c>)
 80074f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f4:	9105      	str	r1, [sp, #20]
 80074f6:	6800      	ldr	r0, [r0, #0]
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	a902      	add	r1, sp, #8
 80074fc:	f000 f8f6 	bl	80076ec <_svfiprintf_r>
 8007500:	9b02      	ldr	r3, [sp, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	b01c      	add	sp, #112	; 0x70
 8007508:	f85d eb04 	ldr.w	lr, [sp], #4
 800750c:	b003      	add	sp, #12
 800750e:	4770      	bx	lr
 8007510:	20000058 	.word	0x20000058
 8007514:	ffff0208 	.word	0xffff0208

08007518 <memset>:
 8007518:	4402      	add	r2, r0
 800751a:	4603      	mov	r3, r0
 800751c:	4293      	cmp	r3, r2
 800751e:	d100      	bne.n	8007522 <memset+0xa>
 8007520:	4770      	bx	lr
 8007522:	f803 1b01 	strb.w	r1, [r3], #1
 8007526:	e7f9      	b.n	800751c <memset+0x4>

08007528 <_sbrk_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_sbrk_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7fb f9be 	bl	80028b4 <_sbrk>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_sbrk_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_sbrk_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20001fb8 	.word	0x20001fb8

08007548 <__errno>:
 8007548:	4b01      	ldr	r3, [pc, #4]	; (8007550 <__errno+0x8>)
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000058 	.word	0x20000058

08007554 <__libc_init_array>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	4d0d      	ldr	r5, [pc, #52]	; (800758c <__libc_init_array+0x38>)
 8007558:	4c0d      	ldr	r4, [pc, #52]	; (8007590 <__libc_init_array+0x3c>)
 800755a:	1b64      	subs	r4, r4, r5
 800755c:	10a4      	asrs	r4, r4, #2
 800755e:	2600      	movs	r6, #0
 8007560:	42a6      	cmp	r6, r4
 8007562:	d109      	bne.n	8007578 <__libc_init_array+0x24>
 8007564:	4d0b      	ldr	r5, [pc, #44]	; (8007594 <__libc_init_array+0x40>)
 8007566:	4c0c      	ldr	r4, [pc, #48]	; (8007598 <__libc_init_array+0x44>)
 8007568:	f000 fbae 	bl	8007cc8 <_init>
 800756c:	1b64      	subs	r4, r4, r5
 800756e:	10a4      	asrs	r4, r4, #2
 8007570:	2600      	movs	r6, #0
 8007572:	42a6      	cmp	r6, r4
 8007574:	d105      	bne.n	8007582 <__libc_init_array+0x2e>
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	f855 3b04 	ldr.w	r3, [r5], #4
 800757c:	4798      	blx	r3
 800757e:	3601      	adds	r6, #1
 8007580:	e7ee      	b.n	8007560 <__libc_init_array+0xc>
 8007582:	f855 3b04 	ldr.w	r3, [r5], #4
 8007586:	4798      	blx	r3
 8007588:	3601      	adds	r6, #1
 800758a:	e7f2      	b.n	8007572 <__libc_init_array+0x1e>
 800758c:	08008b4c 	.word	0x08008b4c
 8007590:	08008b4c 	.word	0x08008b4c
 8007594:	08008b4c 	.word	0x08008b4c
 8007598:	08008b50 	.word	0x08008b50

0800759c <__retarget_lock_acquire_recursive>:
 800759c:	4770      	bx	lr

0800759e <__retarget_lock_release_recursive>:
 800759e:	4770      	bx	lr

080075a0 <_free_r>:
 80075a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a2:	2900      	cmp	r1, #0
 80075a4:	d044      	beq.n	8007630 <_free_r+0x90>
 80075a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075aa:	9001      	str	r0, [sp, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f1a1 0404 	sub.w	r4, r1, #4
 80075b2:	bfb8      	it	lt
 80075b4:	18e4      	addlt	r4, r4, r3
 80075b6:	f7ff ff83 	bl	80074c0 <__malloc_lock>
 80075ba:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <_free_r+0x94>)
 80075bc:	9801      	ldr	r0, [sp, #4]
 80075be:	6813      	ldr	r3, [r2, #0]
 80075c0:	b933      	cbnz	r3, 80075d0 <_free_r+0x30>
 80075c2:	6063      	str	r3, [r4, #4]
 80075c4:	6014      	str	r4, [r2, #0]
 80075c6:	b003      	add	sp, #12
 80075c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075cc:	f7ff bf7e 	b.w	80074cc <__malloc_unlock>
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	d908      	bls.n	80075e6 <_free_r+0x46>
 80075d4:	6825      	ldr	r5, [r4, #0]
 80075d6:	1961      	adds	r1, r4, r5
 80075d8:	428b      	cmp	r3, r1
 80075da:	bf01      	itttt	eq
 80075dc:	6819      	ldreq	r1, [r3, #0]
 80075de:	685b      	ldreq	r3, [r3, #4]
 80075e0:	1949      	addeq	r1, r1, r5
 80075e2:	6021      	streq	r1, [r4, #0]
 80075e4:	e7ed      	b.n	80075c2 <_free_r+0x22>
 80075e6:	461a      	mov	r2, r3
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	b10b      	cbz	r3, 80075f0 <_free_r+0x50>
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	d9fa      	bls.n	80075e6 <_free_r+0x46>
 80075f0:	6811      	ldr	r1, [r2, #0]
 80075f2:	1855      	adds	r5, r2, r1
 80075f4:	42a5      	cmp	r5, r4
 80075f6:	d10b      	bne.n	8007610 <_free_r+0x70>
 80075f8:	6824      	ldr	r4, [r4, #0]
 80075fa:	4421      	add	r1, r4
 80075fc:	1854      	adds	r4, r2, r1
 80075fe:	42a3      	cmp	r3, r4
 8007600:	6011      	str	r1, [r2, #0]
 8007602:	d1e0      	bne.n	80075c6 <_free_r+0x26>
 8007604:	681c      	ldr	r4, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	6053      	str	r3, [r2, #4]
 800760a:	440c      	add	r4, r1
 800760c:	6014      	str	r4, [r2, #0]
 800760e:	e7da      	b.n	80075c6 <_free_r+0x26>
 8007610:	d902      	bls.n	8007618 <_free_r+0x78>
 8007612:	230c      	movs	r3, #12
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	e7d6      	b.n	80075c6 <_free_r+0x26>
 8007618:	6825      	ldr	r5, [r4, #0]
 800761a:	1961      	adds	r1, r4, r5
 800761c:	428b      	cmp	r3, r1
 800761e:	bf04      	itt	eq
 8007620:	6819      	ldreq	r1, [r3, #0]
 8007622:	685b      	ldreq	r3, [r3, #4]
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	bf04      	itt	eq
 8007628:	1949      	addeq	r1, r1, r5
 800762a:	6021      	streq	r1, [r4, #0]
 800762c:	6054      	str	r4, [r2, #4]
 800762e:	e7ca      	b.n	80075c6 <_free_r+0x26>
 8007630:	b003      	add	sp, #12
 8007632:	bd30      	pop	{r4, r5, pc}
 8007634:	20001e78 	.word	0x20001e78

08007638 <__ssputs_r>:
 8007638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	688e      	ldr	r6, [r1, #8]
 800763e:	461f      	mov	r7, r3
 8007640:	42be      	cmp	r6, r7
 8007642:	680b      	ldr	r3, [r1, #0]
 8007644:	4682      	mov	sl, r0
 8007646:	460c      	mov	r4, r1
 8007648:	4690      	mov	r8, r2
 800764a:	d82c      	bhi.n	80076a6 <__ssputs_r+0x6e>
 800764c:	898a      	ldrh	r2, [r1, #12]
 800764e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007652:	d026      	beq.n	80076a2 <__ssputs_r+0x6a>
 8007654:	6965      	ldr	r5, [r4, #20]
 8007656:	6909      	ldr	r1, [r1, #16]
 8007658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800765c:	eba3 0901 	sub.w	r9, r3, r1
 8007660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007664:	1c7b      	adds	r3, r7, #1
 8007666:	444b      	add	r3, r9
 8007668:	106d      	asrs	r5, r5, #1
 800766a:	429d      	cmp	r5, r3
 800766c:	bf38      	it	cc
 800766e:	461d      	movcc	r5, r3
 8007670:	0553      	lsls	r3, r2, #21
 8007672:	d527      	bpl.n	80076c4 <__ssputs_r+0x8c>
 8007674:	4629      	mov	r1, r5
 8007676:	f7ff fea3 	bl	80073c0 <_malloc_r>
 800767a:	4606      	mov	r6, r0
 800767c:	b360      	cbz	r0, 80076d8 <__ssputs_r+0xa0>
 800767e:	6921      	ldr	r1, [r4, #16]
 8007680:	464a      	mov	r2, r9
 8007682:	f000 fadb 	bl	8007c3c <memcpy>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800768c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	6126      	str	r6, [r4, #16]
 8007694:	6165      	str	r5, [r4, #20]
 8007696:	444e      	add	r6, r9
 8007698:	eba5 0509 	sub.w	r5, r5, r9
 800769c:	6026      	str	r6, [r4, #0]
 800769e:	60a5      	str	r5, [r4, #8]
 80076a0:	463e      	mov	r6, r7
 80076a2:	42be      	cmp	r6, r7
 80076a4:	d900      	bls.n	80076a8 <__ssputs_r+0x70>
 80076a6:	463e      	mov	r6, r7
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	4632      	mov	r2, r6
 80076ac:	4641      	mov	r1, r8
 80076ae:	f000 faab 	bl	8007c08 <memmove>
 80076b2:	68a3      	ldr	r3, [r4, #8]
 80076b4:	1b9b      	subs	r3, r3, r6
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	4433      	add	r3, r6
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	2000      	movs	r0, #0
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	462a      	mov	r2, r5
 80076c6:	f000 fac7 	bl	8007c58 <_realloc_r>
 80076ca:	4606      	mov	r6, r0
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d1e0      	bne.n	8007692 <__ssputs_r+0x5a>
 80076d0:	6921      	ldr	r1, [r4, #16]
 80076d2:	4650      	mov	r0, sl
 80076d4:	f7ff ff64 	bl	80075a0 <_free_r>
 80076d8:	230c      	movs	r3, #12
 80076da:	f8ca 3000 	str.w	r3, [sl]
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ea:	e7e9      	b.n	80076c0 <__ssputs_r+0x88>

080076ec <_svfiprintf_r>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4698      	mov	r8, r3
 80076f2:	898b      	ldrh	r3, [r1, #12]
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	b09d      	sub	sp, #116	; 0x74
 80076f8:	4607      	mov	r7, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	d50e      	bpl.n	800771e <_svfiprintf_r+0x32>
 8007700:	690b      	ldr	r3, [r1, #16]
 8007702:	b963      	cbnz	r3, 800771e <_svfiprintf_r+0x32>
 8007704:	2140      	movs	r1, #64	; 0x40
 8007706:	f7ff fe5b 	bl	80073c0 <_malloc_r>
 800770a:	6028      	str	r0, [r5, #0]
 800770c:	6128      	str	r0, [r5, #16]
 800770e:	b920      	cbnz	r0, 800771a <_svfiprintf_r+0x2e>
 8007710:	230c      	movs	r3, #12
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e0d0      	b.n	80078bc <_svfiprintf_r+0x1d0>
 800771a:	2340      	movs	r3, #64	; 0x40
 800771c:	616b      	str	r3, [r5, #20]
 800771e:	2300      	movs	r3, #0
 8007720:	9309      	str	r3, [sp, #36]	; 0x24
 8007722:	2320      	movs	r3, #32
 8007724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007728:	f8cd 800c 	str.w	r8, [sp, #12]
 800772c:	2330      	movs	r3, #48	; 0x30
 800772e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078d4 <_svfiprintf_r+0x1e8>
 8007732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007736:	f04f 0901 	mov.w	r9, #1
 800773a:	4623      	mov	r3, r4
 800773c:	469a      	mov	sl, r3
 800773e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007742:	b10a      	cbz	r2, 8007748 <_svfiprintf_r+0x5c>
 8007744:	2a25      	cmp	r2, #37	; 0x25
 8007746:	d1f9      	bne.n	800773c <_svfiprintf_r+0x50>
 8007748:	ebba 0b04 	subs.w	fp, sl, r4
 800774c:	d00b      	beq.n	8007766 <_svfiprintf_r+0x7a>
 800774e:	465b      	mov	r3, fp
 8007750:	4622      	mov	r2, r4
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ff6f 	bl	8007638 <__ssputs_r>
 800775a:	3001      	adds	r0, #1
 800775c:	f000 80a9 	beq.w	80078b2 <_svfiprintf_r+0x1c6>
 8007760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007762:	445a      	add	r2, fp
 8007764:	9209      	str	r2, [sp, #36]	; 0x24
 8007766:	f89a 3000 	ldrb.w	r3, [sl]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80a1 	beq.w	80078b2 <_svfiprintf_r+0x1c6>
 8007770:	2300      	movs	r3, #0
 8007772:	f04f 32ff 	mov.w	r2, #4294967295
 8007776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777a:	f10a 0a01 	add.w	sl, sl, #1
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007786:	931a      	str	r3, [sp, #104]	; 0x68
 8007788:	4654      	mov	r4, sl
 800778a:	2205      	movs	r2, #5
 800778c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007790:	4850      	ldr	r0, [pc, #320]	; (80078d4 <_svfiprintf_r+0x1e8>)
 8007792:	f7f8 fd25 	bl	80001e0 <memchr>
 8007796:	9a04      	ldr	r2, [sp, #16]
 8007798:	b9d8      	cbnz	r0, 80077d2 <_svfiprintf_r+0xe6>
 800779a:	06d0      	lsls	r0, r2, #27
 800779c:	bf44      	itt	mi
 800779e:	2320      	movmi	r3, #32
 80077a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a4:	0711      	lsls	r1, r2, #28
 80077a6:	bf44      	itt	mi
 80077a8:	232b      	movmi	r3, #43	; 0x2b
 80077aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ae:	f89a 3000 	ldrb.w	r3, [sl]
 80077b2:	2b2a      	cmp	r3, #42	; 0x2a
 80077b4:	d015      	beq.n	80077e2 <_svfiprintf_r+0xf6>
 80077b6:	9a07      	ldr	r2, [sp, #28]
 80077b8:	4654      	mov	r4, sl
 80077ba:	2000      	movs	r0, #0
 80077bc:	f04f 0c0a 	mov.w	ip, #10
 80077c0:	4621      	mov	r1, r4
 80077c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c6:	3b30      	subs	r3, #48	; 0x30
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d94d      	bls.n	8007868 <_svfiprintf_r+0x17c>
 80077cc:	b1b0      	cbz	r0, 80077fc <_svfiprintf_r+0x110>
 80077ce:	9207      	str	r2, [sp, #28]
 80077d0:	e014      	b.n	80077fc <_svfiprintf_r+0x110>
 80077d2:	eba0 0308 	sub.w	r3, r0, r8
 80077d6:	fa09 f303 	lsl.w	r3, r9, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	46a2      	mov	sl, r4
 80077e0:	e7d2      	b.n	8007788 <_svfiprintf_r+0x9c>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	1d19      	adds	r1, r3, #4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	9103      	str	r1, [sp, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bfbb      	ittet	lt
 80077ee:	425b      	neglt	r3, r3
 80077f0:	f042 0202 	orrlt.w	r2, r2, #2
 80077f4:	9307      	strge	r3, [sp, #28]
 80077f6:	9307      	strlt	r3, [sp, #28]
 80077f8:	bfb8      	it	lt
 80077fa:	9204      	strlt	r2, [sp, #16]
 80077fc:	7823      	ldrb	r3, [r4, #0]
 80077fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007800:	d10c      	bne.n	800781c <_svfiprintf_r+0x130>
 8007802:	7863      	ldrb	r3, [r4, #1]
 8007804:	2b2a      	cmp	r3, #42	; 0x2a
 8007806:	d134      	bne.n	8007872 <_svfiprintf_r+0x186>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9203      	str	r2, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfb8      	it	lt
 8007814:	f04f 33ff 	movlt.w	r3, #4294967295
 8007818:	3402      	adds	r4, #2
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078e4 <_svfiprintf_r+0x1f8>
 8007820:	7821      	ldrb	r1, [r4, #0]
 8007822:	2203      	movs	r2, #3
 8007824:	4650      	mov	r0, sl
 8007826:	f7f8 fcdb 	bl	80001e0 <memchr>
 800782a:	b138      	cbz	r0, 800783c <_svfiprintf_r+0x150>
 800782c:	9b04      	ldr	r3, [sp, #16]
 800782e:	eba0 000a 	sub.w	r0, r0, sl
 8007832:	2240      	movs	r2, #64	; 0x40
 8007834:	4082      	lsls	r2, r0
 8007836:	4313      	orrs	r3, r2
 8007838:	3401      	adds	r4, #1
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	4825      	ldr	r0, [pc, #148]	; (80078d8 <_svfiprintf_r+0x1ec>)
 8007842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007846:	2206      	movs	r2, #6
 8007848:	f7f8 fcca 	bl	80001e0 <memchr>
 800784c:	2800      	cmp	r0, #0
 800784e:	d038      	beq.n	80078c2 <_svfiprintf_r+0x1d6>
 8007850:	4b22      	ldr	r3, [pc, #136]	; (80078dc <_svfiprintf_r+0x1f0>)
 8007852:	bb1b      	cbnz	r3, 800789c <_svfiprintf_r+0x1b0>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	3308      	adds	r3, #8
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	4433      	add	r3, r6
 8007864:	9309      	str	r3, [sp, #36]	; 0x24
 8007866:	e768      	b.n	800773a <_svfiprintf_r+0x4e>
 8007868:	fb0c 3202 	mla	r2, ip, r2, r3
 800786c:	460c      	mov	r4, r1
 800786e:	2001      	movs	r0, #1
 8007870:	e7a6      	b.n	80077c0 <_svfiprintf_r+0xd4>
 8007872:	2300      	movs	r3, #0
 8007874:	3401      	adds	r4, #1
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	4619      	mov	r1, r3
 800787a:	f04f 0c0a 	mov.w	ip, #10
 800787e:	4620      	mov	r0, r4
 8007880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007884:	3a30      	subs	r2, #48	; 0x30
 8007886:	2a09      	cmp	r2, #9
 8007888:	d903      	bls.n	8007892 <_svfiprintf_r+0x1a6>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0c6      	beq.n	800781c <_svfiprintf_r+0x130>
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	e7c4      	b.n	800781c <_svfiprintf_r+0x130>
 8007892:	fb0c 2101 	mla	r1, ip, r1, r2
 8007896:	4604      	mov	r4, r0
 8007898:	2301      	movs	r3, #1
 800789a:	e7f0      	b.n	800787e <_svfiprintf_r+0x192>
 800789c:	ab03      	add	r3, sp, #12
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	462a      	mov	r2, r5
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <_svfiprintf_r+0x1f4>)
 80078a4:	a904      	add	r1, sp, #16
 80078a6:	4638      	mov	r0, r7
 80078a8:	f3af 8000 	nop.w
 80078ac:	1c42      	adds	r2, r0, #1
 80078ae:	4606      	mov	r6, r0
 80078b0:	d1d6      	bne.n	8007860 <_svfiprintf_r+0x174>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	065b      	lsls	r3, r3, #25
 80078b6:	f53f af2d 	bmi.w	8007714 <_svfiprintf_r+0x28>
 80078ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078bc:	b01d      	add	sp, #116	; 0x74
 80078be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c2:	ab03      	add	r3, sp, #12
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	462a      	mov	r2, r5
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <_svfiprintf_r+0x1f4>)
 80078ca:	a904      	add	r1, sp, #16
 80078cc:	4638      	mov	r0, r7
 80078ce:	f000 f879 	bl	80079c4 <_printf_i>
 80078d2:	e7eb      	b.n	80078ac <_svfiprintf_r+0x1c0>
 80078d4:	08008b10 	.word	0x08008b10
 80078d8:	08008b1a 	.word	0x08008b1a
 80078dc:	00000000 	.word	0x00000000
 80078e0:	08007639 	.word	0x08007639
 80078e4:	08008b16 	.word	0x08008b16

080078e8 <_printf_common>:
 80078e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	4616      	mov	r6, r2
 80078ee:	4699      	mov	r9, r3
 80078f0:	688a      	ldr	r2, [r1, #8]
 80078f2:	690b      	ldr	r3, [r1, #16]
 80078f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bfb8      	it	lt
 80078fc:	4613      	movlt	r3, r2
 80078fe:	6033      	str	r3, [r6, #0]
 8007900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007904:	4607      	mov	r7, r0
 8007906:	460c      	mov	r4, r1
 8007908:	b10a      	cbz	r2, 800790e <_printf_common+0x26>
 800790a:	3301      	adds	r3, #1
 800790c:	6033      	str	r3, [r6, #0]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	0699      	lsls	r1, r3, #26
 8007912:	bf42      	ittt	mi
 8007914:	6833      	ldrmi	r3, [r6, #0]
 8007916:	3302      	addmi	r3, #2
 8007918:	6033      	strmi	r3, [r6, #0]
 800791a:	6825      	ldr	r5, [r4, #0]
 800791c:	f015 0506 	ands.w	r5, r5, #6
 8007920:	d106      	bne.n	8007930 <_printf_common+0x48>
 8007922:	f104 0a19 	add.w	sl, r4, #25
 8007926:	68e3      	ldr	r3, [r4, #12]
 8007928:	6832      	ldr	r2, [r6, #0]
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	42ab      	cmp	r3, r5
 800792e:	dc26      	bgt.n	800797e <_printf_common+0x96>
 8007930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007934:	1e13      	subs	r3, r2, #0
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	bf18      	it	ne
 800793a:	2301      	movne	r3, #1
 800793c:	0692      	lsls	r2, r2, #26
 800793e:	d42b      	bmi.n	8007998 <_printf_common+0xb0>
 8007940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007944:	4649      	mov	r1, r9
 8007946:	4638      	mov	r0, r7
 8007948:	47c0      	blx	r8
 800794a:	3001      	adds	r0, #1
 800794c:	d01e      	beq.n	800798c <_printf_common+0xa4>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	6922      	ldr	r2, [r4, #16]
 8007952:	f003 0306 	and.w	r3, r3, #6
 8007956:	2b04      	cmp	r3, #4
 8007958:	bf02      	ittt	eq
 800795a:	68e5      	ldreq	r5, [r4, #12]
 800795c:	6833      	ldreq	r3, [r6, #0]
 800795e:	1aed      	subeq	r5, r5, r3
 8007960:	68a3      	ldr	r3, [r4, #8]
 8007962:	bf0c      	ite	eq
 8007964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007968:	2500      	movne	r5, #0
 800796a:	4293      	cmp	r3, r2
 800796c:	bfc4      	itt	gt
 800796e:	1a9b      	subgt	r3, r3, r2
 8007970:	18ed      	addgt	r5, r5, r3
 8007972:	2600      	movs	r6, #0
 8007974:	341a      	adds	r4, #26
 8007976:	42b5      	cmp	r5, r6
 8007978:	d11a      	bne.n	80079b0 <_printf_common+0xc8>
 800797a:	2000      	movs	r0, #0
 800797c:	e008      	b.n	8007990 <_printf_common+0xa8>
 800797e:	2301      	movs	r3, #1
 8007980:	4652      	mov	r2, sl
 8007982:	4649      	mov	r1, r9
 8007984:	4638      	mov	r0, r7
 8007986:	47c0      	blx	r8
 8007988:	3001      	adds	r0, #1
 800798a:	d103      	bne.n	8007994 <_printf_common+0xac>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007994:	3501      	adds	r5, #1
 8007996:	e7c6      	b.n	8007926 <_printf_common+0x3e>
 8007998:	18e1      	adds	r1, r4, r3
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	2030      	movs	r0, #48	; 0x30
 800799e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079a2:	4422      	add	r2, r4
 80079a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ac:	3302      	adds	r3, #2
 80079ae:	e7c7      	b.n	8007940 <_printf_common+0x58>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4622      	mov	r2, r4
 80079b4:	4649      	mov	r1, r9
 80079b6:	4638      	mov	r0, r7
 80079b8:	47c0      	blx	r8
 80079ba:	3001      	adds	r0, #1
 80079bc:	d0e6      	beq.n	800798c <_printf_common+0xa4>
 80079be:	3601      	adds	r6, #1
 80079c0:	e7d9      	b.n	8007976 <_printf_common+0x8e>
	...

080079c4 <_printf_i>:
 80079c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	7e0f      	ldrb	r7, [r1, #24]
 80079ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079cc:	2f78      	cmp	r7, #120	; 0x78
 80079ce:	4691      	mov	r9, r2
 80079d0:	4680      	mov	r8, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	469a      	mov	sl, r3
 80079d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079da:	d807      	bhi.n	80079ec <_printf_i+0x28>
 80079dc:	2f62      	cmp	r7, #98	; 0x62
 80079de:	d80a      	bhi.n	80079f6 <_printf_i+0x32>
 80079e0:	2f00      	cmp	r7, #0
 80079e2:	f000 80d4 	beq.w	8007b8e <_printf_i+0x1ca>
 80079e6:	2f58      	cmp	r7, #88	; 0x58
 80079e8:	f000 80c0 	beq.w	8007b6c <_printf_i+0x1a8>
 80079ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079f4:	e03a      	b.n	8007a6c <_printf_i+0xa8>
 80079f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079fa:	2b15      	cmp	r3, #21
 80079fc:	d8f6      	bhi.n	80079ec <_printf_i+0x28>
 80079fe:	a101      	add	r1, pc, #4	; (adr r1, 8007a04 <_printf_i+0x40>)
 8007a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a04:	08007a5d 	.word	0x08007a5d
 8007a08:	08007a71 	.word	0x08007a71
 8007a0c:	080079ed 	.word	0x080079ed
 8007a10:	080079ed 	.word	0x080079ed
 8007a14:	080079ed 	.word	0x080079ed
 8007a18:	080079ed 	.word	0x080079ed
 8007a1c:	08007a71 	.word	0x08007a71
 8007a20:	080079ed 	.word	0x080079ed
 8007a24:	080079ed 	.word	0x080079ed
 8007a28:	080079ed 	.word	0x080079ed
 8007a2c:	080079ed 	.word	0x080079ed
 8007a30:	08007b75 	.word	0x08007b75
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007b2f 	.word	0x08007b2f
 8007a3c:	080079ed 	.word	0x080079ed
 8007a40:	080079ed 	.word	0x080079ed
 8007a44:	08007b97 	.word	0x08007b97
 8007a48:	080079ed 	.word	0x080079ed
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	080079ed 	.word	0x080079ed
 8007a54:	080079ed 	.word	0x080079ed
 8007a58:	08007b37 	.word	0x08007b37
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	1d1a      	adds	r2, r3, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	602a      	str	r2, [r5, #0]
 8007a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e09f      	b.n	8007bb0 <_printf_i+0x1ec>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	0607      	lsls	r7, r0, #24
 8007a76:	f103 0104 	add.w	r1, r3, #4
 8007a7a:	6029      	str	r1, [r5, #0]
 8007a7c:	d501      	bpl.n	8007a82 <_printf_i+0xbe>
 8007a7e:	681e      	ldr	r6, [r3, #0]
 8007a80:	e003      	b.n	8007a8a <_printf_i+0xc6>
 8007a82:	0646      	lsls	r6, r0, #25
 8007a84:	d5fb      	bpl.n	8007a7e <_printf_i+0xba>
 8007a86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a8a:	2e00      	cmp	r6, #0
 8007a8c:	da03      	bge.n	8007a96 <_printf_i+0xd2>
 8007a8e:	232d      	movs	r3, #45	; 0x2d
 8007a90:	4276      	negs	r6, r6
 8007a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a96:	485a      	ldr	r0, [pc, #360]	; (8007c00 <_printf_i+0x23c>)
 8007a98:	230a      	movs	r3, #10
 8007a9a:	e012      	b.n	8007ac2 <_printf_i+0xfe>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	6820      	ldr	r0, [r4, #0]
 8007aa0:	1d19      	adds	r1, r3, #4
 8007aa2:	6029      	str	r1, [r5, #0]
 8007aa4:	0605      	lsls	r5, r0, #24
 8007aa6:	d501      	bpl.n	8007aac <_printf_i+0xe8>
 8007aa8:	681e      	ldr	r6, [r3, #0]
 8007aaa:	e002      	b.n	8007ab2 <_printf_i+0xee>
 8007aac:	0641      	lsls	r1, r0, #25
 8007aae:	d5fb      	bpl.n	8007aa8 <_printf_i+0xe4>
 8007ab0:	881e      	ldrh	r6, [r3, #0]
 8007ab2:	4853      	ldr	r0, [pc, #332]	; (8007c00 <_printf_i+0x23c>)
 8007ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2308      	moveq	r3, #8
 8007aba:	230a      	movne	r3, #10
 8007abc:	2100      	movs	r1, #0
 8007abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ac2:	6865      	ldr	r5, [r4, #4]
 8007ac4:	60a5      	str	r5, [r4, #8]
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	bfa2      	ittt	ge
 8007aca:	6821      	ldrge	r1, [r4, #0]
 8007acc:	f021 0104 	bicge.w	r1, r1, #4
 8007ad0:	6021      	strge	r1, [r4, #0]
 8007ad2:	b90e      	cbnz	r6, 8007ad8 <_printf_i+0x114>
 8007ad4:	2d00      	cmp	r5, #0
 8007ad6:	d04b      	beq.n	8007b70 <_printf_i+0x1ac>
 8007ad8:	4615      	mov	r5, r2
 8007ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ade:	fb03 6711 	mls	r7, r3, r1, r6
 8007ae2:	5dc7      	ldrb	r7, [r0, r7]
 8007ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ae8:	4637      	mov	r7, r6
 8007aea:	42bb      	cmp	r3, r7
 8007aec:	460e      	mov	r6, r1
 8007aee:	d9f4      	bls.n	8007ada <_printf_i+0x116>
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d10b      	bne.n	8007b0c <_printf_i+0x148>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	07de      	lsls	r6, r3, #31
 8007af8:	d508      	bpl.n	8007b0c <_printf_i+0x148>
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	6861      	ldr	r1, [r4, #4]
 8007afe:	4299      	cmp	r1, r3
 8007b00:	bfde      	ittt	le
 8007b02:	2330      	movle	r3, #48	; 0x30
 8007b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b0c:	1b52      	subs	r2, r2, r5
 8007b0e:	6122      	str	r2, [r4, #16]
 8007b10:	f8cd a000 	str.w	sl, [sp]
 8007b14:	464b      	mov	r3, r9
 8007b16:	aa03      	add	r2, sp, #12
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	f7ff fee4 	bl	80078e8 <_printf_common>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d14a      	bne.n	8007bba <_printf_i+0x1f6>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	b004      	add	sp, #16
 8007b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	f043 0320 	orr.w	r3, r3, #32
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	4833      	ldr	r0, [pc, #204]	; (8007c04 <_printf_i+0x240>)
 8007b38:	2778      	movs	r7, #120	; 0x78
 8007b3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	6829      	ldr	r1, [r5, #0]
 8007b42:	061f      	lsls	r7, r3, #24
 8007b44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b48:	d402      	bmi.n	8007b50 <_printf_i+0x18c>
 8007b4a:	065f      	lsls	r7, r3, #25
 8007b4c:	bf48      	it	mi
 8007b4e:	b2b6      	uxthmi	r6, r6
 8007b50:	07df      	lsls	r7, r3, #31
 8007b52:	bf48      	it	mi
 8007b54:	f043 0320 	orrmi.w	r3, r3, #32
 8007b58:	6029      	str	r1, [r5, #0]
 8007b5a:	bf48      	it	mi
 8007b5c:	6023      	strmi	r3, [r4, #0]
 8007b5e:	b91e      	cbnz	r6, 8007b68 <_printf_i+0x1a4>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	f023 0320 	bic.w	r3, r3, #32
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	2310      	movs	r3, #16
 8007b6a:	e7a7      	b.n	8007abc <_printf_i+0xf8>
 8007b6c:	4824      	ldr	r0, [pc, #144]	; (8007c00 <_printf_i+0x23c>)
 8007b6e:	e7e4      	b.n	8007b3a <_printf_i+0x176>
 8007b70:	4615      	mov	r5, r2
 8007b72:	e7bd      	b.n	8007af0 <_printf_i+0x12c>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	6826      	ldr	r6, [r4, #0]
 8007b78:	6961      	ldr	r1, [r4, #20]
 8007b7a:	1d18      	adds	r0, r3, #4
 8007b7c:	6028      	str	r0, [r5, #0]
 8007b7e:	0635      	lsls	r5, r6, #24
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	d501      	bpl.n	8007b88 <_printf_i+0x1c4>
 8007b84:	6019      	str	r1, [r3, #0]
 8007b86:	e002      	b.n	8007b8e <_printf_i+0x1ca>
 8007b88:	0670      	lsls	r0, r6, #25
 8007b8a:	d5fb      	bpl.n	8007b84 <_printf_i+0x1c0>
 8007b8c:	8019      	strh	r1, [r3, #0]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	4615      	mov	r5, r2
 8007b94:	e7bc      	b.n	8007b10 <_printf_i+0x14c>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	6862      	ldr	r2, [r4, #4]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7f8 fb1c 	bl	80001e0 <memchr>
 8007ba8:	b108      	cbz	r0, 8007bae <_printf_i+0x1ea>
 8007baa:	1b40      	subs	r0, r0, r5
 8007bac:	6060      	str	r0, [r4, #4]
 8007bae:	6863      	ldr	r3, [r4, #4]
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb8:	e7aa      	b.n	8007b10 <_printf_i+0x14c>
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	47d0      	blx	sl
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d0ad      	beq.n	8007b24 <_printf_i+0x160>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	079b      	lsls	r3, r3, #30
 8007bcc:	d413      	bmi.n	8007bf6 <_printf_i+0x232>
 8007bce:	68e0      	ldr	r0, [r4, #12]
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	4298      	cmp	r0, r3
 8007bd4:	bfb8      	it	lt
 8007bd6:	4618      	movlt	r0, r3
 8007bd8:	e7a6      	b.n	8007b28 <_printf_i+0x164>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4649      	mov	r1, r9
 8007be0:	4640      	mov	r0, r8
 8007be2:	47d0      	blx	sl
 8007be4:	3001      	adds	r0, #1
 8007be6:	d09d      	beq.n	8007b24 <_printf_i+0x160>
 8007be8:	3501      	adds	r5, #1
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	9903      	ldr	r1, [sp, #12]
 8007bee:	1a5b      	subs	r3, r3, r1
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dcf2      	bgt.n	8007bda <_printf_i+0x216>
 8007bf4:	e7eb      	b.n	8007bce <_printf_i+0x20a>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	f104 0619 	add.w	r6, r4, #25
 8007bfc:	e7f5      	b.n	8007bea <_printf_i+0x226>
 8007bfe:	bf00      	nop
 8007c00:	08008b21 	.word	0x08008b21
 8007c04:	08008b32 	.word	0x08008b32

08007c08 <memmove>:
 8007c08:	4288      	cmp	r0, r1
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	eb01 0402 	add.w	r4, r1, r2
 8007c10:	d902      	bls.n	8007c18 <memmove+0x10>
 8007c12:	4284      	cmp	r4, r0
 8007c14:	4623      	mov	r3, r4
 8007c16:	d807      	bhi.n	8007c28 <memmove+0x20>
 8007c18:	1e43      	subs	r3, r0, #1
 8007c1a:	42a1      	cmp	r1, r4
 8007c1c:	d008      	beq.n	8007c30 <memmove+0x28>
 8007c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c26:	e7f8      	b.n	8007c1a <memmove+0x12>
 8007c28:	4402      	add	r2, r0
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	428a      	cmp	r2, r1
 8007c2e:	d100      	bne.n	8007c32 <memmove+0x2a>
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c3a:	e7f7      	b.n	8007c2c <memmove+0x24>

08007c3c <memcpy>:
 8007c3c:	440a      	add	r2, r1
 8007c3e:	4291      	cmp	r1, r2
 8007c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c44:	d100      	bne.n	8007c48 <memcpy+0xc>
 8007c46:	4770      	bx	lr
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c52:	4291      	cmp	r1, r2
 8007c54:	d1f9      	bne.n	8007c4a <memcpy+0xe>
 8007c56:	bd10      	pop	{r4, pc}

08007c58 <_realloc_r>:
 8007c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	4614      	mov	r4, r2
 8007c60:	460e      	mov	r6, r1
 8007c62:	b921      	cbnz	r1, 8007c6e <_realloc_r+0x16>
 8007c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c68:	4611      	mov	r1, r2
 8007c6a:	f7ff bba9 	b.w	80073c0 <_malloc_r>
 8007c6e:	b92a      	cbnz	r2, 8007c7c <_realloc_r+0x24>
 8007c70:	f7ff fc96 	bl	80075a0 <_free_r>
 8007c74:	4625      	mov	r5, r4
 8007c76:	4628      	mov	r0, r5
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c7c:	f000 f81b 	bl	8007cb6 <_malloc_usable_size_r>
 8007c80:	4284      	cmp	r4, r0
 8007c82:	4607      	mov	r7, r0
 8007c84:	d802      	bhi.n	8007c8c <_realloc_r+0x34>
 8007c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c8a:	d812      	bhi.n	8007cb2 <_realloc_r+0x5a>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7ff fb96 	bl	80073c0 <_malloc_r>
 8007c94:	4605      	mov	r5, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d0ed      	beq.n	8007c76 <_realloc_r+0x1e>
 8007c9a:	42bc      	cmp	r4, r7
 8007c9c:	4622      	mov	r2, r4
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	bf28      	it	cs
 8007ca2:	463a      	movcs	r2, r7
 8007ca4:	f7ff ffca 	bl	8007c3c <memcpy>
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4640      	mov	r0, r8
 8007cac:	f7ff fc78 	bl	80075a0 <_free_r>
 8007cb0:	e7e1      	b.n	8007c76 <_realloc_r+0x1e>
 8007cb2:	4635      	mov	r5, r6
 8007cb4:	e7df      	b.n	8007c76 <_realloc_r+0x1e>

08007cb6 <_malloc_usable_size_r>:
 8007cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cba:	1f18      	subs	r0, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bfbc      	itt	lt
 8007cc0:	580b      	ldrlt	r3, [r1, r0]
 8007cc2:	18c0      	addlt	r0, r0, r3
 8007cc4:	4770      	bx	lr
	...

08007cc8 <_init>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_fini>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr
