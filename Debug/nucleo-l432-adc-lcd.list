
nucleo-l432-adc-lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001464  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c54  08008c54  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004704  20000060  08008cbc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20004764  08008cbc  00024764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acd9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ee  00000000  00000000  0003adac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001115  00000000  00000000  0003faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024840  00000000  00000000  00040bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b400  00000000  00000000  000653fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ded2b  00000000  00000000  000807fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006228  00000000  00000000  0015f528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00165750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077d0 	.word	0x080077d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080077d0 	.word	0x080077d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <init_bt>:
#include <string.h>
#include "bt.h"

UART_HandleTypeDef* bt_uart_hal;

void init_bt(UART_HandleTypeDef* uart) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  bt_uart_hal = uart;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <init_bt+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000007c 	.word	0x2000007c

0800059c <bt_send>:

void bt_send(char* message) {
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(bt_uart_hal, (uint8_t*) message, strlen(message), 100);
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <bt_send+0x28>)
 80005a6:	681c      	ldr	r4, [r3, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe11 	bl	80001d0 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	4620      	mov	r0, r4
 80005b8:	f005 ff92 	bl	80064e0 <HAL_UART_Transmit>
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <init_display>:

void init_display(SPI_HandleTypeDef* spi,
    TIM_HandleTypeDef* timer,
    ADC_HandleTypeDef* adc,
    UART_HandleTypeDef* uart,
    UART_HandleTypeDef* uart_bt) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b092      	sub	sp, #72	; 0x48
 80005cc:	af0a      	add	r7, sp, #40	; 0x28
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	603b      	str	r3, [r7, #0]
  timer_hal = timer;
 80005d6:	4a2d      	ldr	r2, [pc, #180]	; (800068c <init_display+0xc4>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	6013      	str	r3, [r2, #0]
  uart_hal = uart;
 80005dc:	4a2c      	ldr	r2, [pc, #176]	; (8000690 <init_display+0xc8>)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	6013      	str	r3, [r2, #0]

  init_bt(uart_bt);
 80005e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005e4:	f7ff ffca 	bl	800057c <init_bt>
  bt_send("max voltage: 3300\r\n");
 80005e8:	482a      	ldr	r0, [pc, #168]	; (8000694 <init_display+0xcc>)
 80005ea:	f7ff ffd7 	bl	800059c <bt_send>
  bt_send("data rate: 120\r\n");
 80005ee:	482a      	ldr	r0, [pc, #168]	; (8000698 <init_display+0xd0>)
 80005f0:	f7ff ffd4 	bl	800059c <bt_send>

  ili9341_lcd = ili9341_new(
 80005f4:	2301      	movs	r3, #1
 80005f6:	9309      	str	r3, [sp, #36]	; 0x24
 80005f8:	2301      	movs	r3, #1
 80005fa:	9308      	str	r3, [sp, #32]
 80005fc:	2340      	movs	r3, #64	; 0x40
 80005fe:	9307      	str	r3, [sp, #28]
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	9306      	str	r3, [sp, #24]
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	9305      	str	r3, [sp, #20]
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	9304      	str	r3, [sp, #16]
 8000612:	2301      	movs	r3, #1
 8000614:	9303      	str	r3, [sp, #12]
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <init_display+0xd4>)
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <init_display+0xd4>)
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	491d      	ldr	r1, [pc, #116]	; (800069c <init_display+0xd4>)
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f000 f96f 	bl	800090c <ili9341_new>
 800062e:	4603      	mov	r3, r0
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <init_display+0xd8>)
 8000632:	6013      	str	r3, [r2, #0]
          isoLandscape,
          TOUCH_CS_GPIO_Port,  TOUCH_CS_Pin,
          TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin,
          itsSupported,
          itnNormalized);
  ili9341_spi_tft_select(ili9341_lcd);
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <init_display+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa81 	bl	8000b40 <ili9341_spi_tft_select>
  ili9341_fill_screen(ili9341_lcd, ILI9341_BLACK);
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <init_display+0xd8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <init_display+0xdc>)
 8000644:	8812      	ldrh	r2, [r2, #0]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 ffdf 	bl	800160c <ili9341_fill_screen>

  ili9341_text_attr_t attr;
  attr.bg_color = ILI9341_BLACK;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <init_display+0xdc>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	837b      	strh	r3, [r7, #26]
  attr.fg_color = ILI9341_LIGHTGREY;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <init_display+0xe0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	833b      	strh	r3, [r7, #24]
  attr.font = &ili9341_font_16x26;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <init_display+0xe4>)
 800065c:	617b      	str	r3, [r7, #20]
  attr.origin_x = 120;
 800065e:	2378      	movs	r3, #120	; 0x78
 8000660:	83bb      	strh	r3, [r7, #28]
  attr.origin_y = 100;
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	83fb      	strh	r3, [r7, #30]
  ili9341_draw_string(ili9341_lcd, attr, "ECG");
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <init_display+0xd8>)
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <init_display+0xe8>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000674:	f001 f8c8 	bl	8001808 <ili9341_draw_string>

  HAL_ADC_Start_DMA(adc, (uint32_t*) dma_values, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	490e      	ldr	r1, [pc, #56]	; (80006b4 <init_display+0xec>)
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f002 facb 	bl	8002c18 <HAL_ADC_Start_DMA>
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000080 	.word	0x20000080
 8000690:	20000084 	.word	0x20000084
 8000694:	080077e8 	.word	0x080077e8
 8000698:	080077fc 	.word	0x080077fc
 800069c:	48000400 	.word	0x48000400
 80006a0:	20000088 	.word	0x20000088
 80006a4:	08008bca 	.word	0x08008bca
 80006a8:	08008bcc 	.word	0x08008bcc
 80006ac:	0800787c 	.word	0x0800787c
 80006b0:	08007810 	.word	0x08007810
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <translate_y>:

void printToUart(UART_HandleTypeDef *huart, char *msg) {
  HAL_UART_Transmit(huart, (uint8_t*) msg, strlen(msg), 100);
}

uint16_t translate_y(uint16_t value) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
  return ili9341_lcd->screen_size.height - 1 - (value - min_y) * (float) ili9341_lcd->screen_size.height / (max_y - min_y);
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <translate_y+0x70>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	8bdb      	ldrh	r3, [r3, #30]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <translate_y+0x74>)
 80006d6:	8812      	ldrh	r2, [r2, #0]
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <translate_y+0x70>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	8bdb      	ldrh	r3, [r3, #30]
 80006e8:	ee07 3a90 	vmov	s15, r3
 80006ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <translate_y+0x78>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <translate_y+0x74>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000708:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800070c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000714:	ee17 3a90 	vmov	r3, s15
 8000718:	b29b      	uxth	r3, r3
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000088 	.word	0x20000088
 800072c:	20000000 	.word	0x20000000
 8000730:	20000002 	.word	0x20000002

08000734 <display_graph>:

void display_graph() {
 8000734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000738:	b09f      	sub	sp, #124	; 0x7c
 800073a:	af02      	add	r7, sp, #8
  if (fill_index > draw_index) {
 800073c:	4b52      	ldr	r3, [pc, #328]	; (8000888 <display_graph+0x154>)
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	4b52      	ldr	r3, [pc, #328]	; (800088c <display_graph+0x158>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d96b      	bls.n	8000820 <display_graph+0xec>
    int x = draw_index % ili9341_lcd->screen_size.width;
 8000748:	4b50      	ldr	r3, [pc, #320]	; (800088c <display_graph+0x158>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4a50      	ldr	r2, [pc, #320]	; (8000890 <display_graph+0x15c>)
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	8b92      	ldrh	r2, [r2, #28]
 8000752:	fbb3 f1f2 	udiv	r1, r3, r2
 8000756:	fb01 f202 	mul.w	r2, r1, r2
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	b29b      	uxth	r3, r3
 800075e:	66bb      	str	r3, [r7, #104]	; 0x68
    ili9341_draw_line(ili9341_lcd, ILI9341_BLACK, x, 0, x, ili9341_lcd->screen_size.height - 1);
 8000760:	4b4b      	ldr	r3, [pc, #300]	; (8000890 <display_graph+0x15c>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <display_graph+0x160>)
 8000766:	8819      	ldrh	r1, [r3, #0]
 8000768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800076a:	b21c      	sxth	r4, r3
 800076c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800076e:	b21b      	sxth	r3, r3
 8000770:	4a47      	ldr	r2, [pc, #284]	; (8000890 <display_graph+0x15c>)
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	8bd2      	ldrh	r2, [r2, #30]
 8000776:	3a01      	subs	r2, #1
 8000778:	b292      	uxth	r2, r2
 800077a:	b212      	sxth	r2, r2
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	4622      	mov	r2, r4
 8000784:	f000 fdc3 	bl	800130e <ili9341_draw_line>
    if (x == 0) {
 8000788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078a:	2b00      	cmp	r3, #0
 800078c:	d116      	bne.n	80007bc <display_graph+0x88>
      ili9341_draw_pixel(ili9341_lcd, ILI9341_LIGHTGREY, x, translate_y(raw_values[draw_index]));
 800078e:	4b40      	ldr	r3, [pc, #256]	; (8000890 <display_graph+0x15c>)
 8000790:	681c      	ldr	r4, [r3, #0]
 8000792:	4b41      	ldr	r3, [pc, #260]	; (8000898 <display_graph+0x164>)
 8000794:	881d      	ldrh	r5, [r3, #0]
 8000796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000798:	b21e      	sxth	r6, r3
 800079a:	4b3c      	ldr	r3, [pc, #240]	; (800088c <display_graph+0x158>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b3e      	ldr	r3, [pc, #248]	; (800089c <display_graph+0x168>)
 80007a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff86 	bl	80006b8 <translate_y>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	4632      	mov	r2, r6
 80007b2:	4629      	mov	r1, r5
 80007b4:	4620      	mov	r0, r4
 80007b6:	f000 fd52 	bl	800125e <ili9341_draw_pixel>
 80007ba:	e02a      	b.n	8000812 <display_graph+0xde>
    }
    else {
      ili9341_draw_line(ili9341_lcd, ILI9341_LIGHTGREY, x - 1, translate_y(raw_values[draw_index - 1]), x, translate_y(raw_values[draw_index]));
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <display_graph+0x15c>)
 80007be:	681d      	ldr	r5, [r3, #0]
 80007c0:	4b35      	ldr	r3, [pc, #212]	; (8000898 <display_graph+0x164>)
 80007c2:	881e      	ldrh	r6, [r3, #0]
 80007c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3b01      	subs	r3, #1
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	fa0f f883 	sxth.w	r8, r3
 80007d0:	4b2e      	ldr	r3, [pc, #184]	; (800088c <display_graph+0x158>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a31      	ldr	r2, [pc, #196]	; (800089c <display_graph+0x168>)
 80007d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff6b 	bl	80006b8 <translate_y>
 80007e2:	4603      	mov	r3, r0
 80007e4:	fa0f f983 	sxth.w	r9, r3
 80007e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007ea:	b21c      	sxth	r4, r3
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <display_graph+0x158>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <display_graph+0x168>)
 80007f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <translate_y>
 80007fe:	4603      	mov	r3, r0
 8000800:	b21b      	sxth	r3, r3
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	9400      	str	r4, [sp, #0]
 8000806:	464b      	mov	r3, r9
 8000808:	4642      	mov	r2, r8
 800080a:	4631      	mov	r1, r6
 800080c:	4628      	mov	r0, r5
 800080e:	f000 fd7e 	bl	800130e <ili9341_draw_line>
    }
    draw_index++;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <display_graph+0x158>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <display_graph+0x158>)
 800081c:	801a      	strh	r2, [r3, #0]
      bt_send(message);
    }
    bt_send("setting state to 0\r\n");
    data_sent = true;
  }
}
 800081e:	e02d      	b.n	800087c <display_graph+0x148>
  else if (fill_index == BUFFER_SIZE && !data_sent) {
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <display_graph+0x154>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000828:	4293      	cmp	r3, r2
 800082a:	d127      	bne.n	800087c <display_graph+0x148>
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <display_graph+0x16c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f083 0301 	eor.w	r3, r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d020      	beq.n	800087c <display_graph+0x148>
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800083a:	2300      	movs	r3, #0
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800083e:	e012      	b.n	8000866 <display_graph+0x132>
      sprintf(message, "%lu: %d\r\n", time_buffer[i], raw_values[i]);
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <display_graph+0x170>)
 8000842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000844:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000848:	4914      	ldr	r1, [pc, #80]	; (800089c <display_graph+0x168>)
 800084a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000850:	1d38      	adds	r0, r7, #4
 8000852:	4915      	ldr	r1, [pc, #84]	; (80008a8 <display_graph+0x174>)
 8000854:	f006 fbc4 	bl	8006fe0 <siprintf>
      bt_send(message);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fe9e 	bl	800059c <bt_send>
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000862:	3301      	adds	r3, #1
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000868:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800086c:	4293      	cmp	r3, r2
 800086e:	dde7      	ble.n	8000840 <display_graph+0x10c>
    bt_send("setting state to 0\r\n");
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <display_graph+0x178>)
 8000872:	f7ff fe93 	bl	800059c <bt_send>
    data_sent = true;
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <display_graph+0x16c>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3774      	adds	r7, #116	; 0x74
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000886:	bf00      	nop
 8000888:	20003b24 	.word	0x20003b24
 800088c:	20003b26 	.word	0x20003b26
 8000890:	20000088 	.word	0x20000088
 8000894:	08008bca 	.word	0x08008bca
 8000898:	08008bcc 	.word	0x08008bcc
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	20003b28 	.word	0x20003b28
 80008a4:	20001414 	.word	0x20001414
 80008a8:	08007814 	.word	0x08007814
 80008ac:	08007820 	.word	0x08007820

080008b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if (fill_index >= BUFFER_SIZE) {
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d817      	bhi.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0x44>
    return;
  }
  raw_values[fill_index] = dma_values[0];
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008cc:	8819      	ldrh	r1, [r3, #0]
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  time_buffer[fill_index] = HAL_GetTick();
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	461c      	mov	r4, r3
 80008da:	f001 fe63 	bl	80025a4 <HAL_GetTick>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  fill_index++;
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008f0:	801a      	strh	r2, [r3, #0]
 80008f2:	e000      	b.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x46>
    return;
 80008f4:	bf00      	nop
}
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	20003b24 	.word	0x20003b24
 8000900:	2000008c 	.word	0x2000008c
 8000904:	2000008c 	.word	0x2000008c
 8000908:	20001414 	.word	0x20001414

0800090c <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b09b      	sub	sp, #108	; 0x6c
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4613      	mov	r3, r2
 800091a:	80fb      	strh	r3, [r7, #6]
  ili9341_t *lcd = NULL;
 800091c:	2300      	movs	r3, #0
 800091e:	667b      	str	r3, [r7, #100]	; 0x64

  if (NULL != spi_hal) {
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 8107 	beq.w	8000b36 <ili9341_new+0x22a>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 8103 	beq.w	8000b36 <ili9341_new+0x22a>
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	2b00      	cmp	r3, #0
 8000934:	f000 80ff 	beq.w	8000b36 <ili9341_new+0x22a>
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	0c1b      	lsrs	r3, r3, #16
 800093c:	041b      	lsls	r3, r3, #16
 800093e:	2b00      	cmp	r3, #0
 8000940:	f040 80f9 	bne.w	8000b36 <ili9341_new+0x22a>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 80f5 	beq.w	8000b36 <ili9341_new+0x22a>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 800094c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80f0 	beq.w	8000b36 <ili9341_new+0x22a>
 8000956:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	041b      	lsls	r3, r3, #16
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 80e9 	bne.w	8000b36 <ili9341_new+0x22a>
 8000964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 80e5 	beq.w	8000b36 <ili9341_new+0x22a>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 800096c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 80e0 	beq.w	8000b36 <ili9341_new+0x22a>
 8000976:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800097a:	0c1b      	lsrs	r3, r3, #16
 800097c:	041b      	lsls	r3, r3, #16
 800097e:	2b00      	cmp	r3, #0
 8000980:	f040 80d9 	bne.w	8000b36 <ili9341_new+0x22a>
 8000984:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8000988:	2b00      	cmp	r3, #0
 800098a:	f2c0 80d4 	blt.w	8000b36 <ili9341_new+0x22a>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 800098e:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8000992:	2b03      	cmp	r3, #3
 8000994:	f300 80cf 	bgt.w	8000b36 <ili9341_new+0x22a>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8000998:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 800099c:	2b01      	cmp	r3, #1
 800099e:	d121      	bne.n	80009e4 <ili9341_new+0xd8>
 80009a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80c6 	beq.w	8000b36 <ili9341_new+0x22a>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 80009aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 80c1 	beq.w	8000b36 <ili9341_new+0x22a>
 80009b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80009b8:	0c1b      	lsrs	r3, r3, #16
 80009ba:	041b      	lsls	r3, r3, #16
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f040 80ba 	bne.w	8000b36 <ili9341_new+0x22a>
 80009c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80b5 	beq.w	8000b36 <ili9341_new+0x22a>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 80009cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80b0 	beq.w	8000b36 <ili9341_new+0x22a>
 80009d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 80a9 	bne.w	8000b36 <ili9341_new+0x22a>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 80009e4:	2068      	movs	r0, #104	; 0x68
 80009e6:	f006 fa47 	bl	8006e78 <malloc>
 80009ea:	4603      	mov	r3, r0
 80009ec:	667b      	str	r3, [r7, #100]	; 0x64
 80009ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f000 80a0 	beq.w	8000b36 <ili9341_new+0x22a>

          lcd->spi_hal              = spi_hal;
 80009f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	601a      	str	r2, [r3, #0]

          lcd->reset_port           = reset_port;
 80009fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	605a      	str	r2, [r3, #4]
          lcd->reset_pin            = reset_pin;
 8000a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	811a      	strh	r2, [r3, #8]
          lcd->tft_select_port      = tft_select_port;
 8000a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	60da      	str	r2, [r3, #12]
          lcd->tft_select_pin       = tft_select_pin;
 8000a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a10:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000a14:	821a      	strh	r2, [r3, #16]
          lcd->data_command_port    = data_command_port;
 8000a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a1a:	615a      	str	r2, [r3, #20]
          lcd->data_command_pin     = data_command_pin;
 8000a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a1e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8000a22:	831a      	strh	r2, [r3, #24]

          lcd->orientation          = orientation;
 8000a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a26:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000a2a:	769a      	strb	r2, [r3, #26]
          lcd->screen_size          = ili9341_screen_size(orientation);
 8000a2c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8000a2e:	f997 3084 	ldrsb.w	r3, [r7, #132]	; 0x84
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fb24 	bl	8001080 <ili9341_screen_size>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 8000a3c:	f997 3098 	ldrsb.w	r3, [r7, #152]	; 0x98
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d03d      	beq.n	8000ac0 <ili9341_new+0x1b4>

            lcd->touch_select_port    = touch_select_port;
 8000a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000a4a:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = touch_select_pin;
 8000a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a4e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8000a52:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = touch_irq_port;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = touch_irq_pin;
 8000a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a5e:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8000a62:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 8000a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a66:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8000a6a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = touch_normalize;
 8000a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a70:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8000a74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8000a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a80:	2200      	movs	r2, #0
 8000a82:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 8000a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a86:	22ff      	movs	r2, #255	; 0xff
 8000a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a8e:	3336      	adds	r3, #54	; 0x36
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a98:	3340      	adds	r3, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNotPressed;
 8000aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 8000ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 8000ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aba:	2200      	movs	r2, #0
 8000abc:	665a      	str	r2, [r3, #100]	; 0x64
 8000abe:	e037      	b.n	8000b30 <ili9341_new+0x224>

          } else {

            lcd->touch_select_port    = NULL;
 8000ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = 0;
 8000ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ac8:	2200      	movs	r2, #0
 8000aca:	849a      	strh	r2, [r3, #36]	; 0x24
            lcd->touch_irq_port       = NULL;
 8000acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
            lcd->touch_irq_pin        = 0;
 8000ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	859a      	strh	r2, [r3, #44]	; 0x2c

            lcd->touch_support        = touch_support;
 8000ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ada:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8000ade:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            lcd->touch_normalize      = itnNONE;
 8000ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aec:	2200      	movs	r2, #0
 8000aee:	861a      	strh	r2, [r3, #48]	; 0x30
 8000af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af2:	2200      	movs	r2, #0
 8000af4:	865a      	strh	r2, [r3, #50]	; 0x32
            lcd->touch_calibration    = itcNONE;
 8000af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b00:	3336      	adds	r3, #54	; 0x36
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b0a:	3340      	adds	r3, #64	; 0x40
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNONE;
 8000b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            lcd->touch_pressed_begin  = NULL;
 8000b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b26:	2200      	movs	r2, #0
 8000b28:	661a      	str	r2, [r3, #96]	; 0x60
            lcd->touch_pressed_end    = NULL;
 8000b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          ili9341_initialize(lcd);
 8000b30:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b32:	f000 f945 	bl	8000dc0 <ili9341_initialize>
        }
      }
    }
  }

  return lcd;
 8000b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	376c      	adds	r7, #108	; 0x6c
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}

08000b40 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68d8      	ldr	r0, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	8a1b      	ldrh	r3, [r3, #16]
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	f003 fa80 	bl	8004058 <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_t *lcd)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68d8      	ldr	r0, [r3, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	8a1b      	ldrh	r3, [r3, #16]
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	f003 fa70 	bl	8004058 <HAL_GPIO_WritePin>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_t *lcd)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a18      	ldr	r0, [r3, #32]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	f003 fa60 	bl	8004058 <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_t *lcd)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a18      	ldr	r0, [r3, #32]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f003 fa50 	bl	8004058 <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8000bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <ili9341_spi_slave_select+0x1a>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d004      	beq.n	8000be2 <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
    default: break;
 8000bd8:	e007      	b.n	8000bea <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffb0 	bl	8000b40 <ili9341_spi_tft_select>
 8000be0:	e003      	b.n	8000bea <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffcc 	bl	8000b80 <ili9341_spi_touch_select>
 8000be8:	bf00      	nop
  }
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8000bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <ili9341_spi_slave_release+0x1a>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d004      	beq.n	8000c14 <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
    default: break;
 8000c0a:	e007      	b.n	8000c1c <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ffa7 	bl	8000b60 <ili9341_spi_tft_release>
 8000c12:	e003      	b.n	8000c1c <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffc3 	bl	8000ba0 <ili9341_spi_touch_release>
 8000c1a:	bf00      	nop
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
 8000c30:	4613      	mov	r3, r2
 8000c32:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(lcd, spi_slave);
 8000c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db09      	blt.n	8000c50 <ili9341_spi_write_command+0x2c>
 8000c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	dc05      	bgt.n	8000c50 <ili9341_spi_write_command+0x2c>
 8000c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb8 	bl	8000bc0 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6958      	ldr	r0, [r3, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	8b1b      	ldrh	r3, [r3, #24]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f003 f9fc 	bl	8004058 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	1cb9      	adds	r1, r7, #2
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f004 fd29 	bl	80056c2 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db09      	blt.n	8000c8c <ili9341_spi_write_command+0x68>
 8000c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	dc05      	bgt.n	8000c8c <ili9341_spi_write_command+0x68>
 8000c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffb3 	bl	8000bf2 <ili9341_spi_slave_release>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	72fb      	strb	r3, [r7, #11]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(lcd, spi_slave);
 8000ca6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db09      	blt.n	8000cc2 <ili9341_spi_write_data+0x2e>
 8000cae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	dc05      	bgt.n	8000cc2 <ili9341_spi_write_data+0x2e>
 8000cb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff ff7f 	bl	8000bc0 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6958      	ldr	r0, [r3, #20]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	8b1b      	ldrh	r3, [r3, #24]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f003 f9c3 	bl	8004058 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	893a      	ldrh	r2, [r7, #8]
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	f004 fcf0 	bl	80056c2 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000ce2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db09      	blt.n	8000cfe <ili9341_spi_write_data+0x6a>
 8000cea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	dc05      	bgt.n	8000cfe <ili9341_spi_write_data+0x6a>
 8000cf2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff ff7a 	bl	8000bf2 <ili9341_spi_slave_release>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	4611      	mov	r1, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	4603      	mov	r3, r0
 8000d16:	70fb      	strb	r3, [r7, #3]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70bb      	strb	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(lcd, spi_slave);
 8000d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db09      	blt.n	8000d3c <ili9341_spi_write_command_data+0x36>
 8000d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	dc05      	bgt.n	8000d3c <ili9341_spi_write_command_data+0x36>
 8000d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff42 	bl	8000bc0 <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff6d 	bl	8000c24 <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 8000d4a:	883a      	ldrh	r2, [r7, #0]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff9e 	bl	8000c94 <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db09      	blt.n	8000d74 <ili9341_spi_write_command_data+0x6e>
 8000d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	dc05      	bgt.n	8000d74 <ili9341_spi_write_command_data+0x6e>
 8000d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ff3f 	bl	8000bf2 <ili9341_spi_slave_release>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_t *lcd)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6858      	ldr	r0, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	891b      	ldrh	r3, [r3, #8]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f003 f962 	bl	8004058 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000d94:	20c8      	movs	r0, #200	; 0xc8
 8000d96:	f001 fc11 	bl	80025bc <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6858      	ldr	r0, [r3, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	891b      	ldrh	r3, [r3, #8]
 8000da2:	2201      	movs	r2, #1
 8000da4:	4619      	mov	r1, r3
 8000da6:	f003 f957 	bl	8004058 <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(lcd);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fed8 	bl	8000b60 <ili9341_spi_tft_release>
  ili9341_spi_touch_release(lcd);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fef5 	bl	8000ba0 <ili9341_spi_touch_release>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <ili9341_initialize>:

static void ili9341_initialize(ili9341_t *lcd)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b09f      	sub	sp, #124	; 0x7c
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  ili9341_reset(lcd);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ffd7 	bl	8000d7c <ili9341_reset>
  ili9341_spi_tft_select(lcd);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff feb6 	bl	8000b40 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff22 	bl	8000c24 <ili9341_spi_write_command>
  HAL_Delay(1000);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f001 fbea 	bl	80025bc <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8000de8:	4a9d      	ldr	r2, [pc, #628]	; (8001060 <ili9341_initialize+0x2a0>)
 8000dea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df2:	6018      	str	r0, [r3, #0]
 8000df4:	3304      	adds	r3, #4
 8000df6:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000df8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2305      	movs	r3, #5
 8000e00:	22cb      	movs	r2, #203	; 0xcb
 8000e02:	f04f 31ff 	mov.w	r1, #4294967295
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff7d 	bl	8000d06 <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8000e0c:	4a95      	ldr	r2, [pc, #596]	; (8001064 <ili9341_initialize+0x2a4>)
 8000e0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	4611      	mov	r1, r2
 8000e16:	8019      	strh	r1, [r3, #0]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	0c12      	lsrs	r2, r2, #16
 8000e1c:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2303      	movs	r3, #3
 8000e26:	22cf      	movs	r2, #207	; 0xcf
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff6a 	bl	8000d06 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8000e32:	4a8d      	ldr	r2, [pc, #564]	; (8001068 <ili9341_initialize+0x2a8>)
 8000e34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	8019      	strh	r1, [r3, #0]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	0c12      	lsrs	r2, r2, #16
 8000e42:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	22e8      	movs	r2, #232	; 0xe8
 8000e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff57 	bl	8000d06 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	22ea      	movs	r2, #234	; 0xea
 8000e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff47 	bl	8000d06 <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8000e78:	4b7c      	ldr	r3, [pc, #496]	; (800106c <ili9341_initialize+0x2ac>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2304      	movs	r3, #4
 8000e86:	22ed      	movs	r2, #237	; 0xed
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff3a 	bl	8000d06 <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 8000e92:	2320      	movs	r3, #32
 8000e94:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	22f7      	movs	r2, #247	; 0xf7
 8000ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff2d 	bl	8000d06 <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8000eac:	2323      	movs	r3, #35	; 0x23
 8000eae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  ili9341_spi_write_command_data(lcd, issNONE,
 8000eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	22c0      	movs	r2, #192	; 0xc0
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff20 	bl	8000d06 <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ecc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	22c1      	movs	r2, #193	; 0xc1
 8000ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff13 	bl	8000d06 <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8000ee0:	4b63      	ldr	r3, [pc, #396]	; (8001070 <ili9341_initialize+0x2b0>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ee8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	22c5      	movs	r2, #197	; 0xc5
 8000ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff05 	bl	8000d06 <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 8000efc:	2386      	movs	r3, #134	; 0x86
 8000efe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	22c7      	movs	r2, #199	; 0xc7
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fef8 	bl	8000d06 <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 8000f16:	2348      	movs	r3, #72	; 0x48
 8000f18:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	2236      	movs	r2, #54	; 0x36
 8000f26:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff feeb 	bl	8000d06 <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(lcd, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8000f30:	2355      	movs	r3, #85	; 0x55
 8000f32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	223a      	movs	r2, #58	; 0x3a
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fede 	bl	8000d06 <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000f50:	2318      	movs	r3, #24
 8000f52:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	22b1      	movs	r2, #177	; 0xb1
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fece 	bl	8000d06 <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8000f6a:	4a42      	ldr	r2, [pc, #264]	; (8001074 <ili9341_initialize+0x2b4>)
 8000f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	4611      	mov	r1, r2
 8000f74:	8019      	strh	r1, [r3, #0]
 8000f76:	3302      	adds	r3, #2
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2303      	movs	r3, #3
 8000f84:	22b6      	movs	r2, #182	; 0xb6
 8000f86:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff febb 	bl	8000d06 <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	22f2      	movs	r2, #242	; 0xf2
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff feae 	bl	8000d06 <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(lcd, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 8000faa:	2301      	movs	r3, #1
 8000fac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2226      	movs	r2, #38	; 0x26
 8000fba:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fea1 	bl	8000d06 <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <ili9341_initialize+0x2b8>)
 8000fc6:	f107 041c 	add.w	r4, r7, #28
 8000fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000fce:	8023      	strh	r3, [r4, #0]
 8000fd0:	3402      	adds	r4, #2
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	230f      	movs	r3, #15
 8000fde:	22e0      	movs	r2, #224	; 0xe0
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fe8e 	bl	8000d06 <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <ili9341_initialize+0x2bc>)
 8000fec:	f107 040c 	add.w	r4, r7, #12
 8000ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff2:	c407      	stmia	r4!, {r0, r1, r2}
 8000ff4:	8023      	strh	r3, [r4, #0]
 8000ff6:	3402      	adds	r4, #2
 8000ff8:	0c1b      	lsrs	r3, r3, #16
 8000ffa:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	230f      	movs	r3, #15
 8001004:	22e1      	movs	r2, #225	; 0xe1
 8001006:	f04f 31ff 	mov.w	r1, #4294967295
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fe7b 	bl	8000d06 <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 8001010:	2211      	movs	r2, #17
 8001012:	f04f 31ff 	mov.w	r1, #4294967295
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fe04 	bl	8000c24 <ili9341_spi_write_command>
  HAL_Delay(120);
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f001 facd 	bl	80025bc <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 8001022:	2229      	movs	r2, #41	; 0x29
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fdfb 	bl	8000c24 <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f853 	bl	80010e0 <ili9341_screen_rotation>
 800103a:	4603      	mov	r3, r0
 800103c:	723b      	strb	r3, [r7, #8]
  ili9341_spi_write_command_data(lcd, issNONE,
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	2236      	movs	r2, #54	; 0x36
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fe5a 	bl	8000d06 <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(lcd);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fd84 	bl	8000b60 <ili9341_spi_tft_release>
}
 8001058:	bf00      	nop
 800105a:	3774      	adds	r7, #116	; 0x74
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	08007838 	.word	0x08007838
 8001064:	08007840 	.word	0x08007840
 8001068:	08007844 	.word	0x08007844
 800106c:	08007848 	.word	0x08007848
 8001070:	0800784c 	.word	0x0800784c
 8001074:	08007850 	.word	0x08007850
 8001078:	08007854 	.word	0x08007854
 800107c:	08007864 	.word	0x08007864

08001080 <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d011      	beq.n	80010b6 <ili9341_screen_size+0x36>
 8001092:	2b03      	cmp	r3, #3
 8001094:	dc03      	bgt.n	800109e <ili9341_screen_size+0x1e>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <ili9341_screen_size+0x26>
 800109a:	2b02      	cmp	r3, #2
 800109c:	d007      	beq.n	80010ae <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <ili9341_screen_size+0x58>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e00a      	b.n	80010bc <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <ili9341_screen_size+0x5c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e006      	b.n	80010bc <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <ili9341_screen_size+0x58>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	e002      	b.n	80010bc <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <ili9341_screen_size+0x5c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	61fb      	str	r3, [r7, #28]
  }
}
 80010bc:	2300      	movs	r3, #0
 80010be:	8bba      	ldrh	r2, [r7, #28]
 80010c0:	f362 030f 	bfi	r3, r2, #0, #16
 80010c4:	8bfa      	ldrh	r2, [r7, #30]
 80010c6:	f362 431f 	bfi	r3, r2, #16, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	08007874 	.word	0x08007874
 80010dc:	08007878 	.word	0x08007878

080010e0 <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d00b      	beq.n	800110a <ili9341_screen_rotation+0x2a>
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	dc03      	bgt.n	80010fe <ili9341_screen_rotation+0x1e>
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d003      	beq.n	8001102 <ili9341_screen_rotation+0x22>
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 80010fe:	2348      	movs	r3, #72	; 0x48
 8001100:	e004      	b.n	800110c <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 8001102:	23e8      	movs	r3, #232	; 0xe8
 8001104:	e002      	b.n	800110c <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 8001106:	2388      	movs	r3, #136	; 0x88
 8001108:	e000      	b.n	800110c <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 800110a:	2328      	movs	r3, #40	; 0x28
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b1f      	cmp	r3, #31
 8001126:	d906      	bls.n	8001136 <glyph_index+0x1e>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b7e      	cmp	r3, #126	; 0x7e
 800112c:	d803      	bhi.n	8001136 <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	3b20      	subs	r3, #32
 8001132:	b2db      	uxtb	r3, r3
 8001134:	e000      	b.n	8001138 <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(ili9341_t *lcd,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	817b      	strh	r3, [r7, #10]
 8001156:	460b      	mov	r3, r1
 8001158:	813b      	strh	r3, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(lcd);
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fcee 	bl	8000b40 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8001164:	897b      	ldrh	r3, [r7, #10]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	753b      	strb	r3, [r7, #20]
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	757b      	strb	r3, [r7, #21]
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	75bb      	strb	r3, [r7, #22]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(lcd, issNONE,
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2304      	movs	r3, #4
 800118c:	222a      	movs	r2, #42	; 0x2a
 800118e:	f04f 31ff 	mov.w	r1, #4294967295
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fdb7 	bl	8000d06 <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8001198:	893b      	ldrh	r3, [r7, #8]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	743b      	strb	r3, [r7, #16]
 80011a2:	893b      	ldrh	r3, [r7, #8]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	747b      	strb	r3, [r7, #17]
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	74bb      	strb	r3, [r7, #18]
 80011b2:	8c3b      	ldrh	r3, [r7, #32]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(lcd, issNONE,
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2304      	movs	r3, #4
 80011c0:	222b      	movs	r2, #43	; 0x2b
 80011c2:	f04f 31ff 	mov.w	r1, #4294967295
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fd9d 	bl	8000d06 <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 80011cc:	222c      	movs	r2, #44	; 0x2c
 80011ce:	f04f 31ff 	mov.w	r1, #4294967295
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff fd26 	bl	8000c24 <ili9341_spi_write_command>

  ili9341_spi_tft_release(lcd);
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fcc1 	bl	8000b60 <ili9341_spi_tft_release>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_t *lcd)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  if (NULL == lcd)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80011f4:	e000      	b.n	80011f8 <ili9341_transmit_wait+0x12>
    { continue; }
 80011f6:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fd81 	bl	8003d06 <HAL_DMA_GetState>
 8001204:	4603      	mov	r3, r0
 8001206:	2b02      	cmp	r3, #2
 8001208:	d0f5      	beq.n	80011f6 <ili9341_transmit_wait+0x10>
 800120a:	e000      	b.n	800120e <ili9341_transmit_wait+0x28>
    { return; }
 800120c:	bf00      	nop
}
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_t *lcd, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	461a      	mov	r2, r3
 8001220:	460b      	mov	r3, r1
 8001222:	817b      	strh	r3, [r7, #10]
 8001224:	4613      	mov	r3, r2
 8001226:	727b      	strb	r3, [r7, #9]
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d013      	beq.n	8001256 <ili9341_transmit_color+0x42>
 800122e:	897b      	ldrh	r3, [r7, #10]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d010      	beq.n	8001256 <ili9341_transmit_color+0x42>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00d      	beq.n	8001256 <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	897a      	ldrh	r2, [r7, #10]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f004 fbb2 	bl	80059ac <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 8001248:	7a7b      	ldrb	r3, [r7, #9]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(lcd); }
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff ffc9 	bl	80011e6 <ili9341_transmit_wait>
 8001254:	e000      	b.n	8001258 <ili9341_transmit_color+0x44>
    { return; }
 8001256:	bf00      	nop
}
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b088      	sub	sp, #32
 8001262:	af02      	add	r7, sp, #8
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	4608      	mov	r0, r1
 8001268:	4611      	mov	r1, r2
 800126a:	461a      	mov	r2, r3
 800126c:	4603      	mov	r3, r0
 800126e:	817b      	strh	r3, [r7, #10]
 8001270:	460b      	mov	r3, r1
 8001272:	813b      	strh	r3, [r7, #8]
 8001274:	4613      	mov	r3, r2
 8001276:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, NULL, NULL)))
 8001278:	1dba      	adds	r2, r7, #6
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fb0c 	bl	80018a2 <ili9341_clip_rect>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d03a      	beq.n	8001306 <ili9341_draw_pixel+0xa8>
    { return; }

  uint16_t color_le = __LEu16(&color);
 8001290:	f107 030a 	add.w	r3, r7, #10
 8001294:	3301      	adds	r3, #1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b21a      	sxth	r2, r3
 800129a:	f107 030a 	add.w	r3, r7, #10
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 80012ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012b0:	b299      	uxth	r1, r3
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	b298      	uxth	r0, r3
 80012c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4603      	mov	r3, r0
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff ff37 	bl	8001144 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(lcd);
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fc32 	bl	8000b40 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6958      	ldr	r0, [r3, #20]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8b1b      	ldrh	r3, [r3, #24]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f002 feb6 	bl	8004058 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	f107 0116 	add.w	r1, r7, #22
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	2202      	movs	r2, #2
 80012fa:	f004 f9e2 	bl	80056c2 <HAL_SPI_Transmit>

  ili9341_spi_tft_release(lcd);
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff fc2e 	bl	8000b60 <ili9341_spi_tft_release>
 8001304:	e000      	b.n	8001308 <ili9341_draw_pixel+0xaa>
    { return; }
 8001306:	bf00      	nop
}
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <ili9341_draw_line>:

void ili9341_draw_line(ili9341_t *lcd, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800130e:	b590      	push	{r4, r7, lr}
 8001310:	b08d      	sub	sp, #52	; 0x34
 8001312:	af02      	add	r7, sp, #8
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	461a      	mov	r2, r3
 800131c:	4603      	mov	r3, r0
 800131e:	817b      	strh	r3, [r7, #10]
 8001320:	460b      	mov	r3, r1
 8001322:	813b      	strh	r3, [r7, #8]
 8001324:	4613      	mov	r3, r2
 8001326:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8001328:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 8001332:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 800133c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d117      	bne.n	8001374 <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 8001344:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80c7 	beq.w	80014dc <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 800134e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	bfb8      	it	lt
 8001356:	425b      	neglt	r3, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800135e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001362:	8979      	ldrh	r1, [r7, #10]
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2301      	movs	r3, #1
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4603      	mov	r3, r0
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f8bb 	bl	80014e8 <ili9341_fill_rect>
    return;
 8001372:	e0b6      	b.n	80014e2 <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 8001374:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d117      	bne.n	80013ac <ili9341_draw_line+0x9e>
    // horizontal line
    if (0 == dx)
 800137c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80ad 	beq.w	80014e0 <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 8001386:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800138a:	2b00      	cmp	r3, #0
 800138c:	bfb8      	it	lt
 800138e:	425b      	neglt	r3, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001396:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800139a:	8979      	ldrh	r1, [r7, #10]
 800139c:	2401      	movs	r4, #1
 800139e:	9401      	str	r4, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4603      	mov	r3, r0
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 f89f 	bl	80014e8 <ili9341_fill_rect>
    return;
 80013aa:	e09a      	b.n	80014e2 <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 80013ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bfb8      	it	lt
 80013b4:	425b      	neglt	r3, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bfb8      	it	lt
 80013c0:	425b      	neglt	r3, r3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	429a      	cmp	r2, r3
 80013c6:	bf8c      	ite	hi
 80013c8:	2301      	movhi	r3, #1
 80013ca:	2300      	movls	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 80013d6:	893b      	ldrh	r3, [r7, #8]
 80013d8:	833b      	strh	r3, [r7, #24]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	813b      	strh	r3, [r7, #8]
 80013de:	8b3b      	ldrh	r3, [r7, #24]
 80013e0:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 80013e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013e4:	82fb      	strh	r3, [r7, #22]
 80013e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80013e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  if (x0 > x1) {
 80013ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013f2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dd0b      	ble.n	8001412 <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	82bb      	strh	r3, [r7, #20]
 80013fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001400:	813b      	strh	r3, [r7, #8]
 8001402:	8abb      	ldrh	r3, [r7, #20]
 8001404:	873b      	strh	r3, [r7, #56]	; 0x38
    __SWAP(int16_t, y0, y1);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	827b      	strh	r3, [r7, #18]
 800140a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	8a7b      	ldrh	r3, [r7, #18]
 8001410:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  dx = x1 - x0;
 8001412:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001414:	893b      	ldrh	r3, [r7, #8]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 800141c:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	bfb8      	it	lt
 800142a:	425b      	neglt	r3, r3
 800142c:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 800142e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001432:	105b      	asrs	r3, r3, #1
 8001434:	847b      	strh	r3, [r7, #34]	; 0x22

  if (y0 < y1)
 8001436:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800143a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800143e:	429a      	cmp	r2, r3
 8001440:	da02      	bge.n	8001448 <ili9341_draw_line+0x13a>
    { step = 1; }
 8001442:	2301      	movs	r3, #1
 8001444:	843b      	strh	r3, [r7, #32]
 8001446:	e042      	b.n	80014ce <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 8001448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144c:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 800144e:	e03e      	b.n	80014ce <ili9341_draw_line+0x1c0>

    if (is_steep)
 8001450:	7efb      	ldrb	r3, [r7, #27]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	84fb      	strh	r3, [r7, #38]	; 0x26
 800145a:	893b      	ldrh	r3, [r7, #8]
 800145c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800145e:	e003      	b.n	8001468 <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 8001460:	893b      	ldrh	r3, [r7, #8]
 8001462:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	84bb      	strh	r3, [r7, #36]	; 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 8001468:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800146c:	2b00      	cmp	r3, #0
 800146e:	db17      	blt.n	80014a0 <ili9341_draw_line+0x192>
 8001470:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	8b92      	ldrh	r2, [r2, #28]
 8001478:	4293      	cmp	r3, r2
 800147a:	dc11      	bgt.n	80014a0 <ili9341_draw_line+0x192>
 800147c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0d      	blt.n	80014a0 <ili9341_draw_line+0x192>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 8001484:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	8bd2      	ldrh	r2, [r2, #30]
 800148c:	4293      	cmp	r3, r2
 800148e:	dc07      	bgt.n	80014a0 <ili9341_draw_line+0x192>
      ili9341_draw_pixel(lcd, color, x, y);
 8001490:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001494:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001498:	8979      	ldrh	r1, [r7, #10]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fedf 	bl	800125e <ili9341_draw_pixel>
    }

    err -= dy;
 80014a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80014a2:	8bbb      	ldrh	r3, [r7, #28]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	847b      	strh	r3, [r7, #34]	; 0x22
    if (err < 0) {
 80014aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da09      	bge.n	80014c6 <ili9341_draw_line+0x1b8>
      y0 += step;
 80014b2:	88fa      	ldrh	r2, [r7, #6]
 80014b4:	8c3b      	ldrh	r3, [r7, #32]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	80fb      	strh	r3, [r7, #6]
      err += dx;
 80014bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80014be:	8bfb      	ldrh	r3, [r7, #30]
 80014c0:	4413      	add	r3, r2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ++x0;
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 80014ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014d2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80014d6:	429a      	cmp	r2, r3
 80014d8:	ddba      	ble.n	8001450 <ili9341_draw_line+0x142>
 80014da:	e002      	b.n	80014e2 <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 80014e0:	bf00      	nop
  }
}
 80014e2:	372c      	adds	r7, #44	; 0x2c
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd90      	pop	{r4, r7, pc}

080014e8 <ili9341_fill_rect>:
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
}

void ili9341_fill_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08d      	sub	sp, #52	; 0x34
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	817b      	strh	r3, [r7, #10]
 80014fa:	460b      	mov	r3, r1
 80014fc:	813b      	strh	r3, [r7, #8]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8001502:	1dba      	adds	r2, r7, #6
 8001504:	f107 0108 	add.w	r1, r7, #8
 8001508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9c5 	bl	80018a2 <ili9341_clip_rect>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d06f      	beq.n	80015fe <ili9341_fill_rect+0x116>
    { return; }

  uint32_t num_pixels = w * h;
 800151e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001520:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001536:	d902      	bls.n	800153e <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8001538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153c:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 800153e:	f107 030a 	add.w	r3, r7, #10
 8001542:	3301      	adds	r3, #1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b21a      	sxth	r2, r3
 8001548:	f107 030a 	add.w	r3, r7, #10
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 8001558:	2300      	movs	r3, #0
 800155a:	83fb      	strh	r3, [r7, #30]
 800155c:	e007      	b.n	800156e <ili9341_fill_rect+0x86>
    { spi_tx_block[i] = color_le; }
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	4929      	ldr	r1, [pc, #164]	; (8001608 <ili9341_fill_rect+0x120>)
 8001562:	8a7a      	ldrh	r2, [r7, #18]
 8001564:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8001568:	8bfb      	ldrh	r3, [r7, #30]
 800156a:	3301      	adds	r3, #1
 800156c:	83fb      	strh	r3, [r7, #30]
 800156e:	8bfb      	ldrh	r3, [r7, #30]
 8001570:	6a3a      	ldr	r2, [r7, #32]
 8001572:	429a      	cmp	r2, r3
 8001574:	d8f3      	bhi.n	800155e <ili9341_fill_rect+0x76>

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8001576:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800157a:	b299      	uxth	r1, r3
 800157c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001580:	b298      	uxth	r0, r3
 8001582:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001586:	b29a      	uxth	r2, r3
 8001588:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800158a:	4413      	add	r3, r2
 800158c:	b29b      	uxth	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b29c      	uxth	r4, r3
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	b29a      	uxth	r2, r3
 8001598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800159a:	4413      	add	r3, r2
 800159c:	b29b      	uxth	r3, r3
 800159e:	3b01      	subs	r3, #1
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4623      	mov	r3, r4
 80015a6:	4602      	mov	r2, r0
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fdcb 	bl	8001144 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fac6 	bl	8000b40 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6958      	ldr	r0, [r3, #20]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8b1b      	ldrh	r3, [r3, #24]
 80015bc:	2201      	movs	r2, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	f002 fd4a 	bl	8004058 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 80015c4:	e014      	b.n	80015f0 <ili9341_fill_rect+0x108>
    curr_wc = rect_wc;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d901      	bls.n	80015d6 <ili9341_fill_rect+0xee>
      { curr_wc = block_wc; }
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	2301      	movs	r3, #1
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <ili9341_fill_rect+0x120>)
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff fe16 	bl	8001214 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (rect_wc > 0) {
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e7      	bne.n	80015c6 <ili9341_fill_rect+0xde>
  }

  ili9341_spi_tft_release(lcd);
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fab2 	bl	8000b60 <ili9341_spi_tft_release>
 80015fc:	e000      	b.n	8001600 <ili9341_fill_rect+0x118>
    { return; }
 80015fe:	bf00      	nop
}
 8001600:	372c      	adds	r7, #44	; 0x2c
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	20003b2c 	.word	0x20003b2c

0800160c <ili9341_fill_screen>:
  ili9341_draw_line(lcd, color, x, y - r, x, (y - r) + (2 * r) + 1);
  ili9341_fill_quarter_circle(lcd, color, x, y, r, 3, 0);
}

void ili9341_fill_screen(ili9341_t *lcd, ili9341_color_t color)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(lcd, color,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	8b9b      	ldrh	r3, [r3, #28]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	8bd2      	ldrh	r2, [r2, #30]
 8001620:	8879      	ldrh	r1, [r7, #2]
 8001622:	9201      	str	r2, [sp, #4]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2300      	movs	r3, #0
 8001628:	2200      	movs	r2, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff5c 	bl	80014e8 <ili9341_fill_rect>
      0, 0, lcd->screen_size.width, lcd->screen_size.height);
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <ili9341_draw_char>:
  ili9341_spi_tft_release(lcd);
  ili9341_transmit_wait(lcd);
}

void ili9341_draw_char(ili9341_t *lcd, ili9341_text_attr_t attr, char ch)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b093      	sub	sp, #76	; 0x4c
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	4638      	mov	r0, r7
 8001642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 8001646:	893b      	ldrh	r3, [r7, #8]
 8001648:	b21b      	sxth	r3, r3
 800164a:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	b21b      	sxth	r3, r3
 8001650:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	b29b      	uxth	r3, r3
 8001660:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 8001662:	f107 0016 	add.w	r0, r7, #22
 8001666:	f107 0218 	add.w	r2, r7, #24
 800166a:	f107 011a 	add.w	r1, r7, #26
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4603      	mov	r3, r0
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f913 	bl	80018a2 <ili9341_clip_rect>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80bc 	beq.w	80017fc <ili9341_draw_char+0x1c4>
    { return; }

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rect_wc    = num_pixels;
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8001698:	463b      	mov	r3, r7
 800169a:	3304      	adds	r3, #4
 800169c:	3301      	adds	r3, #1
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	463b      	mov	r3, r7
 80016a4:	3304      	adds	r3, #4
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 80016b2:	463b      	mov	r3, r7
 80016b4:	3306      	adds	r3, #6
 80016b6:	3301      	adds	r3, #1
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	463b      	mov	r3, r7
 80016be:	3306      	adds	r3, #6
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 80016cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 80016d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d902      	bls.n	80016de <ili9341_draw_char+0xa6>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 80016d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 80016de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd18 	bl	8001118 <glyph_index>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
 80016f2:	e03d      	b.n	8001770 <ili9341_draw_char+0x138>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	7849      	ldrb	r1, [r1, #1]
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4619      	mov	r1, r3
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	885b      	ldrh	r3, [r3, #2]
 800170e:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
 8001714:	e023      	b.n	800175e <ili9341_draw_char+0x126>
      if ((gl << xi) & 0x8000)
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00c      	beq.n	8001740 <ili9341_draw_char+0x108>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	4413      	add	r3, r2
 8001736:	4933      	ldr	r1, [pc, #204]	; (8001804 <ili9341_draw_char+0x1cc>)
 8001738:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800173a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800173e:	e00b      	b.n	8001758 <ili9341_draw_char+0x120>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	fb03 f202 	mul.w	r2, r3, r2
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	4413      	add	r3, r2
 8001750:	492c      	ldr	r1, [pc, #176]	; (8001804 <ili9341_draw_char+0x1cc>)
 8001752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001754:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8001758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175a:	3301      	adds	r3, #1
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001766:	4293      	cmp	r3, r2
 8001768:	d3d5      	bcc.n	8001716 <ili9341_draw_char+0xde>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 800176a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176c:	3301      	adds	r3, #1
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	461a      	mov	r2, r3
 8001776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001778:	4293      	cmp	r3, r2
 800177a:	d3bb      	bcc.n	80016f4 <ili9341_draw_char+0xbc>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(lcd,
 800177c:	8939      	ldrh	r1, [r7, #8]
 800177e:	8978      	ldrh	r0, [r7, #10]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 8001780:	893a      	ldrh	r2, [r7, #8]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4413      	add	r3, r2
 800178a:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 800178c:	3b01      	subs	r3, #1
 800178e:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 8001790:	897a      	ldrh	r2, [r7, #10]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4413      	add	r3, r2
 800179a:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 800179c:	3b01      	subs	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4623      	mov	r3, r4
 80017a4:	4602      	mov	r2, r0
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff fccc 	bl	8001144 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff f9c7 	bl	8000b40 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6958      	ldr	r0, [r3, #20]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8b1b      	ldrh	r3, [r3, #24]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4619      	mov	r1, r3
 80017be:	f002 fc4b 	bl	8004058 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 80017c2:	e014      	b.n	80017ee <ili9341_draw_char+0x1b6>
    curr_wc = rect_wc;
 80017c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (curr_wc > block_wc)
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d901      	bls.n	80017d4 <ili9341_draw_char+0x19c>
      { curr_wc = block_wc; }
 80017d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	b299      	uxth	r1, r3
 80017dc:	2301      	movs	r3, #1
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <ili9341_draw_char+0x1cc>)
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff fd17 	bl	8001214 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 80017e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (rect_wc > 0) {
 80017ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e7      	bne.n	80017c4 <ili9341_draw_char+0x18c>
  }

  ili9341_spi_tft_release(lcd);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff f9b3 	bl	8000b60 <ili9341_spi_tft_release>
 80017fa:	e000      	b.n	80017fe <ili9341_draw_char+0x1c6>
    { return; }
 80017fc:	bf00      	nop
}
 80017fe:	3744      	adds	r7, #68	; 0x44
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	20003b2c 	.word	0x20003b2c

08001808 <ili9341_draw_string>:

void ili9341_draw_string(ili9341_t *lcd, ili9341_text_attr_t attr, char str[])
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	4638      	mov	r0, r7
 8001812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int16_t curr_x = attr.origin_x;
 8001816:	893b      	ldrh	r3, [r7, #8]
 8001818:	82fb      	strh	r3, [r7, #22]
  int16_t curr_y = attr.origin_y;
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	82bb      	strh	r3, [r7, #20]
  int16_t start_x = attr.origin_x;
 800181e:	893b      	ldrh	r3, [r7, #8]
 8001820:	827b      	strh	r3, [r7, #18]

  while ('\0' != *str) {
 8001822:	e036      	b.n	8001892 <ili9341_draw_string+0x8a>
    if('\r' == *str)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b0d      	cmp	r3, #13
 800182a:	d102      	bne.n	8001832 <ili9341_draw_string+0x2a>
    {
      curr_x = start_x;
 800182c:	8a7b      	ldrh	r3, [r7, #18]
 800182e:	82fb      	strh	r3, [r7, #22]
 8001830:	e02c      	b.n	800188c <ili9341_draw_string+0x84>
    }
    else if('\n' == *str)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d109      	bne.n	800184e <ili9341_draw_string+0x46>
    {
      curr_y += attr.font->height;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	b29a      	uxth	r2, r3
 8001840:	8abb      	ldrh	r3, [r7, #20]
 8001842:	4413      	add	r3, r2
 8001844:	b29b      	uxth	r3, r3
 8001846:	82bb      	strh	r3, [r7, #20]
      curr_x = start_x;
 8001848:	8a7b      	ldrh	r3, [r7, #18]
 800184a:	82fb      	strh	r3, [r7, #22]
 800184c:	e01e      	b.n	800188c <ili9341_draw_string+0x84>
    }
    else
    {
      if ( (curr_x > lcd->screen_size.width) ||
 800184e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	8b92      	ldrh	r2, [r2, #28]
 8001856:	4293      	cmp	r3, r2
 8001858:	dc1f      	bgt.n	800189a <ili9341_draw_string+0x92>
          (curr_y > lcd->screen_size.height) )
 800185a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	8bd2      	ldrh	r2, [r2, #30]
      if ( (curr_x > lcd->screen_size.width) ||
 8001862:	4293      	cmp	r3, r2
 8001864:	dc19      	bgt.n	800189a <ili9341_draw_string+0x92>
        { break; }

      attr.origin_x = curr_x;
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	813b      	strh	r3, [r7, #8]
      attr.origin_y = curr_y;
 800186a:	8abb      	ldrh	r3, [r7, #20]
 800186c:	817b      	strh	r3, [r7, #10]

      ili9341_draw_char(lcd, attr, *str);
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	463b      	mov	r3, r7
 8001876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fedd 	bl	8001638 <ili9341_draw_char>

      curr_x += attr.font->width;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b29a      	uxth	r2, r3
 8001884:	8afb      	ldrh	r3, [r7, #22]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	82fb      	strh	r3, [r7, #22]
    }
    ++str;
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	3301      	adds	r3, #1
 8001890:	623b      	str	r3, [r7, #32]
  while ('\0' != *str) {
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1c4      	bne.n	8001824 <ili9341_draw_string+0x1c>
  }
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <ili9341_clip_rect+0x1a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 80018bc:	2300      	movs	r3, #0
 80018be:	e089      	b.n	80019d4 <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8b9b      	ldrh	r3, [r3, #28]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	da07      	bge.n	80018e0 <ili9341_clip_rect+0x3e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8bdb      	ldrh	r3, [r3, #30]
 80018dc:	429a      	cmp	r2, r3
 80018de:	db01      	blt.n	80018e4 <ili9341_clip_rect+0x42>
    { return ibFalse; }
 80018e0:	2300      	movs	r3, #0
 80018e2:	e077      	b.n	80019d4 <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <ili9341_clip_rect+0x62>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <ili9341_clip_rect+0x5e>
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <ili9341_clip_rect+0x62>
      { return ibFalse; }
 8001900:	2300      	movs	r3, #0
 8001902:	e067      	b.n	80019d4 <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	2b00      	cmp	r3, #0
 800190c:	da0f      	bge.n	800192e <ili9341_clip_rect+0x8c>
    if (NULL != w)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d009      	beq.n	8001928 <ili9341_clip_rect+0x86>
      { *w -= *x; }
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	881a      	ldrh	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	b29b      	uxth	r3, r3
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b29a      	uxth	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	801a      	strh	r2, [r3, #0]
    *x = 0;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	da0f      	bge.n	8001958 <ili9341_clip_rect+0xb6>
    if (NULL != h)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29a      	uxth	r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	801a      	strh	r2, [r3, #0]
    *y = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d039      	beq.n	80019d2 <ili9341_clip_rect+0x130>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d036      	beq.n	80019d2 <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	4413      	add	r3, r2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	8b92      	ldrh	r2, [r2, #28]
 8001976:	4293      	cmp	r3, r2
 8001978:	dd09      	ble.n	800198e <ili9341_clip_rect+0xec>
      { *w = lcd->screen_size.width - *x; }
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8b9a      	ldrh	r2, [r3, #28]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	b29b      	uxth	r3, r3
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b29a      	uxth	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001994:	461a      	mov	r2, r3
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	8bd2      	ldrh	r2, [r2, #30]
 80019a0:	4293      	cmp	r3, r2
 80019a2:	dd09      	ble.n	80019b8 <ili9341_clip_rect+0x116>
      { *h = lcd->screen_size.height - *y; }
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8bda      	ldrh	r2, [r3, #30]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <ili9341_clip_rect+0x12a>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <ili9341_clip_rect+0x12a>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <ili9341_clip_rect+0x12c>
 80019cc:	2300      	movs	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	e000      	b.n	80019d4 <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e6:	f000 fd74 	bl	80024d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ea:	f000 f825 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 f9f7 	bl	8001de0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019f2:	f000 f9cf 	bl	8001d94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019f6:	f000 f99d 	bl	8001d34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80019fa:	f000 f87f 	bl	8001afc <MX_ADC1_Init>
  MX_TIM16_Init();
 80019fe:	f000 f943 	bl	8001c88 <MX_TIM16_Init>
  MX_OPAMP1_Init();
 8001a02:	f000 f8df 	bl	8001bc4 <MX_OPAMP1_Init>
  MX_SPI1_Init();
 8001a06:	f000 f901 	bl	8001c0c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a0a:	f000 f963 	bl	8001cd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  init_tasks(&hspi1, &htim16, &hadc1, &huart2, &huart1);
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <main+0x44>)
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <main+0x48>)
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <main+0x4c>)
 8001a16:	4906      	ldr	r1, [pc, #24]	; (8001a30 <main+0x50>)
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <main+0x54>)
 8001a1a:	f000 fd15 	bl	8002448 <init_tasks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    manage_tasks();
 8001a1e:	f000 fd29 	bl	8002474 <manage_tasks>
 8001a22:	e7fc      	b.n	8001a1e <main+0x3e>
 8001a24:	20004504 	.word	0x20004504
 8001a28:	2000458c 	.word	0x2000458c
 8001a2c:	2000432c 	.word	0x2000432c
 8001a30:	200044b8 	.word	0x200044b8
 8001a34:	2000440c 	.word	0x2000440c

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	; 0x58
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2244      	movs	r2, #68	; 0x44
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 faea 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a5e:	f002 fc07 	bl	8004270 <HAL_PWREx_ControlVoltageScaling>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a68:	f000 fa12 	bl	8001e90 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a6c:	f002 fbe2 	bl	8004234 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <SystemClock_Config+0xc0>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <SystemClock_Config+0xc0>)
 8001a78:	f023 0318 	bic.w	r3, r3, #24
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a80:	2314      	movs	r3, #20
 8001a82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a90:	2360      	movs	r3, #96	; 0x60
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fc31 	bl	800431c <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001ac0:	f000 f9e6 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 f831 	bl	8004b44 <HAL_RCC_ClockConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ae8:	f000 f9d2 	bl	8001e90 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001aec:	f003 fc44 	bl	8005378 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001af0:	bf00      	nop
 8001af2:	3758      	adds	r7, #88	; 0x58
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000

08001afc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b02:	463b      	mov	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b14:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <MX_ADC1_Init+0xc0>)
 8001b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b1a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8001b1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b74:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001b76:	f000 ff0d 	bl	8002994 <HAL_ADC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001b80:	f000 f986 	bl	8001e90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_ADC1_Init+0xc4>)
 8001b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b90:	237f      	movs	r3, #127	; 0x7f
 8001b92:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b94:	2304      	movs	r3, #4
 8001b96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_ADC1_Init+0xbc>)
 8001ba2:	f001 f8db 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001bac:	f000 f970 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000432c 	.word	0x2000432c
 8001bbc:	50040000 	.word	0x50040000
 8001bc0:	2a000400 	.word	0x2a000400

08001bc4 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <MX_OPAMP1_Init+0x44>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001bd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bd4:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001bd8:	220c      	movs	r2, #12
 8001bda:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_OPAMP1_Init+0x40>)
 8001bf0:	f002 fa4a 	bl	8004088 <HAL_OPAMP_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_OPAMP1_Init+0x3a>
  {
    Error_Handler();
 8001bfa:	f000 f949 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200043d8 	.word	0x200043d8
 8001c08:	40007800 	.word	0x40007800

08001c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <MX_SPI1_Init+0x78>)
 8001c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_SPI1_Init+0x74>)
 8001c6c:	f003 fc86 	bl	800557c <HAL_SPI_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f000 f90b 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000440c 	.word	0x2000440c
 8001c84:	40013000 	.word	0x40013000

08001c88 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <MX_TIM16_Init+0x48>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32 - 1;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001c94:	221f      	movs	r2, #31
 8001c96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8000 - 1;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001ca0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001ca4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_TIM16_Init+0x44>)
 8001cba:	f004 f96b 	bl	8005f94 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001cc4:	f000 f8e4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200044b8 	.word	0x200044b8
 8001cd0:	40014400 	.word	0x40014400

08001cd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <MX_USART1_UART_Init+0x5c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001ce0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_USART1_UART_Init+0x58>)
 8001d18:	f004 fb94 	bl	8006444 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d22:	f000 f8b5 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20004504 	.word	0x20004504
 8001d30:	40013800 	.word	0x40013800

08001d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MX_USART2_UART_Init+0x5c>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d78:	f004 fb64 	bl	8006444 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 f885 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000458c 	.word	0x2000458c
 8001d90:	40004400 	.word	0x40004400

08001d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_DMA_Init+0x48>)
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <MX_DMA_Init+0x48>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6493      	str	r3, [r2, #72]	; 0x48
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <MX_DMA_Init+0x48>)
 8001da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	200b      	movs	r0, #11
 8001db8:	f001 fda7 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001dbc:	200b      	movs	r0, #11
 8001dbe:	f001 fdc0 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	200d      	movs	r0, #13
 8001dc8:	f001 fd9f 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001dcc:	200d      	movs	r0, #13
 8001dce:	f001 fdb8 	bl	8003942 <HAL_NVIC_EnableIRQ>

}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_GPIO_Init+0xa8>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LED_Pin|DC_Pin|RESET_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	21c9      	movs	r1, #201	; 0xc9
 8001e42:	4812      	ldr	r0, [pc, #72]	; (8001e8c <MX_GPIO_Init+0xac>)
 8001e44:	f002 f908 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 8001e48:	2341      	movs	r3, #65	; 0x41
 8001e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <MX_GPIO_Init+0xac>)
 8001e60:	f001 ff90 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RESET_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin;
 8001e64:	2388      	movs	r3, #136	; 0x88
 8001e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_GPIO_Init+0xac>)
 8001e7c:	f001 ff82 	bl	8003d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000400 	.word	0x48000400

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6613      	str	r3, [r2, #96]	; 0x60
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2254      	movs	r2, #84	; 0x54
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 f88b 	bl	8007020 <memset>
  if(hadc->Instance==ADC1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_ADC_MspInit+0x118>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d16e      	bne.n	8001ff2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f1e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f28:	2310      	movs	r3, #16
 8001f2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 f822 	bl	8004f8c <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001f4e:	f7ff ff9f 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_ADC_MspInit+0x11c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <HAL_ADC_MspInit+0x11c>)
 8001f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_ADC_MspInit+0x11c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_ADC_MspInit+0x11c>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a24      	ldr	r2, [pc, #144]	; (8002000 <HAL_ADC_MspInit+0x11c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_ADC_MspInit+0x11c>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f82:	2320      	movs	r3, #32
 8001f84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f86:	230b      	movs	r3, #11
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f98:	f001 fef4 	bl	8003d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_ADC_MspInit+0x124>)
 8001fa0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fcc:	2220      	movs	r2, #32
 8001fce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fd6:	480b      	ldr	r0, [pc, #44]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fd8:	f001 fcce 	bl	8003978 <HAL_DMA_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001fe2:	f7ff ff55 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fec:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_ADC_MspInit+0x120>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3778      	adds	r7, #120	; 0x78
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	50040000 	.word	0x50040000
 8002000:	40021000 	.word	0x40021000
 8002004:	20004390 	.word	0x20004390
 8002008:	40020008 	.word	0x40020008

0800200c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_OPAMP_MspInit+0x74>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d124      	bne.n	8002078 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_OPAMP_MspInit+0x78>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <HAL_OPAMP_MspInit+0x78>)
 8002034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_OPAMP_MspInit+0x78>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_OPAMP_MspInit+0x78>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_OPAMP_MspInit+0x78>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_OPAMP_MspInit+0x78>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800205e:	2309      	movs	r3, #9
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f001 fe86 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40007800 	.word	0x40007800
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <HAL_SPI_MspInit+0xf0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d162      	bne.n	8002170 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_SPI_MspInit+0xf4>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_SPI_MspInit+0xf4>)
 80020b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b4:	6613      	str	r3, [r2, #96]	; 0x60
 80020b6:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_SPI_MspInit+0xf4>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_SPI_MspInit+0xf4>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a2d      	ldr	r2, [pc, #180]	; (800217c <HAL_SPI_MspInit+0xf4>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_SPI_MspInit+0xf4>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80020da:	2382      	movs	r3, #130	; 0x82
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ea:	2305      	movs	r3, #5
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f8:	f001 fe44 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210c:	2305      	movs	r3, #5
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211a:	f001 fe33 	bl	8003d84 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_SPI_MspInit+0xfc>)
 8002122:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002126:	2201      	movs	r2, #1
 8002128:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 800212c:	2210      	movs	r2, #16
 800212e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002154:	480a      	ldr	r0, [pc, #40]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002156:	f001 fc0f 	bl	8003978 <HAL_DMA_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8002160:	f7ff fe96 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_SPI_MspInit+0xf8>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40013000 	.word	0x40013000
 800217c:	40021000 	.word	0x40021000
 8002180:	20004470 	.word	0x20004470
 8002184:	40020030 	.word	0x40020030

08002188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <HAL_TIM_Base_MspInit+0x44>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d113      	bne.n	80021c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_TIM_Base_MspInit+0x48>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_TIM_Base_MspInit+0x48>)
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	6613      	str	r3, [r2, #96]	; 0x60
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_TIM_Base_MspInit+0x48>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2019      	movs	r0, #25
 80021b8:	f001 fba7 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021bc:	2019      	movs	r0, #25
 80021be:	f001 fbc0 	bl	8003942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40014400 	.word	0x40014400
 80021d0:	40021000 	.word	0x40021000

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0a0      	sub	sp, #128	; 0x80
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	2254      	movs	r2, #84	; 0x54
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 ff13 	bl	8007020 <memset>
  if(huart->Instance==USART1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a47      	ldr	r2, [pc, #284]	; (800231c <HAL_UART_MspInit+0x148>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d138      	bne.n	8002276 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	4618      	mov	r0, r3
 8002212:	f002 febb 	bl	8004f8c <HAL_RCCEx_PeriphCLKConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800221c:	f7ff fe38 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_UART_MspInit+0x14c>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002224:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_UART_MspInit+0x14c>)
 8002226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222a:	6613      	str	r3, [r2, #96]	; 0x60
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_UART_MspInit+0x14c>)
 800222e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_UART_MspInit+0x14c>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223c:	4a38      	ldr	r2, [pc, #224]	; (8002320 <HAL_UART_MspInit+0x14c>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_UART_MspInit+0x14c>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002250:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002254:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002262:	2307      	movs	r3, #7
 8002264:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002270:	f001 fd88 	bl	8003d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002274:	e04d      	b.n	8002312 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_UART_MspInit+0x150>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d148      	bne.n	8002312 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002284:	2300      	movs	r3, #0
 8002286:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fe7d 	bl	8004f8c <HAL_RCCEx_PeriphCLKConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002298:	f7ff fdfa 	bl	8001e90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_UART_MspInit+0x14c>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_UART_MspInit+0x14c>)
 80022a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a6:	6593      	str	r3, [r2, #88]	; 0x58
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_UART_MspInit+0x14c>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_UART_MspInit+0x14c>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_UART_MspInit+0x14c>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_UART_MspInit+0x14c>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80022cc:	2304      	movs	r3, #4
 80022ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022dc:	2307      	movs	r3, #7
 80022de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ea:	f001 fd4b 	bl	8003d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002300:	2303      	movs	r3, #3
 8002302:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002308:	4619      	mov	r1, r3
 800230a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230e:	f001 fd39 	bl	8003d84 <HAL_GPIO_Init>
}
 8002312:	bf00      	nop
 8002314:	3780      	adds	r7, #128	; 0x80
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40013800 	.word	0x40013800
 8002320:	40021000 	.word	0x40021000
 8002324:	40004400 	.word	0x40004400

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 f902 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel1_IRQHandler+0x10>)
 8002382:	f001 fc11 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20004390 	.word	0x20004390

08002390 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <DMA1_Channel3_IRQHandler+0x10>)
 8002396:	f001 fc07 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20004470 	.word	0x20004470

080023a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80023aa:	f003 fe9f 	bl	80060ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200044b8 	.word	0x200044b8

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <_sbrk+0x5c>)
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <_sbrk+0x60>)
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <_sbrk+0x64>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <_sbrk+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e8:	f004 fe32 	bl	8007050 <__errno>
 80023ec:	4603      	mov	r3, r0
 80023ee:	220c      	movs	r2, #12
 80023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e009      	b.n	800240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <_sbrk+0x64>)
 8002408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000c000 	.word	0x2000c000
 8002418:	00000800 	.word	0x00000800
 800241c:	20004614 	.word	0x20004614
 8002420:	20004768 	.word	0x20004768

08002424 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <SystemInit+0x20>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <SystemInit+0x20>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <init_tasks>:
void init_tasks(
    SPI_HandleTypeDef* spi,
    TIM_HandleTypeDef* timer,
    ADC_HandleTypeDef* adc,
    UART_HandleTypeDef* uart,
    UART_HandleTypeDef* uart_bt) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]

  init_display(spi, timer, adc, uart, uart_bt);
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7fe f8b1 	bl	80005c8 <init_display>
  HAL_TIM_Base_Start_IT(timer);
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f003 fdec 	bl	8006044 <HAL_TIM_Base_Start_IT>
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <manage_tasks>:

void manage_tasks() {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  display_graph();
 8002478:	f7fe f95c 	bl	8000734 <display_graph>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002484:	f7ff ffce 	bl	8002424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <LoopForever+0x6>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <LoopForever+0xe>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <LoopForever+0x16>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ae:	f004 fdd5 	bl	800705c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024b2:	f7ff fa95 	bl	80019e0 <main>

080024b6 <LoopForever>:

LoopForever:
    b LoopForever
 80024b6:	e7fe      	b.n	80024b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80024bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80024c4:	08008c5c 	.word	0x08008c5c
  ldr r2, =_sbss
 80024c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80024cc:	20004764 	.word	0x20004764

080024d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC1_IRQHandler>

080024d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f001 fa09 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f80e 	bl	8002504 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	e001      	b.n	80024f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f4:	f7ff fcd2 	bl	8001e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f8:	79fb      	ldrb	r3, [r7, #7]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_InitTick+0x6c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d023      	beq.n	8002560 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_InitTick+0x70>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_InitTick+0x6c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	fbb3 f3f1 	udiv	r3, r3, r1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fa15 	bl	800395e <HAL_SYSTICK_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d809      	bhi.n	8002554 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f001 f9df 	bl	800390a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_InitTick+0x74>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e007      	b.n	8002564 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e004      	b.n	8002564 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e001      	b.n	8002564 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000000c 	.word	0x2000000c
 8002574:	20000004 	.word	0x20000004
 8002578:	20000008 	.word	0x20000008

0800257c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	2000000c 	.word	0x2000000c
 80025a0:	20004618 	.word	0x20004618

080025a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20004618 	.word	0x20004618

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff ffee 	bl	80025a4 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d005      	beq.n	80025e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_Delay+0x44>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e2:	bf00      	nop
 80025e4:	f7ff ffde 	bl	80025a4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8f7      	bhi.n	80025e4 <HAL_Delay+0x28>
  {
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000000c 	.word	0x2000000c

08002604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3360      	adds	r3, #96	; 0x60
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <LL_ADC_SetOffset+0x44>)
 800268e:	4013      	ands	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	4313      	orrs	r3, r2
 800269c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	03fff000 	.word	0x03fff000

080026b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3360      	adds	r3, #96	; 0x60
 80026c2:	461a      	mov	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3330      	adds	r3, #48	; 0x30
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	211f      	movs	r1, #31
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	f003 011f 	and.w	r1, r3, #31
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	431a      	orrs	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3314      	adds	r3, #20
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	0e5b      	lsrs	r3, r3, #25
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	4413      	add	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	0d1b      	lsrs	r3, r3, #20
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2107      	movs	r1, #7
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	401a      	ands	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	0d1b      	lsrs	r3, r3, #20
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	43db      	mvns	r3, r3
 8002806:	401a      	ands	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0318 	and.w	r3, r3, #24
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002810:	40d9      	lsrs	r1, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	400b      	ands	r3, r1
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	431a      	orrs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	0007ffff 	.word	0x0007ffff

08002834 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6093      	str	r3, [r2, #8]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800286c:	d101      	bne.n	8002872 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <LL_ADC_IsEnabled+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_ADC_IsEnabled+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800292e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002932:	f043 0204 	orr.w	r2, r3, #4
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d101      	bne.n	800295e <LL_ADC_REG_IsConversionOngoing+0x18>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b08      	cmp	r3, #8
 800297e:	d101      	bne.n	8002984 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e126      	b.n	8002bfc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fa91 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff3f 	bl	8002858 <LL_ADC_IsDeepPowerDownEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff25 	bl	8002834 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff5a 	bl	80028a8 <LL_ADC_IsInternalRegulatorEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d115      	bne.n	8002a26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff3e 	bl	8002880 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a04:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <HAL_ADC_Init+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	4a7f      	ldr	r2, [pc, #508]	; (8002c08 <HAL_ADC_Init+0x274>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	3301      	adds	r3, #1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a18:	e002      	b.n	8002a20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff3c 	bl	80028a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff75 	bl	8002946 <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80bf 	bne.w	8002bea <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 80bb 	bne.w	8002bea <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a7c:	f043 0202 	orr.w	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff35 	bl	80028f8 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a94:	485d      	ldr	r0, [pc, #372]	; (8002c0c <HAL_ADC_Init+0x278>)
 8002a96:	f7ff ff2f 	bl	80028f8 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	485a      	ldr	r0, [pc, #360]	; (8002c10 <HAL_ADC_Init+0x27c>)
 8002aa8:	f7ff fdac 	bl	8002604 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7e5b      	ldrb	r3, [r3, #25]
 8002ab0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ab6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002abc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ac2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	045b      	lsls	r3, r3, #17
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_ADC_Init+0x280>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	430b      	orrs	r3, r1
 8002b16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff25 	bl	800296c <LL_ADC_INJ_IsConversionOngoing>
 8002b22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d13d      	bne.n	8002ba6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d13a      	bne.n	8002ba6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b4c:	f023 0302 	bic.w	r3, r3, #2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	430b      	orrs	r3, r1
 8002b58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d118      	bne.n	8002b96 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b86:	430a      	orrs	r2, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	611a      	str	r2, [r3, #16]
 8002b94:	e007      	b.n	8002ba6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10c      	bne.n	8002bc8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f023 010f 	bic.w	r1, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc6:	e007      	b.n	8002bd8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 020f 	bic.w	r2, r2, #15
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
 8002be8:	e007      	b.n	8002bfa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000004 	.word	0x20000004
 8002c08:	053e2d63 	.word	0x053e2d63
 8002c0c:	50040000 	.word	0x50040000
 8002c10:	50040300 	.word	0x50040300
 8002c14:	fff0c007 	.word	0xfff0c007

08002c18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fe8c 	bl	8002946 <LL_ADC_REG_IsConversionOngoing>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d167      	bne.n	8002d04 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x2a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e063      	b.n	8002d0a <HAL_ADC_Start_DMA+0xf2>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fc68 	bl	8003520 <ADC_Enable>
 8002c50:	4603      	mov	r3, r0
 8002c52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d14f      	bne.n	8002cfa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	f023 0206 	bic.w	r2, r3, #6
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58
 8002c86:	e002      	b.n	8002c8e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_ADC_Start_DMA+0xfc>)
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_ADC_Start_DMA+0x100>)
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_ADC_Start_DMA+0x104>)
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	221c      	movs	r2, #28
 8002cac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0210 	orr.w	r2, r2, #16
 8002cc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3340      	adds	r3, #64	; 0x40
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f000 feff 	bl	8003ae8 <HAL_DMA_Start_IT>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe13 	bl	800291e <LL_ADC_REG_StartConversion>
 8002cf8:	e006      	b.n	8002d08 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d02:	e001      	b.n	8002d08 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
 8002d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	0800362d 	.word	0x0800362d
 8002d18:	08003705 	.word	0x08003705
 8002d1c:	08003721 	.word	0x08003721

08002d20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b0b6      	sub	sp, #216	; 0xd8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x22>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e3bb      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x79a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fddb 	bl	8002946 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 83a0 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d824      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	3b02      	subs	r3, #2
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d81b      	bhi.n	8002dea <HAL_ADC_ConfigChannel+0x8e>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_ADC_ConfigChannel+0x5c>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd1 	.word	0x08002dd1
 8002dc0:	08002dd9 	.word	0x08002dd9
 8002dc4:	08002de1 	.word	0x08002de1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002dc8:	230c      	movs	r3, #12
 8002dca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002dce:	e010      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002dd6:	e00c      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002dd8:	2318      	movs	r3, #24
 8002dda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002dde:	e008      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002dea:	2306      	movs	r3, #6
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002df0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002e00:	f7ff fc9c 	bl	800273c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fd9c 	bl	8002946 <LL_ADC_REG_IsConversionOngoing>
 8002e0e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fda8 	bl	800296c <LL_ADC_INJ_IsConversionOngoing>
 8002e1c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 81a4 	bne.w	8003172 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 819f 	bne.w	8003172 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f7ff fca7 	bl	8002794 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	08db      	lsrs	r3, r3, #3
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00a      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6919      	ldr	r1, [r3, #16]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e78:	f7ff fbf8 	bl	800266c <LL_ADC_SetOffset>
 8002e7c:	e179      	b.n	8003172 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fc15 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x14e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fc0a 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	e01e      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x18c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fbff 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e004      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002edc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1a4>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	e018      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1d6>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fbce 	bl	80026e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fbb2 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x214>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fba7 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	e01e      	b.n	8002fae <HAL_ADC_ConfigChannel+0x252>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fb9c 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e004      	b.n	8002fac <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x26a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	e018      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x29c>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e004      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fb6b 	bl	80026e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2102      	movs	r1, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fb4f 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x2da>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fb44 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 800302c:	4603      	mov	r3, r0
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	e01e      	b.n	8003074 <HAL_ADC_ConfigChannel+0x318>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fb39 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800305c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e004      	b.n	8003072 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_ConfigChannel+0x330>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	e014      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x35a>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800309a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800309c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80030a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e004      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80030ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d106      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	2102      	movs	r1, #2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fb0c 	bl	80026e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2103      	movs	r1, #3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff faf0 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x398>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2103      	movs	r1, #3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fae5 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	f003 021f 	and.w	r2, r3, #31
 80030f2:	e017      	b.n	8003124 <HAL_ADC_ConfigChannel+0x3c8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2103      	movs	r1, #3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fada 	bl	80026b4 <LL_ADC_GetOffsetChannel>
 8003100:	4603      	mov	r3, r0
 8003102:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800310c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800311a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_ADC_ConfigChannel+0x3e0>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	e011      	b.n	8003160 <HAL_ADC_ConfigChannel+0x404>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800314a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800314e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003160:	429a      	cmp	r2, r3
 8003162:	d106      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	2103      	movs	r1, #3
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fab7 	bl	80026e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fbbe 	bl	80028f8 <LL_ADC_IsEnabled>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8140 	bne.w	8003404 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	461a      	mov	r2, r3
 8003192:	f7ff fb2b 	bl	80027ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4a8f      	ldr	r2, [pc, #572]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	f040 8131 	bne.w	8003404 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x46e>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0e9b      	lsrs	r3, r3, #26
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2b09      	cmp	r3, #9
 80031c0:	bf94      	ite	ls
 80031c2:	2301      	movls	r3, #1
 80031c4:	2300      	movhi	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e019      	b.n	80031fe <HAL_ADC_ConfigChannel+0x4a2>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e003      	b.n	80031ee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	bf94      	ite	ls
 80031f8:	2301      	movls	r3, #1
 80031fa:	2300      	movhi	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d079      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_ADC_ConfigChannel+0x4c2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0e9b      	lsrs	r3, r3, #26
 8003214:	3301      	adds	r3, #1
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800321c:	e015      	b.n	800324a <HAL_ADC_ConfigChannel+0x4ee>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e003      	b.n	8003242 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800323a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	3301      	adds	r3, #1
 8003244:	069b      	lsls	r3, r3, #26
 8003246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_ADC_ConfigChannel+0x50e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	3301      	adds	r3, #1
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	e017      	b.n	800329a <HAL_ADC_ConfigChannel+0x53e>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800327c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e003      	b.n	800328e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	ea42 0103 	orr.w	r1, r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x564>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 021f 	and.w	r2, r3, #31
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	051b      	lsls	r3, r3, #20
 80032be:	e018      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x596>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 021f 	and.w	r2, r3, #31
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f2:	430b      	orrs	r3, r1
 80032f4:	e081      	b.n	80033fa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x5b6>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	0e9b      	lsrs	r3, r3, #26
 8003308:	3301      	adds	r3, #1
 800330a:	069b      	lsls	r3, r3, #26
 800330c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003310:	e015      	b.n	800333e <HAL_ADC_ConfigChannel+0x5e2>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e003      	b.n	8003336 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	069b      	lsls	r3, r3, #26
 800333a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_ADC_ConfigChannel+0x602>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	3301      	adds	r3, #1
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	e017      	b.n	800338e <HAL_ADC_ConfigChannel+0x632>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	61bb      	str	r3, [r7, #24]
  return result;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e003      	b.n	8003382 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	ea42 0103 	orr.w	r1, r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x65e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b1e      	subs	r3, #30
 80033b2:	051b      	lsls	r3, r3, #20
 80033b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033b8:	e01e      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x69c>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	60fb      	str	r3, [r7, #12]
  return result;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e006      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x688>
 80033d6:	bf00      	nop
 80033d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f003 021f 	and.w	r2, r3, #31
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	3b1e      	subs	r3, #30
 80033f2:	051b      	lsls	r3, r3, #20
 80033f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fe:	4619      	mov	r1, r3
 8003400:	f7ff f9c8 	bl	8002794 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_ADC_ConfigChannel+0x7a4>)
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d06c      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003410:	483c      	ldr	r0, [pc, #240]	; (8003504 <HAL_ADC_ConfigChannel+0x7a8>)
 8003412:	f7ff f91d 	bl	8002650 <LL_ADC_GetCommonPathInternalCh>
 8003416:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_ADC_ConfigChannel+0x7ac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d127      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d121      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a35      	ldr	r2, [pc, #212]	; (800350c <HAL_ADC_ConfigChannel+0x7b0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d157      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800343e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003442:	4619      	mov	r1, r3
 8003444:	482f      	ldr	r0, [pc, #188]	; (8003504 <HAL_ADC_ConfigChannel+0x7a8>)
 8003446:	f7ff f8f0 	bl	800262a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_ADC_ConfigChannel+0x7b4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	4a30      	ldr	r2, [pc, #192]	; (8003514 <HAL_ADC_ConfigChannel+0x7b8>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003464:	e002      	b.n	800346c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003472:	e03a      	b.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_ADC_ConfigChannel+0x7bc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <HAL_ADC_ConfigChannel+0x7b0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d12a      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349c:	4619      	mov	r1, r3
 800349e:	4819      	ldr	r0, [pc, #100]	; (8003504 <HAL_ADC_ConfigChannel+0x7a8>)
 80034a0:	f7ff f8c3 	bl	800262a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a4:	e021      	b.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <HAL_ADC_ConfigChannel+0x7c0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d11c      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <HAL_ADC_ConfigChannel+0x7b0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d111      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ce:	4619      	mov	r1, r3
 80034d0:	480c      	ldr	r0, [pc, #48]	; (8003504 <HAL_ADC_ConfigChannel+0x7a8>)
 80034d2:	f7ff f8aa 	bl	800262a <LL_ADC_SetCommonPathInternalCh>
 80034d6:	e008      	b.n	80034ea <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	37d8      	adds	r7, #216	; 0xd8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	80080000 	.word	0x80080000
 8003504:	50040300 	.word	0x50040300
 8003508:	c7520000 	.word	0xc7520000
 800350c:	50040000 	.word	0x50040000
 8003510:	20000004 	.word	0x20000004
 8003514:	053e2d63 	.word	0x053e2d63
 8003518:	cb840000 	.word	0xcb840000
 800351c:	80000001 	.word	0x80000001

08003520 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f9e1 	bl	80028f8 <LL_ADC_IsEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d169      	bne.n	8003610 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <ADC_Enable+0xfc>)
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e055      	b.n	8003612 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f9b0 	bl	80028d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003570:	482b      	ldr	r0, [pc, #172]	; (8003620 <ADC_Enable+0x100>)
 8003572:	f7ff f86d 	bl	8002650 <LL_ADC_GetCommonPathInternalCh>
 8003576:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <ADC_Enable+0x104>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	4a28      	ldr	r2, [pc, #160]	; (8003628 <ADC_Enable+0x108>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800359a:	e002      	b.n	80035a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3b01      	subs	r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f9      	bne.n	800359c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035a8:	f7fe fffc 	bl	80025a4 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ae:	e028      	b.n	8003602 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f99f 	bl	80028f8 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f983 	bl	80028d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035ca:	f7fe ffeb 	bl	80025a4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d914      	bls.n	8003602 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00d      	beq.n	8003602 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f043 0210 	orr.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d1cf      	bne.n	80035b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	8000003f 	.word	0x8000003f
 8003620:	50040300 	.word	0x50040300
 8003624:	20000004 	.word	0x20000004
 8003628:	053e2d63 	.word	0x053e2d63

0800362c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003642:	2b00      	cmp	r3, #0
 8003644:	d14b      	bne.n	80036de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f856 	bl	8002716 <LL_ADC_REG_IsTriggerSourceSWStart>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d032      	beq.n	80036d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12b      	bne.n	80036d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11f      	bne.n	80036d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
 80036a2:	e018      	b.n	80036d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d111      	bne.n	80036d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fb22 	bl	8002d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036dc:	e00e      	b.n	80036fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fb2c 	bl	8002d48 <HAL_ADC_ErrorCallback>
}
 80036f0:	e004      	b.n	80036fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fb0e 	bl	8002d34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff fafe 	bl	8002d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff29 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800391c:	f7ff ff3e 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff ff8e 	bl	8003848 <NVIC_EncodePriority>
 800392c:	4602      	mov	r2, r0
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff5d 	bl	80037f4 <__NVIC_SetPriority>
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff31 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffa2 	bl	80038b0 <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e098      	b.n	8003abc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_DMA_Init+0x150>)
 8003992:	429a      	cmp	r2, r3
 8003994:	d80f      	bhi.n	80039b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <HAL_DMA_Init+0x154>)
 800399e:	4413      	add	r3, r2
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <HAL_DMA_Init+0x158>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	009a      	lsls	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <HAL_DMA_Init+0x15c>)
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
 80039b4:	e00e      	b.n	80039d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b46      	ldr	r3, [pc, #280]	; (8003ad8 <HAL_DMA_Init+0x160>)
 80039be:	4413      	add	r3, r2
 80039c0:	4a43      	ldr	r2, [pc, #268]	; (8003ad0 <HAL_DMA_Init+0x158>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	009a      	lsls	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a42      	ldr	r2, [pc, #264]	; (8003adc <HAL_DMA_Init+0x164>)
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2e:	d039      	beq.n	8003aa4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <HAL_DMA_Init+0x15c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d11a      	bne.n	8003a70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_DMA_Init+0x168>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f003 031c 	and.w	r3, r3, #28
 8003a46:	210f      	movs	r1, #15
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	4924      	ldr	r1, [pc, #144]	; (8003ae0 <HAL_DMA_Init+0x168>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a54:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <HAL_DMA_Init+0x168>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	f003 031c 	and.w	r3, r3, #28
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	491d      	ldr	r1, [pc, #116]	; (8003ae0 <HAL_DMA_Init+0x168>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
 8003a6e:	e019      	b.n	8003aa4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a70:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <HAL_DMA_Init+0x16c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 031c 	and.w	r3, r3, #28
 8003a7c:	210f      	movs	r1, #15
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	4917      	ldr	r1, [pc, #92]	; (8003ae4 <HAL_DMA_Init+0x16c>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_DMA_Init+0x16c>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f003 031c 	and.w	r3, r3, #28
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	4911      	ldr	r1, [pc, #68]	; (8003ae4 <HAL_DMA_Init+0x16c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40020407 	.word	0x40020407
 8003acc:	bffdfff8 	.word	0xbffdfff8
 8003ad0:	cccccccd 	.word	0xcccccccd
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	bffdfbf8 	.word	0xbffdfbf8
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	400200a8 	.word	0x400200a8
 8003ae4:	400204a8 	.word	0x400204a8

08003ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Start_IT+0x20>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e04b      	b.n	8003ba0 <HAL_DMA_Start_IT+0xb8>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d13a      	bne.n	8003b92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8ee 	bl	8003d22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 020e 	orr.w	r2, r2, #14
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e00f      	b.n	8003b80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 020a 	orr.w	r2, r2, #10
 8003b7e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e005      	b.n	8003b9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f003 031c 	and.w	r3, r3, #28
 8003bc8:	2204      	movs	r2, #4
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d026      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x7a>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d021      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0204 	bic.w	r2, r2, #4
 8003bfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f003 021c 	and.w	r2, r3, #28
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	2104      	movs	r1, #4
 8003c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d071      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c20:	e06c      	b.n	8003cfc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f003 031c 	and.w	r3, r3, #28
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d02e      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xec>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d029      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 020a 	bic.w	r2, r2, #10
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f003 021c 	and.w	r2, r3, #28
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2102      	movs	r1, #2
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d038      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c92:	e033      	b.n	8003cfc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f003 031c 	and.w	r3, r3, #28
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02a      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x156>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d025      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 020e 	bic.w	r2, r2, #14
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f003 021c 	and.w	r2, r3, #28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
}
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d14:	b2db      	uxtb	r3, r3
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f003 021c 	and.w	r2, r3, #28
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d108      	bne.n	8003d66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d64:	e007      	b.n	8003d76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	e148      	b.n	8004026 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 813a 	beq.w	8004020 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d005      	beq.n	8003dc4 <HAL_GPIO_Init+0x40>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d130      	bne.n	8003e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	f003 0201 	and.w	r2, r3, #1
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d017      	beq.n	8003e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d123      	bne.n	8003eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	08da      	lsrs	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3208      	adds	r2, #8
 8003e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0203 	and.w	r2, r3, #3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8094 	beq.w	8004020 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef8:	4b52      	ldr	r3, [pc, #328]	; (8004044 <HAL_GPIO_Init+0x2c0>)
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_GPIO_Init+0x2c0>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6613      	str	r3, [r2, #96]	; 0x60
 8003f04:	4b4f      	ldr	r3, [pc, #316]	; (8004044 <HAL_GPIO_Init+0x2c0>)
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f10:	4a4d      	ldr	r2, [pc, #308]	; (8004048 <HAL_GPIO_Init+0x2c4>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f3a:	d00d      	beq.n	8003f58 <HAL_GPIO_Init+0x1d4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a43      	ldr	r2, [pc, #268]	; (800404c <HAL_GPIO_Init+0x2c8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <HAL_GPIO_Init+0x1d0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a42      	ldr	r2, [pc, #264]	; (8004050 <HAL_GPIO_Init+0x2cc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_GPIO_Init+0x1cc>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e004      	b.n	8003f5a <HAL_GPIO_Init+0x1d6>
 8003f50:	2307      	movs	r3, #7
 8003f52:	e002      	b.n	8003f5a <HAL_GPIO_Init+0x1d6>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_GPIO_Init+0x1d6>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	f002 0203 	and.w	r2, r2, #3
 8003f60:	0092      	lsls	r2, r2, #2
 8003f62:	4093      	lsls	r3, r2
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f6a:	4937      	ldr	r1, [pc, #220]	; (8004048 <HAL_GPIO_Init+0x2c4>)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f78:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f9c:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fc6:	4a23      	ldr	r2, [pc, #140]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_GPIO_Init+0x2d0>)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f aeaf 	bne.w	8003d94 <HAL_GPIO_Init+0x10>
  }
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40021000 	.word	0x40021000
 8004048:	40010000 	.word	0x40010000
 800404c:	48000400 	.word	0x48000400
 8004050:	48000800 	.word	0x48000800
 8004054:	40010400 	.word	0x40010400

08004058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
 8004064:	4613      	mov	r3, r2
 8004066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004068:	787b      	ldrb	r3, [r7, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004074:	e002      	b.n	800407c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0c3      	b.n	8004226 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d101      	bne.n	80040ae <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0bb      	b.n	8004226 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d101      	bne.n	80040be <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0b3      	b.n	8004226 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd ff96 	bl	800200c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ee:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d11b      	bne.n	8004130 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8004102:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6891      	ldr	r1, [r2, #8]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68d2      	ldr	r2, [r2, #12]
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6992      	ldr	r2, [r2, #24]
 8004114:	4311      	orrs	r1, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6912      	ldr	r2, [r2, #16]
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6952      	ldr	r2, [r2, #20]
 8004120:	4311      	orrs	r1, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	69d2      	ldr	r2, [r2, #28]
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	430b      	orrs	r3, r1
 800412e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d115      	bne.n	8004164 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8004142:	f023 030e 	bic.w	r3, r3, #14
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6891      	ldr	r1, [r2, #8]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6952      	ldr	r2, [r2, #20]
 8004154:	4311      	orrs	r1, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	69d2      	ldr	r2, [r2, #28]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d118      	bne.n	800419e <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8004176:	f023 030e 	bic.w	r3, r3, #14
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6891      	ldr	r1, [r2, #8]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68d2      	ldr	r2, [r2, #12]
 8004182:	4311      	orrs	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6912      	ldr	r2, [r2, #16]
 8004188:	4311      	orrs	r1, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6952      	ldr	r2, [r2, #20]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	69d2      	ldr	r2, [r2, #28]
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	430b      	orrs	r3, r1
 800419c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a6:	d12a      	bne.n	80041fe <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d013      	beq.n	80041d8 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80041c8:	f023 031f 	bic.w	r3, r3, #31
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6053      	str	r3, [r2, #4]
 80041d6:	e012      	b.n	80041fe <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80041f0:	f023 031f 	bic.w	r3, r3, #31
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_OPAMP_Init+0x1a8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4909      	ldr	r1, [pc, #36]	; (8004230 <HAL_OPAMP_Init+0x1a8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40007800 	.word	0x40007800

08004234 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40007000 	.word	0x40007000

08004254 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_PWREx_GetVoltageRange+0x18>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40007000 	.word	0x40007000

08004270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427e:	d130      	bne.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d038      	beq.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004296:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800429c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2232      	movs	r2, #50	; 0x32
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b4:	e002      	b.n	80042bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c8:	d102      	bne.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f2      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d110      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e00f      	b.n	8004302 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d007      	beq.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042f8:	4a05      	ldr	r2, [pc, #20]	; (8004310 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40007000 	.word	0x40007000
 8004314:	20000004 	.word	0x20000004
 8004318:	431bde83 	.word	0x431bde83

0800431c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f000 bc02 	b.w	8004b34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004330:	4b96      	ldr	r3, [pc, #600]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800433a:	4b94      	ldr	r3, [pc, #592]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80e4 	beq.w	800451a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_RCC_OscConfig+0x4c>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	f040 808b 	bne.w	8004476 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 8087 	bne.w	8004476 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004368:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_OscConfig+0x64>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e3d9      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	4b81      	ldr	r3, [pc, #516]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_RCC_OscConfig+0x7e>
 8004390:	4b7e      	ldr	r3, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004398:	e005      	b.n	80043a6 <HAL_RCC_OscConfig+0x8a>
 800439a:	4b7c      	ldr	r3, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d223      	bcs.n	80043f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fd8c 	bl	8004ecc <RCC_SetFlashLatencyFromMSIRange>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e3ba      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043be:	4b73      	ldr	r3, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a72      	ldr	r2, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043c4:	f043 0308 	orr.w	r3, r3, #8
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b70      	ldr	r3, [pc, #448]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	496d      	ldr	r1, [pc, #436]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043dc:	4b6b      	ldr	r3, [pc, #428]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	4968      	ldr	r1, [pc, #416]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
 80043f0:	e025      	b.n	800443e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043f2:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a65      	ldr	r2, [pc, #404]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b63      	ldr	r3, [pc, #396]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4960      	ldr	r1, [pc, #384]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004410:	4b5e      	ldr	r3, [pc, #376]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	495b      	ldr	r1, [pc, #364]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fd4c 	bl	8004ecc <RCC_SetFlashLatencyFromMSIRange>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e37a      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800443e:	f000 fc81 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b51      	ldr	r3, [pc, #324]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	4950      	ldr	r1, [pc, #320]	; (8004590 <HAL_RCC_OscConfig+0x274>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	fa22 f303 	lsr.w	r3, r2, r3
 800445a:	4a4e      	ldr	r2, [pc, #312]	; (8004594 <HAL_RCC_OscConfig+0x278>)
 800445c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800445e:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <HAL_RCC_OscConfig+0x27c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f84e 	bl	8002504 <HAL_InitTick>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d052      	beq.n	8004518 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	e35e      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d032      	beq.n	80044e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a42      	ldr	r2, [pc, #264]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800448a:	f7fe f88b 	bl	80025a4 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004492:	f7fe f887 	bl	80025a4 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e347      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a35      	ldr	r2, [pc, #212]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4930      	ldr	r1, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ce:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	492b      	ldr	r1, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
 80044e2:	e01a      	b.n	800451a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	; (800458c <HAL_RCC_OscConfig+0x270>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044f0:	f7fe f858 	bl	80025a4 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044f8:	f7fe f854 	bl	80025a4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e314      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1dc>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d073      	beq.n	800460e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d005      	beq.n	8004538 <HAL_RCC_OscConfig+0x21c>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d10e      	bne.n	8004550 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d10b      	bne.n	8004550 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	4b14      	ldr	r3, [pc, #80]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d063      	beq.n	800460c <HAL_RCC_OscConfig+0x2f0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d15f      	bne.n	800460c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e2f1      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d106      	bne.n	8004568 <HAL_RCC_OscConfig+0x24c>
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a0b      	ldr	r2, [pc, #44]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e025      	b.n	80045b4 <HAL_RCC_OscConfig+0x298>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004570:	d114      	bne.n	800459c <HAL_RCC_OscConfig+0x280>
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a05      	ldr	r2, [pc, #20]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a02      	ldr	r2, [pc, #8]	; (800458c <HAL_RCC_OscConfig+0x270>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e013      	b.n	80045b4 <HAL_RCC_OscConfig+0x298>
 800458c:	40021000 	.word	0x40021000
 8004590:	08008bd0 	.word	0x08008bd0
 8004594:	20000004 	.word	0x20000004
 8004598:	20000008 	.word	0x20000008
 800459c:	4ba0      	ldr	r3, [pc, #640]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a9f      	ldr	r2, [pc, #636]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b9d      	ldr	r3, [pc, #628]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a9c      	ldr	r2, [pc, #624]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80045ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fff2 	bl	80025a4 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd ffee 	bl	80025a4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e2ae      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	4b92      	ldr	r3, [pc, #584]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x2a8>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd ffde 	bl	80025a4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd ffda 	bl	80025a4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e29a      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fe:	4b88      	ldr	r3, [pc, #544]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x2d0>
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d060      	beq.n	80046dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d005      	beq.n	800462c <HAL_RCC_OscConfig+0x310>
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d119      	bne.n	800465a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d116      	bne.n	800465a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462c:	4b7c      	ldr	r3, [pc, #496]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_OscConfig+0x328>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e277      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b76      	ldr	r3, [pc, #472]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	4973      	ldr	r1, [pc, #460]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004658:	e040      	b.n	80046dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d023      	beq.n	80046aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004662:	4b6f      	ldr	r3, [pc, #444]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6e      	ldr	r2, [pc, #440]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fd ff99 	bl	80025a4 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd ff95 	bl	80025a4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e255      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004688:	4b65      	ldr	r3, [pc, #404]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b62      	ldr	r3, [pc, #392]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	495f      	ldr	r1, [pc, #380]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
 80046a8:	e018      	b.n	80046dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046aa:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5c      	ldr	r2, [pc, #368]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80046b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b6:	f7fd ff75 	bl	80025a4 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046be:	f7fd ff71 	bl	80025a4 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e231      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f0      	bne.n	80046be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d03c      	beq.n	8004762 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01c      	beq.n	800472a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f0:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	4a4a      	ldr	r2, [pc, #296]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd ff50 	bl	80025a4 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7fd ff4c 	bl	80025a4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e20c      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800471c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ef      	beq.n	8004708 <HAL_RCC_OscConfig+0x3ec>
 8004728:	e01b      	b.n	8004762 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004730:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd ff33 	bl	80025a4 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004742:	f7fd ff2f 	bl	80025a4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1ef      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004754:	4b32      	ldr	r3, [pc, #200]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ef      	bne.n	8004742 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80a6 	beq.w	80048bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004770:	2300      	movs	r3, #0
 8004772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004774:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	4a26      	ldr	r2, [pc, #152]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	6593      	str	r3, [r2, #88]	; 0x58
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004798:	2301      	movs	r3, #1
 800479a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	4b21      	ldr	r3, [pc, #132]	; (8004824 <HAL_RCC_OscConfig+0x508>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d118      	bne.n	80047da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_OscConfig+0x508>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_RCC_OscConfig+0x508>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b4:	f7fd fef6 	bl	80025a4 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fd fef2 	bl	80025a4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1b2      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ce:	4b15      	ldr	r3, [pc, #84]	; (8004824 <HAL_RCC_OscConfig+0x508>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d108      	bne.n	80047f4 <HAL_RCC_OscConfig+0x4d8>
 80047e2:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047f2:	e029      	b.n	8004848 <HAL_RCC_OscConfig+0x52c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d115      	bne.n	8004828 <HAL_RCC_OscConfig+0x50c>
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	4a07      	ldr	r2, [pc, #28]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004804:	f043 0304 	orr.w	r3, r3, #4
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	4a03      	ldr	r2, [pc, #12]	; (8004820 <HAL_RCC_OscConfig+0x504>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800481c:	e014      	b.n	8004848 <HAL_RCC_OscConfig+0x52c>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
 8004828:	4b9a      	ldr	r3, [pc, #616]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	4a99      	ldr	r2, [pc, #612]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004838:	4b96      	ldr	r3, [pc, #600]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	4a95      	ldr	r2, [pc, #596]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004840:	f023 0304 	bic.w	r3, r3, #4
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d016      	beq.n	800487e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fd fea8 	bl	80025a4 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fd fea4 	bl	80025a4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e162      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486e:	4b89      	ldr	r3, [pc, #548]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ed      	beq.n	8004858 <HAL_RCC_OscConfig+0x53c>
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fe91 	bl	80025a4 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fd fe8d 	bl	80025a4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e14b      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800489c:	4b7d      	ldr	r3, [pc, #500]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ed      	bne.n	8004886 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048aa:	7ffb      	ldrb	r3, [r7, #31]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b78      	ldr	r3, [pc, #480]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	4a77      	ldr	r2, [pc, #476]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d03c      	beq.n	8004942 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01c      	beq.n	800490a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048d0:	4b70      	ldr	r3, [pc, #448]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80048d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d6:	4a6f      	ldr	r2, [pc, #444]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd fe60 	bl	80025a4 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e8:	f7fd fe5c 	bl	80025a4 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e11c      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048fa:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80048fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCC_OscConfig+0x5cc>
 8004908:	e01b      	b.n	8004942 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800490a:	4b62      	ldr	r3, [pc, #392]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 800490c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004910:	4a60      	ldr	r2, [pc, #384]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd fe43 	bl	80025a4 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004922:	f7fd fe3f 	bl	80025a4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e0ff      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004934:	4b57      	ldr	r3, [pc, #348]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ef      	bne.n	8004922 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 80f3 	beq.w	8004b32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	2b02      	cmp	r3, #2
 8004952:	f040 80c9 	bne.w	8004ae8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004956:	4b4f      	ldr	r3, [pc, #316]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0203 	and.w	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	429a      	cmp	r2, r3
 8004968:	d12c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	3b01      	subs	r3, #1
 8004976:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d123      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d11b      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d113      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d109      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d06b      	beq.n	8004a9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d062      	beq.n	8004a90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049ca:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0ac      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2d      	ldr	r2, [pc, #180]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 80049e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049e6:	f7fd fddd 	bl	80025a4 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ee:	f7fd fdd9 	bl	80025a4 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e099      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <HAL_RCC_OscConfig+0x77c>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0112      	lsls	r2, r2, #4
 8004a20:	4311      	orrs	r1, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a26:	0212      	lsls	r2, r2, #8
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0552      	lsls	r2, r2, #21
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a3a:	0852      	lsrs	r2, r2, #1
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	0652      	lsls	r2, r2, #25
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a46:	06d2      	lsls	r2, r2, #27
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	4912      	ldr	r1, [pc, #72]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a0f      	ldr	r2, [pc, #60]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a68:	f7fd fd9c 	bl	80025a4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd fd98 	bl	80025a4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e058      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a82:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <HAL_RCC_OscConfig+0x778>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8e:	e050      	b.n	8004b32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e04f      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
 8004a94:	40021000 	.word	0x40021000
 8004a98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9c:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d144      	bne.n	8004b32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab4:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac0:	f7fd fd70 	bl	80025a4 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd fd6c 	bl	80025a4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e02c      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x7ac>
 8004ae6:	e024      	b.n	8004b32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d01f      	beq.n	8004b2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd fd53 	bl	80025a4 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b02:	f7fd fd4f 	bl	80025a4 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e00f      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f0      	bne.n	8004b02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	4905      	ldr	r1, [pc, #20]	; (8004b3c <HAL_RCC_OscConfig+0x820>)
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_OscConfig+0x824>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60cb      	str	r3, [r1, #12]
 8004b2c:	e001      	b.n	8004b32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	feeefffc 	.word	0xfeeefffc

08004b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0e7      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b75      	ldr	r3, [pc, #468]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d910      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b72      	ldr	r3, [pc, #456]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	4970      	ldr	r1, [pc, #448]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b6e      	ldr	r3, [pc, #440]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0cf      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d010      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d908      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba4:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4960      	ldr	r1, [pc, #384]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04c      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d121      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0a6      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be2:	4b54      	ldr	r3, [pc, #336]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d115      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e09a      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bfa:	4b4e      	ldr	r3, [pc, #312]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e08e      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e086      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4943      	ldr	r1, [pc, #268]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2c:	f7fd fcba 	bl	80025a4 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fd fcb6 	bl	80025a4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e06e      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b3a      	ldr	r3, [pc, #232]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d208      	bcs.n	8004c8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c78:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	492b      	ldr	r1, [pc, #172]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c8a:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d210      	bcs.n	8004cba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f023 0207 	bic.w	r2, r3, #7
 8004ca0:	4923      	ldr	r1, [pc, #140]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCC_ClockConfig+0x1ec>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e036      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	4918      	ldr	r1, [pc, #96]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4910      	ldr	r1, [pc, #64]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cf8:	f000 f824 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	490b      	ldr	r1, [pc, #44]	; (8004d38 <HAL_RCC_ClockConfig+0x1f4>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <HAL_RCC_ClockConfig+0x1f8>)
 8004d16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1fc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd fbf1 	bl	8002504 <HAL_InitTick>
 8004d22:	4603      	mov	r3, r0
 8004d24:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d26:	7afb      	ldrb	r3, [r7, #11]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08008bd0 	.word	0x08008bd0
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	20000008 	.word	0x20000008

08004d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5c:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x34>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d121      	bne.n	8004db6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d11e      	bne.n	8004db6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d107      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d84:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	e005      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d94:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004da0:	4a2b      	ldr	r2, [pc, #172]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d102      	bne.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e004      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc8:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d134      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0xa6>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d003      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0xac>
 8004de8:	e005      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dec:	617b      	str	r3, [r7, #20]
      break;
 8004dee:	e005      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004df0:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8004df2:	617b      	str	r3, [r7, #20]
      break;
 8004df4:	e002      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	617b      	str	r3, [r7, #20]
      break;
 8004dfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dfc:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	3301      	adds	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e0a:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	fb03 f202 	mul.w	r2, r3, r2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	0e5b      	lsrs	r3, r3, #25
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3724      	adds	r7, #36	; 0x24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	08008be8 	.word	0x08008be8
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	007a1200 	.word	0x007a1200

08004e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000004 	.word	0x20000004

08004e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e78:	f7ff fff0 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4904      	ldr	r1, [pc, #16]	; (8004e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	08008be0 	.word	0x08008be0

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea4:	f7ff ffda 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0adb      	lsrs	r3, r3, #11
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4904      	ldr	r1, [pc, #16]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	08008be0 	.word	0x08008be0

08004ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ee4:	f7ff f9b6 	bl	8004254 <HAL_PWREx_GetVoltageRange>
 8004ee8:	6178      	str	r0, [r7, #20]
 8004eea:	e014      	b.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f04:	f7ff f9a6 	bl	8004254 <HAL_PWREx_GetVoltageRange>
 8004f08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1c:	d10b      	bne.n	8004f36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d919      	bls.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2ba0      	cmp	r3, #160	; 0xa0
 8004f28:	d902      	bls.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	e013      	b.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f30:	2301      	movs	r3, #1
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e010      	b.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d902      	bls.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	e00a      	b.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d102      	bne.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f48:	2302      	movs	r3, #2
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e004      	b.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b70      	cmp	r3, #112	; 0x70
 8004f52:	d101      	bne.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f54:	2301      	movs	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 0207 	bic.w	r2, r3, #7
 8004f60:	4909      	ldr	r1, [pc, #36]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d001      	beq.n	8004f7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40022000 	.word	0x40022000

08004f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f94:	2300      	movs	r3, #0
 8004f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d031      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fb0:	d01a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fb6:	d814      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fc2:	4b5d      	ldr	r3, [pc, #372]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4a5c      	ldr	r2, [pc, #368]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fcc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f9de 	bl	8005398 <RCCEx_PLLSAI1_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff0:	4b51      	ldr	r3, [pc, #324]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	494e      	ldr	r1, [pc, #312]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 809e 	beq.w	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800501e:	4b46      	ldr	r3, [pc, #280]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005034:	4b40      	ldr	r3, [pc, #256]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005038:	4a3f      	ldr	r2, [pc, #252]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503e:	6593      	str	r3, [r2, #88]	; 0x58
 8005040:	4b3d      	ldr	r3, [pc, #244]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504c:	2301      	movs	r3, #1
 800504e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005050:	4b3a      	ldr	r3, [pc, #232]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a39      	ldr	r2, [pc, #228]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800505c:	f7fd faa2 	bl	80025a4 <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005062:	e009      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005064:	f7fd fa9e 	bl	80025a4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d902      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	74fb      	strb	r3, [r7, #19]
        break;
 8005076:	e005      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005078:	4b30      	ldr	r3, [pc, #192]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d15a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800508a:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01e      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d019      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050c2:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050d2:	4a19      	ldr	r2, [pc, #100]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d016      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fd fa5e 	bl	80025a4 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ea:	e00b      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ec:	f7fd fa5a 	bl	80025a4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d902      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	74fb      	strb	r3, [r7, #19]
            break;
 8005102:	e006      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ec      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005118:	4b07      	ldr	r3, [pc, #28]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005126:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005130:	7cfb      	ldrb	r3, [r7, #19]
 8005132:	74bb      	strb	r3, [r7, #18]
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005136:	bf00      	nop
 8005138:	40021000 	.word	0x40021000
 800513c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005144:	7c7b      	ldrb	r3, [r7, #17]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d105      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514a:	4b8a      	ldr	r3, [pc, #552]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	4a89      	ldr	r2, [pc, #548]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005162:	4b84      	ldr	r3, [pc, #528]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f023 0203 	bic.w	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	4980      	ldr	r1, [pc, #512]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005184:	4b7b      	ldr	r3, [pc, #492]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 020c 	bic.w	r2, r3, #12
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	4978      	ldr	r1, [pc, #480]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051a6:	4b73      	ldr	r3, [pc, #460]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	496f      	ldr	r1, [pc, #444]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051c8:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	4967      	ldr	r1, [pc, #412]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ea:	4b62      	ldr	r3, [pc, #392]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	495e      	ldr	r1, [pc, #376]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800520c:	4b59      	ldr	r3, [pc, #356]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	4956      	ldr	r1, [pc, #344]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800522e:	4b51      	ldr	r3, [pc, #324]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	494d      	ldr	r1, [pc, #308]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d028      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005250:	4b48      	ldr	r3, [pc, #288]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	4945      	ldr	r1, [pc, #276]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800526e:	d106      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b40      	ldr	r3, [pc, #256]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a3f      	ldr	r2, [pc, #252]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
 800527c:	e011      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005286:	d10c      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f882 	bl	8005398 <RCCEx_PLLSAI1_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d028      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	492d      	ldr	r1, [pc, #180]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d106      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ce:	4b29      	ldr	r3, [pc, #164]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4a28      	ldr	r2, [pc, #160]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d8:	60d3      	str	r3, [r2, #12]
 80052da:	e011      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f853 	bl	8005398 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01c      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	4916      	ldr	r1, [pc, #88]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532a:	d10c      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f830 	bl	8005398 <RCCEx_PLLSAI1_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800533c:	7cfb      	ldrb	r3, [r7, #19]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005360:	4904      	ldr	r1, [pc, #16]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005368:	7cbb      	ldrb	r3, [r7, #18]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000

08005378 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a04      	ldr	r2, [pc, #16]	; (8005394 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005382:	f043 0304 	orr.w	r3, r3, #4
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000

08005398 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053a6:	4b74      	ldr	r3, [pc, #464]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d018      	beq.n	80053e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053b2:	4b71      	ldr	r3, [pc, #452]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0203 	and.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d10d      	bne.n	80053de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
       ||
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053ca:	4b6b      	ldr	r3, [pc, #428]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	091b      	lsrs	r3, r3, #4
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
       ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d047      	beq.n	800546e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	e044      	b.n	800546e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d018      	beq.n	800541e <RCCEx_PLLSAI1_Config+0x86>
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d825      	bhi.n	800543c <RCCEx_PLLSAI1_Config+0xa4>
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d002      	beq.n	80053fa <RCCEx_PLLSAI1_Config+0x62>
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d009      	beq.n	800540c <RCCEx_PLLSAI1_Config+0x74>
 80053f8:	e020      	b.n	800543c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053fa:	4b5f      	ldr	r3, [pc, #380]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d11d      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800540a:	e01a      	b.n	8005442 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800540c:	4b5a      	ldr	r3, [pc, #360]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541c:	e013      	b.n	8005446 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800541e:	4b56      	ldr	r3, [pc, #344]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800542a:	4b53      	ldr	r3, [pc, #332]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800543a:	e006      	b.n	800544a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	e004      	b.n	800544c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005442:	bf00      	nop
 8005444:	e002      	b.n	800544c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800544a:	bf00      	nop
    }

    if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005452:	4b49      	ldr	r3, [pc, #292]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	430b      	orrs	r3, r1
 8005468:	4943      	ldr	r1, [pc, #268]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800546a:	4313      	orrs	r3, r2
 800546c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d17c      	bne.n	800556e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005474:	4b40      	ldr	r3, [pc, #256]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800547e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005480:	f7fd f890 	bl	80025a4 <HAL_GetTick>
 8005484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005486:	e009      	b.n	800549c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005488:	f7fd f88c 	bl	80025a4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d902      	bls.n	800549c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	73fb      	strb	r3, [r7, #15]
        break;
 800549a:	e005      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ef      	bne.n	8005488 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d15f      	bne.n	800556e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d110      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6892      	ldr	r2, [r2, #8]
 80054c4:	0211      	lsls	r1, r2, #8
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68d2      	ldr	r2, [r2, #12]
 80054ca:	06d2      	lsls	r2, r2, #27
 80054cc:	430a      	orrs	r2, r1
 80054ce:	492a      	ldr	r1, [pc, #168]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]
 80054d4:	e027      	b.n	8005526 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d112      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054dc:	4b26      	ldr	r3, [pc, #152]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6892      	ldr	r2, [r2, #8]
 80054ec:	0211      	lsls	r1, r2, #8
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6912      	ldr	r2, [r2, #16]
 80054f2:	0852      	lsrs	r2, r2, #1
 80054f4:	3a01      	subs	r2, #1
 80054f6:	0552      	lsls	r2, r2, #21
 80054f8:	430a      	orrs	r2, r1
 80054fa:	491f      	ldr	r1, [pc, #124]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]
 8005500:	e011      	b.n	8005526 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800550a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6892      	ldr	r2, [r2, #8]
 8005512:	0211      	lsls	r1, r2, #8
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6952      	ldr	r2, [r2, #20]
 8005518:	0852      	lsrs	r2, r2, #1
 800551a:	3a01      	subs	r2, #1
 800551c:	0652      	lsls	r2, r2, #25
 800551e:	430a      	orrs	r2, r1
 8005520:	4915      	ldr	r1, [pc, #84]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005522:	4313      	orrs	r3, r2
 8005524:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a13      	ldr	r2, [pc, #76]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005530:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005532:	f7fd f837 	bl	80025a4 <HAL_GetTick>
 8005536:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005538:	e009      	b.n	800554e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800553a:	f7fd f833 	bl	80025a4 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d902      	bls.n	800554e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	73fb      	strb	r3, [r7, #15]
          break;
 800554c:	e005      	b.n	800555a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ef      	beq.n	800553a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	4903      	ldr	r1, [pc, #12]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556a:	4313      	orrs	r3, r2
 800556c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e095      	b.n	80056ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559e:	d009      	beq.n	80055b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	61da      	str	r2, [r3, #28]
 80055a6:	e005      	b.n	80055b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fd5a 	bl	8002088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f4:	d902      	bls.n	80055fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e002      	b.n	8005602 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005600:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800560a:	d007      	beq.n	800561c <HAL_SPI_Init+0xa0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005614:	d002      	beq.n	800561c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	ea42 0103 	orr.w	r1, r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f003 0204 	and.w	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005698:	ea42 0103 	orr.w	r1, r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b088      	sub	sp, #32
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	4613      	mov	r3, r2
 80056d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_SPI_Transmit+0x22>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e15f      	b.n	80059a4 <HAL_SPI_Transmit+0x2e2>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ec:	f7fc ff5a 	bl	80025a4 <HAL_GetTick>
 80056f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005706:	e148      	b.n	800599a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Transmit+0x52>
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005718:	e13f      	b.n	800599a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2203      	movs	r2, #3
 800571e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005764:	d10f      	bne.n	8005786 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005774:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005784:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d007      	beq.n	80057a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ac:	d94f      	bls.n	800584e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Transmit+0xfa>
 80057b6:	8afb      	ldrh	r3, [r7, #22]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d142      	bne.n	8005842 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057e0:	e02f      	b.n	8005842 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d112      	bne.n	8005816 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	1c9a      	adds	r2, r3, #2
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005814:	e015      	b.n	8005842 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005816:	f7fc fec5 	bl	80025a4 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d803      	bhi.n	800582e <HAL_SPI_Transmit+0x16c>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d102      	bne.n	8005834 <HAL_SPI_Transmit+0x172>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005840:	e0ab      	b.n	800599a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ca      	bne.n	80057e2 <HAL_SPI_Transmit+0x120>
 800584c:	e080      	b.n	8005950 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0x19a>
 8005856:	8afb      	ldrh	r3, [r7, #22]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d174      	bne.n	8005946 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b01      	cmp	r3, #1
 8005864:	d912      	bls.n	800588c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	1c9a      	adds	r2, r3, #2
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b02      	subs	r3, #2
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800588a:	e05c      	b.n	8005946 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058b2:	e048      	b.n	8005946 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d12b      	bne.n	800591a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d912      	bls.n	80058f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b02      	subs	r3, #2
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f0:	e029      	b.n	8005946 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005918:	e015      	b.n	8005946 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591a:	f7fc fe43 	bl	80025a4 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d803      	bhi.n	8005932 <HAL_SPI_Transmit+0x270>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d102      	bne.n	8005938 <HAL_SPI_Transmit+0x276>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005944:	e029      	b.n	800599a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1b1      	bne.n	80058b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fad7 	bl	8005f08 <SPI_EndRxTxTransaction>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e003      	b.n	800599a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3720      	adds	r7, #32
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_SPI_Transmit_DMA+0x20>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0d4      	b.n	8005b76 <HAL_SPI_Transmit_DMA+0x1ca>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
 80059e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059e4:	e0c2      	b.n	8005b6c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_Transmit_DMA+0x46>
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059f6:	e0b9      	b.n	8005b6c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2203      	movs	r2, #3
 80059fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a42:	d10f      	bne.n	8005a64 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a68:	4a45      	ldr	r2, [pc, #276]	; (8005b80 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	4a44      	ldr	r2, [pc, #272]	; (8005b84 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	4a43      	ldr	r2, [pc, #268]	; (8005b88 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005a7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	2200      	movs	r2, #0
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a92:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a9c:	d82d      	bhi.n	8005afa <HAL_SPI_Transmit_DMA+0x14e>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa8:	d127      	bne.n	8005afa <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ac6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad6:	e010      	b.n	8005afa <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	4619      	mov	r1, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b12:	f7fd ffe9 	bl	8003ae8 <HAL_DMA_Start_IT>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d008      	beq.n	8005b2e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b20:	f043 0210 	orr.w	r2, r3, #16
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005b2c:	e01e      	b.n	8005b6c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d007      	beq.n	8005b4c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b4a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0220 	orr.w	r2, r2, #32
 8005b5a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0202 	orr.w	r2, r2, #2
 8005b6a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005c6f 	.word	0x08005c6f
 8005b84:	08005bc9 	.word	0x08005bc9
 8005b88:	08005c8b 	.word	0x08005c8b

08005b8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd6:	f7fc fce5 	bl	80025a4 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d03b      	beq.n	8005c62 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0220 	bic.w	r2, r2, #32
 8005bf8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0202 	bic.w	r2, r2, #2
 8005c08:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	2164      	movs	r1, #100	; 0x64
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f000 f97a 	bl	8005f08 <SPI_EndRxTxTransaction>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c5a:	6978      	ldr	r0, [r7, #20]
 8005c5c:	f7ff ffaa 	bl	8005bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c60:	e002      	b.n	8005c68 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7ff ff92 	bl	8005b8c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff8f 	bl	8005ba0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0203 	bic.w	r2, r2, #3
 8005ca6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cac:	f043 0210 	orr.w	r2, r3, #16
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff ff79 	bl	8005bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cdc:	f7fc fc62 	bl	80025a4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cec:	f7fc fc5a 	bl	80025a4 <HAL_GetTick>
 8005cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cf2:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	015b      	lsls	r3, r3, #5
 8005cf8:	0d1b      	lsrs	r3, r3, #20
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d02:	e054      	b.n	8005dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d050      	beq.n	8005dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d0c:	f7fc fc4a 	bl	80025a4 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d902      	bls.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d13d      	bne.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d3a:	d111      	bne.n	8005d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d44:	d004      	beq.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d107      	bne.n	8005d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d68:	d10f      	bne.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e017      	b.n	8005dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d19b      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000004 	.word	0x20000004

08005ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dee:	f7fc fbd9 	bl	80025a4 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dfe:	f7fc fbd1 	bl	80025a4 <HAL_GetTick>
 8005e02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e0c:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	00da      	lsls	r2, r3, #3
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	0d1b      	lsrs	r3, r3, #20
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e24:	e060      	b.n	8005ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e2c:	d107      	bne.n	8005e3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d050      	beq.n	8005ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e46:	f7fc fbad 	bl	80025a4 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d902      	bls.n	8005e5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d13d      	bne.n	8005ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e74:	d111      	bne.n	8005e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7e:	d004      	beq.n	8005e8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d107      	bne.n	8005e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea2:	d10f      	bne.n	8005ec4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e010      	b.n	8005efa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d196      	bne.n	8005e26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3728      	adds	r7, #40	; 0x28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000004 	.word	0x20000004

08005f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff ff5b 	bl	8005ddc <SPI_WaitFifoStateUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f30:	f043 0220 	orr.w	r2, r3, #32
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e027      	b.n	8005f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff fec0 	bl	8005ccc <SPI_WaitFlagStateUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e014      	b.n	8005f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff34 	bl	8005ddc <SPI_WaitFifoStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e000      	b.n	8005f8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e049      	b.n	800603a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc f8e4 	bl	8002188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 f9b4 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e03b      	b.n	80060d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIM_Base_Start_IT+0x4e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d004      	beq.n	8006092 <HAL_TIM_Base_Start_IT+0x4e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d115      	bne.n	80060be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800609a:	4013      	ands	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d015      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x8c>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d011      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060bc:	e008      	b.n	80060d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0201 	orr.w	r2, r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e000      	b.n	80060d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40014000 	.word	0x40014000
 80060e8:	00010007 	.word	0x00010007

080060ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d020      	beq.n	8006150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01b      	beq.n	8006150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0202 	mvn.w	r2, #2
 8006120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8e4 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 800613c:	e005      	b.n	800614a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8d6 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8e7 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d020      	beq.n	800619c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0204 	mvn.w	r2, #4
 800616c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8be 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8006188:	e005      	b.n	8006196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f8b0 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f8c1 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d020      	beq.n	80061e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0208 	mvn.w	r2, #8
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f898 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f88a 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f89b 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d020      	beq.n	8006234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0210 	mvn.w	r2, #16
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2208      	movs	r2, #8
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f872 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f864 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f875 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0201 	mvn.w	r2, #1
 8006250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fa fb2c 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8d0 	bl	800641c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8c8 	bl	8006430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f834 	bl	800632c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0220 	mvn.w	r2, #32
 80062e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f890 	bl	8006408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <TIM_Base_SetConfig+0xbc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x20>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a21      	ldr	r2, [pc, #132]	; (80063fc <TIM_Base_SetConfig+0xbc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_Base_SetConfig+0x52>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0x52>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <TIM_Base_SetConfig+0xc0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0x52>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <TIM_Base_SetConfig+0xc4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <TIM_Base_SetConfig+0xbc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d007      	beq.n	80063e0 <TIM_Base_SetConfig+0xa0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <TIM_Base_SetConfig+0xc0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0xa0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <TIM_Base_SetConfig+0xc4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d103      	bne.n	80063e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	615a      	str	r2, [r3, #20]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400

08006408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e040      	b.n	80064d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fb feb4 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	; 0x24
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fade 	bl	8006a4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8af 	bl	80065f4 <UART_SetConfig>
 8006496:	4603      	mov	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e01b      	b.n	80064d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fb5d 	bl	8006b90 <UART_CheckIdleState>
 80064d6:	4603      	mov	r3, r0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d178      	bne.n	80065ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_UART_Transmit+0x24>
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e071      	b.n	80065ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2221      	movs	r2, #33	; 0x21
 8006514:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006516:	f7fc f845 	bl	80025a4 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d108      	bne.n	8006548 <HAL_UART_Transmit+0x68>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e003      	b.n	8006550 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006550:	e030      	b.n	80065b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fbbf 	bl	8006ce0 <UART_WaitOnFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e03c      	b.n	80065ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006584:	b292      	uxth	r2, r2
 8006586:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	3302      	adds	r3, #2
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e008      	b.n	80065a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	781a      	ldrb	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	b292      	uxth	r2, r2
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	3301      	adds	r3, #1
 80065a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1c8      	bne.n	8006552 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2140      	movs	r1, #64	; 0x40
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fb88 	bl	8006ce0 <UART_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e005      	b.n	80065ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
  }
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3720      	adds	r7, #32
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f8:	b08a      	sub	sp, #40	; 0x28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4313      	orrs	r3, r2
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4bb4      	ldr	r3, [pc, #720]	; (80068f4 <UART_SetConfig+0x300>)
 8006624:	4013      	ands	r3, r2
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800662c:	430b      	orrs	r3, r1
 800662e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4aa9      	ldr	r2, [pc, #676]	; (80068f8 <UART_SetConfig+0x304>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	4313      	orrs	r3, r2
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4aa0      	ldr	r2, [pc, #640]	; (80068fc <UART_SetConfig+0x308>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d126      	bne.n	80066cc <UART_SetConfig+0xd8>
 800667e:	4ba0      	ldr	r3, [pc, #640]	; (8006900 <UART_SetConfig+0x30c>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b03      	cmp	r3, #3
 800668a:	d81b      	bhi.n	80066c4 <UART_SetConfig+0xd0>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0xa0>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066aa:	e080      	b.n	80067ae <UART_SetConfig+0x1ba>
 80066ac:	2302      	movs	r3, #2
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e07c      	b.n	80067ae <UART_SetConfig+0x1ba>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e078      	b.n	80067ae <UART_SetConfig+0x1ba>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e074      	b.n	80067ae <UART_SetConfig+0x1ba>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ca:	e070      	b.n	80067ae <UART_SetConfig+0x1ba>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a8c      	ldr	r2, [pc, #560]	; (8006904 <UART_SetConfig+0x310>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d138      	bne.n	8006748 <UART_SetConfig+0x154>
 80066d6:	4b8a      	ldr	r3, [pc, #552]	; (8006900 <UART_SetConfig+0x30c>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f003 030c 	and.w	r3, r3, #12
 80066e0:	2b0c      	cmp	r3, #12
 80066e2:	d82d      	bhi.n	8006740 <UART_SetConfig+0x14c>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0xf8>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006741 	.word	0x08006741
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006731 	.word	0x08006731
 8006700:	08006741 	.word	0x08006741
 8006704:	08006741 	.word	0x08006741
 8006708:	08006741 	.word	0x08006741
 800670c:	08006729 	.word	0x08006729
 8006710:	08006741 	.word	0x08006741
 8006714:	08006741 	.word	0x08006741
 8006718:	08006741 	.word	0x08006741
 800671c:	08006739 	.word	0x08006739
 8006720:	2300      	movs	r3, #0
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	e042      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006728:	2302      	movs	r3, #2
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e03e      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006730:	2304      	movs	r3, #4
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e03a      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006738:	2308      	movs	r3, #8
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e036      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e032      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a6a      	ldr	r2, [pc, #424]	; (80068f8 <UART_SetConfig+0x304>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d12a      	bne.n	80067a8 <UART_SetConfig+0x1b4>
 8006752:	4b6b      	ldr	r3, [pc, #428]	; (8006900 <UART_SetConfig+0x30c>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800675c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006760:	d01a      	beq.n	8006798 <UART_SetConfig+0x1a4>
 8006762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006766:	d81b      	bhi.n	80067a0 <UART_SetConfig+0x1ac>
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d00c      	beq.n	8006788 <UART_SetConfig+0x194>
 800676e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006772:	d815      	bhi.n	80067a0 <UART_SetConfig+0x1ac>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <UART_SetConfig+0x18c>
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677c:	d008      	beq.n	8006790 <UART_SetConfig+0x19c>
 800677e:	e00f      	b.n	80067a0 <UART_SetConfig+0x1ac>
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e012      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006788:	2302      	movs	r3, #2
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e00e      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006790:	2304      	movs	r3, #4
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e00a      	b.n	80067ae <UART_SetConfig+0x1ba>
 8006798:	2308      	movs	r3, #8
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e006      	b.n	80067ae <UART_SetConfig+0x1ba>
 80067a0:	2310      	movs	r3, #16
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e002      	b.n	80067ae <UART_SetConfig+0x1ba>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a51      	ldr	r2, [pc, #324]	; (80068f8 <UART_SetConfig+0x304>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d17a      	bne.n	80068ae <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d824      	bhi.n	800680a <UART_SetConfig+0x216>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x1d4>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	0800680b 	.word	0x0800680b
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	0800680b 	.word	0x0800680b
 80067d8:	080067fb 	.word	0x080067fb
 80067dc:	0800680b 	.word	0x0800680b
 80067e0:	0800680b 	.word	0x0800680b
 80067e4:	0800680b 	.word	0x0800680b
 80067e8:	08006803 	.word	0x08006803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fe fb42 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 80067f0:	61f8      	str	r0, [r7, #28]
        break;
 80067f2:	e010      	b.n	8006816 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f4:	4b44      	ldr	r3, [pc, #272]	; (8006908 <UART_SetConfig+0x314>)
 80067f6:	61fb      	str	r3, [r7, #28]
        break;
 80067f8:	e00d      	b.n	8006816 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067fa:	f7fe faa3 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 80067fe:	61f8      	str	r0, [r7, #28]
        break;
 8006800:	e009      	b.n	8006816 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006806:	61fb      	str	r3, [r7, #28]
        break;
 8006808:	e005      	b.n	8006816 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8107 	beq.w	8006a2c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	4413      	add	r3, r2
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	429a      	cmp	r2, r3
 800682c:	d305      	bcc.n	800683a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	429a      	cmp	r2, r3
 8006838:	d903      	bls.n	8006842 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006840:	e0f4      	b.n	8006a2c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2200      	movs	r2, #0
 8006846:	461c      	mov	r4, r3
 8006848:	4615      	mov	r5, r2
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	022b      	lsls	r3, r5, #8
 8006854:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006858:	0222      	lsls	r2, r4, #8
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	6849      	ldr	r1, [r1, #4]
 800685e:	0849      	lsrs	r1, r1, #1
 8006860:	2000      	movs	r0, #0
 8006862:	4688      	mov	r8, r1
 8006864:	4681      	mov	r9, r0
 8006866:	eb12 0a08 	adds.w	sl, r2, r8
 800686a:	eb43 0b09 	adc.w	fp, r3, r9
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687c:	4650      	mov	r0, sl
 800687e:	4659      	mov	r1, fp
 8006880:	f7f9 fcfe 	bl	8000280 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4613      	mov	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006892:	d308      	bcc.n	80068a6 <UART_SetConfig+0x2b2>
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d204      	bcs.n	80068a6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	60da      	str	r2, [r3, #12]
 80068a4:	e0c2      	b.n	8006a2c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068ac:	e0be      	b.n	8006a2c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b6:	d16a      	bne.n	800698e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80068b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d834      	bhi.n	800692a <UART_SetConfig+0x336>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x2d4>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	08006915 	.word	0x08006915
 80068d4:	0800692b 	.word	0x0800692b
 80068d8:	0800691b 	.word	0x0800691b
 80068dc:	0800692b 	.word	0x0800692b
 80068e0:	0800692b 	.word	0x0800692b
 80068e4:	0800692b 	.word	0x0800692b
 80068e8:	08006923 	.word	0x08006923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ec:	f7fe fac2 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 80068f0:	61f8      	str	r0, [r7, #28]
        break;
 80068f2:	e020      	b.n	8006936 <UART_SetConfig+0x342>
 80068f4:	efff69f3 	.word	0xefff69f3
 80068f8:	40008000 	.word	0x40008000
 80068fc:	40013800 	.word	0x40013800
 8006900:	40021000 	.word	0x40021000
 8006904:	40004400 	.word	0x40004400
 8006908:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800690c:	f7fe fac8 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 8006910:	61f8      	str	r0, [r7, #28]
        break;
 8006912:	e010      	b.n	8006936 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006914:	4b4c      	ldr	r3, [pc, #304]	; (8006a48 <UART_SetConfig+0x454>)
 8006916:	61fb      	str	r3, [r7, #28]
        break;
 8006918:	e00d      	b.n	8006936 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691a:	f7fe fa13 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 800691e:	61f8      	str	r0, [r7, #28]
        break;
 8006920:	e009      	b.n	8006936 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006926:	61fb      	str	r3, [r7, #28]
        break;
 8006928:	e005      	b.n	8006936 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d077      	beq.n	8006a2c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	005a      	lsls	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	441a      	add	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006950:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b0f      	cmp	r3, #15
 8006956:	d916      	bls.n	8006986 <UART_SetConfig+0x392>
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d212      	bcs.n	8006986 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f023 030f 	bic.w	r3, r3, #15
 8006968:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	b29b      	uxth	r3, r3
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	b29a      	uxth	r2, r3
 8006976:	8afb      	ldrh	r3, [r7, #22]
 8006978:	4313      	orrs	r3, r2
 800697a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	8afa      	ldrh	r2, [r7, #22]
 8006982:	60da      	str	r2, [r3, #12]
 8006984:	e052      	b.n	8006a2c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800698c:	e04e      	b.n	8006a2c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800698e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006992:	2b08      	cmp	r3, #8
 8006994:	d827      	bhi.n	80069e6 <UART_SetConfig+0x3f2>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0x3a8>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069c9 	.word	0x080069c9
 80069a4:	080069d1 	.word	0x080069d1
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	080069d7 	.word	0x080069d7
 80069b0:	080069e7 	.word	0x080069e7
 80069b4:	080069e7 	.word	0x080069e7
 80069b8:	080069e7 	.word	0x080069e7
 80069bc:	080069df 	.word	0x080069df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c0:	f7fe fa58 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 80069c4:	61f8      	str	r0, [r7, #28]
        break;
 80069c6:	e014      	b.n	80069f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c8:	f7fe fa6a 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 80069cc:	61f8      	str	r0, [r7, #28]
        break;
 80069ce:	e010      	b.n	80069f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <UART_SetConfig+0x454>)
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e00d      	b.n	80069f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069d6:	f7fe f9b5 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 80069da:	61f8      	str	r0, [r7, #28]
        break;
 80069dc:	e009      	b.n	80069f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e2:	61fb      	str	r3, [r7, #28]
        break;
 80069e4:	e005      	b.n	80069f2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069f0:	bf00      	nop
    }

    if (pclk != 0U)
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d019      	beq.n	8006a2c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	085a      	lsrs	r2, r3, #1
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	d909      	bls.n	8006a26 <UART_SetConfig+0x432>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d205      	bcs.n	8006a26 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60da      	str	r2, [r3, #12]
 8006a24:	e002      	b.n	8006a2c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3728      	adds	r7, #40	; 0x28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a46:	bf00      	nop
 8006a48:	00f42400 	.word	0x00f42400

08006a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01a      	beq.n	8006b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b4a:	d10a      	bne.n	8006b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	605a      	str	r2, [r3, #4]
  }
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b098      	sub	sp, #96	; 0x60
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ba0:	f7fb fd00 	bl	80025a4 <HAL_GetTick>
 8006ba4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d12e      	bne.n	8006c12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f88c 	bl	8006ce0 <UART_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d021      	beq.n	8006c12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be2:	653b      	str	r3, [r7, #80]	; 0x50
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bec:	647b      	str	r3, [r7, #68]	; 0x44
 8006bee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e6      	bne.n	8006bce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e062      	b.n	8006cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d149      	bne.n	8006cb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f856 	bl	8006ce0 <UART_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d03c      	beq.n	8006cb4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	623b      	str	r3, [r7, #32]
   return(result);
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	633b      	str	r3, [r7, #48]	; 0x30
 8006c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3308      	adds	r3, #8
 8006c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c8c:	61fa      	str	r2, [r7, #28]
 8006c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	69b9      	ldr	r1, [r7, #24]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	617b      	str	r3, [r7, #20]
   return(result);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e5      	bne.n	8006c6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e011      	b.n	8006cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3758      	adds	r7, #88	; 0x58
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	4613      	mov	r3, r2
 8006cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf0:	e049      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d045      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfa:	f7fb fc53 	bl	80025a4 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d302      	bcc.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e048      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d031      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d110      	bne.n	8006d52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2208      	movs	r2, #8
 8006d36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f838 	bl	8006dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2208      	movs	r2, #8
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e029      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d60:	d111      	bne.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f81e 	bl	8006dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e00f      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	bf0c      	ite	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	2300      	movne	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d0a6      	beq.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b095      	sub	sp, #84	; 0x54
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e6      	bne.n	8006db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e5      	bne.n	8006de8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d118      	bne.n	8006e56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f023 0310 	bic.w	r3, r3, #16
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6979      	ldr	r1, [r7, #20]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e6      	bne.n	8006e24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e6a:	bf00      	nop
 8006e6c:	3754      	adds	r7, #84	; 0x54
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <malloc>:
 8006e78:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <malloc+0xc>)
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	f000 b823 	b.w	8006ec8 <_malloc_r>
 8006e82:	bf00      	nop
 8006e84:	2000005c 	.word	0x2000005c

08006e88 <sbrk_aligned>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	4e0e      	ldr	r6, [pc, #56]	; (8006ec4 <sbrk_aligned+0x3c>)
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	6831      	ldr	r1, [r6, #0]
 8006e90:	4605      	mov	r5, r0
 8006e92:	b911      	cbnz	r1, 8006e9a <sbrk_aligned+0x12>
 8006e94:	f000 f8cc 	bl	8007030 <_sbrk_r>
 8006e98:	6030      	str	r0, [r6, #0]
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f8c7 	bl	8007030 <_sbrk_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	d00a      	beq.n	8006ebc <sbrk_aligned+0x34>
 8006ea6:	1cc4      	adds	r4, r0, #3
 8006ea8:	f024 0403 	bic.w	r4, r4, #3
 8006eac:	42a0      	cmp	r0, r4
 8006eae:	d007      	beq.n	8006ec0 <sbrk_aligned+0x38>
 8006eb0:	1a21      	subs	r1, r4, r0
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f8bc 	bl	8007030 <_sbrk_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d101      	bne.n	8006ec0 <sbrk_aligned+0x38>
 8006ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	20004620 	.word	0x20004620

08006ec8 <_malloc_r>:
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	1ccd      	adds	r5, r1, #3
 8006ece:	f025 0503 	bic.w	r5, r5, #3
 8006ed2:	3508      	adds	r5, #8
 8006ed4:	2d0c      	cmp	r5, #12
 8006ed6:	bf38      	it	cc
 8006ed8:	250c      	movcc	r5, #12
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	4607      	mov	r7, r0
 8006ede:	db01      	blt.n	8006ee4 <_malloc_r+0x1c>
 8006ee0:	42a9      	cmp	r1, r5
 8006ee2:	d905      	bls.n	8006ef0 <_malloc_r+0x28>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	2600      	movs	r6, #0
 8006eea:	4630      	mov	r0, r6
 8006eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fc4 <_malloc_r+0xfc>
 8006ef4:	f000 f868 	bl	8006fc8 <__malloc_lock>
 8006ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8006efc:	461c      	mov	r4, r3
 8006efe:	bb5c      	cbnz	r4, 8006f58 <_malloc_r+0x90>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7ff ffc0 	bl	8006e88 <sbrk_aligned>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	d155      	bne.n	8006fba <_malloc_r+0xf2>
 8006f0e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f12:	4626      	mov	r6, r4
 8006f14:	2e00      	cmp	r6, #0
 8006f16:	d145      	bne.n	8006fa4 <_malloc_r+0xdc>
 8006f18:	2c00      	cmp	r4, #0
 8006f1a:	d048      	beq.n	8006fae <_malloc_r+0xe6>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4638      	mov	r0, r7
 8006f22:	eb04 0903 	add.w	r9, r4, r3
 8006f26:	f000 f883 	bl	8007030 <_sbrk_r>
 8006f2a:	4581      	cmp	r9, r0
 8006f2c:	d13f      	bne.n	8006fae <_malloc_r+0xe6>
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	1a6d      	subs	r5, r5, r1
 8006f32:	4629      	mov	r1, r5
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff ffa7 	bl	8006e88 <sbrk_aligned>
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d037      	beq.n	8006fae <_malloc_r+0xe6>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	442b      	add	r3, r5
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	f8d8 3000 	ldr.w	r3, [r8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d038      	beq.n	8006fbe <_malloc_r+0xf6>
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	42a2      	cmp	r2, r4
 8006f50:	d12b      	bne.n	8006faa <_malloc_r+0xe2>
 8006f52:	2200      	movs	r2, #0
 8006f54:	605a      	str	r2, [r3, #4]
 8006f56:	e00f      	b.n	8006f78 <_malloc_r+0xb0>
 8006f58:	6822      	ldr	r2, [r4, #0]
 8006f5a:	1b52      	subs	r2, r2, r5
 8006f5c:	d41f      	bmi.n	8006f9e <_malloc_r+0xd6>
 8006f5e:	2a0b      	cmp	r2, #11
 8006f60:	d917      	bls.n	8006f92 <_malloc_r+0xca>
 8006f62:	1961      	adds	r1, r4, r5
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	6025      	str	r5, [r4, #0]
 8006f68:	bf18      	it	ne
 8006f6a:	6059      	strne	r1, [r3, #4]
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	bf08      	it	eq
 8006f70:	f8c8 1000 	streq.w	r1, [r8]
 8006f74:	5162      	str	r2, [r4, r5]
 8006f76:	604b      	str	r3, [r1, #4]
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f104 060b 	add.w	r6, r4, #11
 8006f7e:	f000 f829 	bl	8006fd4 <__malloc_unlock>
 8006f82:	f026 0607 	bic.w	r6, r6, #7
 8006f86:	1d23      	adds	r3, r4, #4
 8006f88:	1af2      	subs	r2, r6, r3
 8006f8a:	d0ae      	beq.n	8006eea <_malloc_r+0x22>
 8006f8c:	1b9b      	subs	r3, r3, r6
 8006f8e:	50a3      	str	r3, [r4, r2]
 8006f90:	e7ab      	b.n	8006eea <_malloc_r+0x22>
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	6862      	ldr	r2, [r4, #4]
 8006f96:	d1dd      	bne.n	8006f54 <_malloc_r+0x8c>
 8006f98:	f8c8 2000 	str.w	r2, [r8]
 8006f9c:	e7ec      	b.n	8006f78 <_malloc_r+0xb0>
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	6864      	ldr	r4, [r4, #4]
 8006fa2:	e7ac      	b.n	8006efe <_malloc_r+0x36>
 8006fa4:	4634      	mov	r4, r6
 8006fa6:	6876      	ldr	r6, [r6, #4]
 8006fa8:	e7b4      	b.n	8006f14 <_malloc_r+0x4c>
 8006faa:	4613      	mov	r3, r2
 8006fac:	e7cc      	b.n	8006f48 <_malloc_r+0x80>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f000 f80e 	bl	8006fd4 <__malloc_unlock>
 8006fb8:	e797      	b.n	8006eea <_malloc_r+0x22>
 8006fba:	6025      	str	r5, [r4, #0]
 8006fbc:	e7dc      	b.n	8006f78 <_malloc_r+0xb0>
 8006fbe:	605b      	str	r3, [r3, #4]
 8006fc0:	deff      	udf	#255	; 0xff
 8006fc2:	bf00      	nop
 8006fc4:	2000461c 	.word	0x2000461c

08006fc8 <__malloc_lock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_lock+0x8>)
 8006fca:	f000 b86b 	b.w	80070a4 <__retarget_lock_acquire_recursive>
 8006fce:	bf00      	nop
 8006fd0:	20004760 	.word	0x20004760

08006fd4 <__malloc_unlock>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__malloc_unlock+0x8>)
 8006fd6:	f000 b866 	b.w	80070a6 <__retarget_lock_release_recursive>
 8006fda:	bf00      	nop
 8006fdc:	20004760 	.word	0x20004760

08006fe0 <siprintf>:
 8006fe0:	b40e      	push	{r1, r2, r3}
 8006fe2:	b500      	push	{lr}
 8006fe4:	b09c      	sub	sp, #112	; 0x70
 8006fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe8:	9002      	str	r0, [sp, #8]
 8006fea:	9006      	str	r0, [sp, #24]
 8006fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ff0:	4809      	ldr	r0, [pc, #36]	; (8007018 <siprintf+0x38>)
 8006ff2:	9107      	str	r1, [sp, #28]
 8006ff4:	9104      	str	r1, [sp, #16]
 8006ff6:	4909      	ldr	r1, [pc, #36]	; (800701c <siprintf+0x3c>)
 8006ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffc:	9105      	str	r1, [sp, #20]
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	a902      	add	r1, sp, #8
 8007004:	f000 f8f6 	bl	80071f4 <_svfiprintf_r>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	b01c      	add	sp, #112	; 0x70
 8007010:	f85d eb04 	ldr.w	lr, [sp], #4
 8007014:	b003      	add	sp, #12
 8007016:	4770      	bx	lr
 8007018:	2000005c 	.word	0x2000005c
 800701c:	ffff0208 	.word	0xffff0208

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <_sbrk_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	; (800704c <_sbrk_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fb f9bc 	bl	80023b8 <_sbrk>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_sbrk_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_sbrk_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	2000475c 	.word	0x2000475c

08007050 <__errno>:
 8007050:	4b01      	ldr	r3, [pc, #4]	; (8007058 <__errno+0x8>)
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	2000005c 	.word	0x2000005c

0800705c <__libc_init_array>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4d0d      	ldr	r5, [pc, #52]	; (8007094 <__libc_init_array+0x38>)
 8007060:	4c0d      	ldr	r4, [pc, #52]	; (8007098 <__libc_init_array+0x3c>)
 8007062:	1b64      	subs	r4, r4, r5
 8007064:	10a4      	asrs	r4, r4, #2
 8007066:	2600      	movs	r6, #0
 8007068:	42a6      	cmp	r6, r4
 800706a:	d109      	bne.n	8007080 <__libc_init_array+0x24>
 800706c:	4d0b      	ldr	r5, [pc, #44]	; (800709c <__libc_init_array+0x40>)
 800706e:	4c0c      	ldr	r4, [pc, #48]	; (80070a0 <__libc_init_array+0x44>)
 8007070:	f000 fbae 	bl	80077d0 <_init>
 8007074:	1b64      	subs	r4, r4, r5
 8007076:	10a4      	asrs	r4, r4, #2
 8007078:	2600      	movs	r6, #0
 800707a:	42a6      	cmp	r6, r4
 800707c:	d105      	bne.n	800708a <__libc_init_array+0x2e>
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	f855 3b04 	ldr.w	r3, [r5], #4
 8007084:	4798      	blx	r3
 8007086:	3601      	adds	r6, #1
 8007088:	e7ee      	b.n	8007068 <__libc_init_array+0xc>
 800708a:	f855 3b04 	ldr.w	r3, [r5], #4
 800708e:	4798      	blx	r3
 8007090:	3601      	adds	r6, #1
 8007092:	e7f2      	b.n	800707a <__libc_init_array+0x1e>
 8007094:	08008c54 	.word	0x08008c54
 8007098:	08008c54 	.word	0x08008c54
 800709c:	08008c54 	.word	0x08008c54
 80070a0:	08008c58 	.word	0x08008c58

080070a4 <__retarget_lock_acquire_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__retarget_lock_release_recursive>:
 80070a6:	4770      	bx	lr

080070a8 <_free_r>:
 80070a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d044      	beq.n	8007138 <_free_r+0x90>
 80070ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070b2:	9001      	str	r0, [sp, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f1a1 0404 	sub.w	r4, r1, #4
 80070ba:	bfb8      	it	lt
 80070bc:	18e4      	addlt	r4, r4, r3
 80070be:	f7ff ff83 	bl	8006fc8 <__malloc_lock>
 80070c2:	4a1e      	ldr	r2, [pc, #120]	; (800713c <_free_r+0x94>)
 80070c4:	9801      	ldr	r0, [sp, #4]
 80070c6:	6813      	ldr	r3, [r2, #0]
 80070c8:	b933      	cbnz	r3, 80070d8 <_free_r+0x30>
 80070ca:	6063      	str	r3, [r4, #4]
 80070cc:	6014      	str	r4, [r2, #0]
 80070ce:	b003      	add	sp, #12
 80070d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d4:	f7ff bf7e 	b.w	8006fd4 <__malloc_unlock>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d908      	bls.n	80070ee <_free_r+0x46>
 80070dc:	6825      	ldr	r5, [r4, #0]
 80070de:	1961      	adds	r1, r4, r5
 80070e0:	428b      	cmp	r3, r1
 80070e2:	bf01      	itttt	eq
 80070e4:	6819      	ldreq	r1, [r3, #0]
 80070e6:	685b      	ldreq	r3, [r3, #4]
 80070e8:	1949      	addeq	r1, r1, r5
 80070ea:	6021      	streq	r1, [r4, #0]
 80070ec:	e7ed      	b.n	80070ca <_free_r+0x22>
 80070ee:	461a      	mov	r2, r3
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	b10b      	cbz	r3, 80070f8 <_free_r+0x50>
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	d9fa      	bls.n	80070ee <_free_r+0x46>
 80070f8:	6811      	ldr	r1, [r2, #0]
 80070fa:	1855      	adds	r5, r2, r1
 80070fc:	42a5      	cmp	r5, r4
 80070fe:	d10b      	bne.n	8007118 <_free_r+0x70>
 8007100:	6824      	ldr	r4, [r4, #0]
 8007102:	4421      	add	r1, r4
 8007104:	1854      	adds	r4, r2, r1
 8007106:	42a3      	cmp	r3, r4
 8007108:	6011      	str	r1, [r2, #0]
 800710a:	d1e0      	bne.n	80070ce <_free_r+0x26>
 800710c:	681c      	ldr	r4, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	6053      	str	r3, [r2, #4]
 8007112:	440c      	add	r4, r1
 8007114:	6014      	str	r4, [r2, #0]
 8007116:	e7da      	b.n	80070ce <_free_r+0x26>
 8007118:	d902      	bls.n	8007120 <_free_r+0x78>
 800711a:	230c      	movs	r3, #12
 800711c:	6003      	str	r3, [r0, #0]
 800711e:	e7d6      	b.n	80070ce <_free_r+0x26>
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	1961      	adds	r1, r4, r5
 8007124:	428b      	cmp	r3, r1
 8007126:	bf04      	itt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	6063      	str	r3, [r4, #4]
 800712e:	bf04      	itt	eq
 8007130:	1949      	addeq	r1, r1, r5
 8007132:	6021      	streq	r1, [r4, #0]
 8007134:	6054      	str	r4, [r2, #4]
 8007136:	e7ca      	b.n	80070ce <_free_r+0x26>
 8007138:	b003      	add	sp, #12
 800713a:	bd30      	pop	{r4, r5, pc}
 800713c:	2000461c 	.word	0x2000461c

08007140 <__ssputs_r>:
 8007140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	688e      	ldr	r6, [r1, #8]
 8007146:	461f      	mov	r7, r3
 8007148:	42be      	cmp	r6, r7
 800714a:	680b      	ldr	r3, [r1, #0]
 800714c:	4682      	mov	sl, r0
 800714e:	460c      	mov	r4, r1
 8007150:	4690      	mov	r8, r2
 8007152:	d82c      	bhi.n	80071ae <__ssputs_r+0x6e>
 8007154:	898a      	ldrh	r2, [r1, #12]
 8007156:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800715a:	d026      	beq.n	80071aa <__ssputs_r+0x6a>
 800715c:	6965      	ldr	r5, [r4, #20]
 800715e:	6909      	ldr	r1, [r1, #16]
 8007160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007164:	eba3 0901 	sub.w	r9, r3, r1
 8007168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800716c:	1c7b      	adds	r3, r7, #1
 800716e:	444b      	add	r3, r9
 8007170:	106d      	asrs	r5, r5, #1
 8007172:	429d      	cmp	r5, r3
 8007174:	bf38      	it	cc
 8007176:	461d      	movcc	r5, r3
 8007178:	0553      	lsls	r3, r2, #21
 800717a:	d527      	bpl.n	80071cc <__ssputs_r+0x8c>
 800717c:	4629      	mov	r1, r5
 800717e:	f7ff fea3 	bl	8006ec8 <_malloc_r>
 8007182:	4606      	mov	r6, r0
 8007184:	b360      	cbz	r0, 80071e0 <__ssputs_r+0xa0>
 8007186:	6921      	ldr	r1, [r4, #16]
 8007188:	464a      	mov	r2, r9
 800718a:	f000 fadb 	bl	8007744 <memcpy>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	81a3      	strh	r3, [r4, #12]
 800719a:	6126      	str	r6, [r4, #16]
 800719c:	6165      	str	r5, [r4, #20]
 800719e:	444e      	add	r6, r9
 80071a0:	eba5 0509 	sub.w	r5, r5, r9
 80071a4:	6026      	str	r6, [r4, #0]
 80071a6:	60a5      	str	r5, [r4, #8]
 80071a8:	463e      	mov	r6, r7
 80071aa:	42be      	cmp	r6, r7
 80071ac:	d900      	bls.n	80071b0 <__ssputs_r+0x70>
 80071ae:	463e      	mov	r6, r7
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	4632      	mov	r2, r6
 80071b4:	4641      	mov	r1, r8
 80071b6:	f000 faab 	bl	8007710 <memmove>
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	1b9b      	subs	r3, r3, r6
 80071be:	60a3      	str	r3, [r4, #8]
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	4433      	add	r3, r6
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	2000      	movs	r0, #0
 80071c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071cc:	462a      	mov	r2, r5
 80071ce:	f000 fac7 	bl	8007760 <_realloc_r>
 80071d2:	4606      	mov	r6, r0
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1e0      	bne.n	800719a <__ssputs_r+0x5a>
 80071d8:	6921      	ldr	r1, [r4, #16]
 80071da:	4650      	mov	r0, sl
 80071dc:	f7ff ff64 	bl	80070a8 <_free_r>
 80071e0:	230c      	movs	r3, #12
 80071e2:	f8ca 3000 	str.w	r3, [sl]
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295
 80071f2:	e7e9      	b.n	80071c8 <__ssputs_r+0x88>

080071f4 <_svfiprintf_r>:
 80071f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	4698      	mov	r8, r3
 80071fa:	898b      	ldrh	r3, [r1, #12]
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	b09d      	sub	sp, #116	; 0x74
 8007200:	4607      	mov	r7, r0
 8007202:	460d      	mov	r5, r1
 8007204:	4614      	mov	r4, r2
 8007206:	d50e      	bpl.n	8007226 <_svfiprintf_r+0x32>
 8007208:	690b      	ldr	r3, [r1, #16]
 800720a:	b963      	cbnz	r3, 8007226 <_svfiprintf_r+0x32>
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	f7ff fe5b 	bl	8006ec8 <_malloc_r>
 8007212:	6028      	str	r0, [r5, #0]
 8007214:	6128      	str	r0, [r5, #16]
 8007216:	b920      	cbnz	r0, 8007222 <_svfiprintf_r+0x2e>
 8007218:	230c      	movs	r3, #12
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	e0d0      	b.n	80073c4 <_svfiprintf_r+0x1d0>
 8007222:	2340      	movs	r3, #64	; 0x40
 8007224:	616b      	str	r3, [r5, #20]
 8007226:	2300      	movs	r3, #0
 8007228:	9309      	str	r3, [sp, #36]	; 0x24
 800722a:	2320      	movs	r3, #32
 800722c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007230:	f8cd 800c 	str.w	r8, [sp, #12]
 8007234:	2330      	movs	r3, #48	; 0x30
 8007236:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073dc <_svfiprintf_r+0x1e8>
 800723a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800723e:	f04f 0901 	mov.w	r9, #1
 8007242:	4623      	mov	r3, r4
 8007244:	469a      	mov	sl, r3
 8007246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724a:	b10a      	cbz	r2, 8007250 <_svfiprintf_r+0x5c>
 800724c:	2a25      	cmp	r2, #37	; 0x25
 800724e:	d1f9      	bne.n	8007244 <_svfiprintf_r+0x50>
 8007250:	ebba 0b04 	subs.w	fp, sl, r4
 8007254:	d00b      	beq.n	800726e <_svfiprintf_r+0x7a>
 8007256:	465b      	mov	r3, fp
 8007258:	4622      	mov	r2, r4
 800725a:	4629      	mov	r1, r5
 800725c:	4638      	mov	r0, r7
 800725e:	f7ff ff6f 	bl	8007140 <__ssputs_r>
 8007262:	3001      	adds	r0, #1
 8007264:	f000 80a9 	beq.w	80073ba <_svfiprintf_r+0x1c6>
 8007268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800726a:	445a      	add	r2, fp
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	f89a 3000 	ldrb.w	r3, [sl]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80a1 	beq.w	80073ba <_svfiprintf_r+0x1c6>
 8007278:	2300      	movs	r3, #0
 800727a:	f04f 32ff 	mov.w	r2, #4294967295
 800727e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007282:	f10a 0a01 	add.w	sl, sl, #1
 8007286:	9304      	str	r3, [sp, #16]
 8007288:	9307      	str	r3, [sp, #28]
 800728a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800728e:	931a      	str	r3, [sp, #104]	; 0x68
 8007290:	4654      	mov	r4, sl
 8007292:	2205      	movs	r2, #5
 8007294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007298:	4850      	ldr	r0, [pc, #320]	; (80073dc <_svfiprintf_r+0x1e8>)
 800729a:	f7f8 ffa1 	bl	80001e0 <memchr>
 800729e:	9a04      	ldr	r2, [sp, #16]
 80072a0:	b9d8      	cbnz	r0, 80072da <_svfiprintf_r+0xe6>
 80072a2:	06d0      	lsls	r0, r2, #27
 80072a4:	bf44      	itt	mi
 80072a6:	2320      	movmi	r3, #32
 80072a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ac:	0711      	lsls	r1, r2, #28
 80072ae:	bf44      	itt	mi
 80072b0:	232b      	movmi	r3, #43	; 0x2b
 80072b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ba:	2b2a      	cmp	r3, #42	; 0x2a
 80072bc:	d015      	beq.n	80072ea <_svfiprintf_r+0xf6>
 80072be:	9a07      	ldr	r2, [sp, #28]
 80072c0:	4654      	mov	r4, sl
 80072c2:	2000      	movs	r0, #0
 80072c4:	f04f 0c0a 	mov.w	ip, #10
 80072c8:	4621      	mov	r1, r4
 80072ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ce:	3b30      	subs	r3, #48	; 0x30
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	d94d      	bls.n	8007370 <_svfiprintf_r+0x17c>
 80072d4:	b1b0      	cbz	r0, 8007304 <_svfiprintf_r+0x110>
 80072d6:	9207      	str	r2, [sp, #28]
 80072d8:	e014      	b.n	8007304 <_svfiprintf_r+0x110>
 80072da:	eba0 0308 	sub.w	r3, r0, r8
 80072de:	fa09 f303 	lsl.w	r3, r9, r3
 80072e2:	4313      	orrs	r3, r2
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	46a2      	mov	sl, r4
 80072e8:	e7d2      	b.n	8007290 <_svfiprintf_r+0x9c>
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	1d19      	adds	r1, r3, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	9103      	str	r1, [sp, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfbb      	ittet	lt
 80072f6:	425b      	neglt	r3, r3
 80072f8:	f042 0202 	orrlt.w	r2, r2, #2
 80072fc:	9307      	strge	r3, [sp, #28]
 80072fe:	9307      	strlt	r3, [sp, #28]
 8007300:	bfb8      	it	lt
 8007302:	9204      	strlt	r2, [sp, #16]
 8007304:	7823      	ldrb	r3, [r4, #0]
 8007306:	2b2e      	cmp	r3, #46	; 0x2e
 8007308:	d10c      	bne.n	8007324 <_svfiprintf_r+0x130>
 800730a:	7863      	ldrb	r3, [r4, #1]
 800730c:	2b2a      	cmp	r3, #42	; 0x2a
 800730e:	d134      	bne.n	800737a <_svfiprintf_r+0x186>
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	1d1a      	adds	r2, r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	9203      	str	r2, [sp, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	bfb8      	it	lt
 800731c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007320:	3402      	adds	r4, #2
 8007322:	9305      	str	r3, [sp, #20]
 8007324:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073ec <_svfiprintf_r+0x1f8>
 8007328:	7821      	ldrb	r1, [r4, #0]
 800732a:	2203      	movs	r2, #3
 800732c:	4650      	mov	r0, sl
 800732e:	f7f8 ff57 	bl	80001e0 <memchr>
 8007332:	b138      	cbz	r0, 8007344 <_svfiprintf_r+0x150>
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	eba0 000a 	sub.w	r0, r0, sl
 800733a:	2240      	movs	r2, #64	; 0x40
 800733c:	4082      	lsls	r2, r0
 800733e:	4313      	orrs	r3, r2
 8007340:	3401      	adds	r4, #1
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007348:	4825      	ldr	r0, [pc, #148]	; (80073e0 <_svfiprintf_r+0x1ec>)
 800734a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800734e:	2206      	movs	r2, #6
 8007350:	f7f8 ff46 	bl	80001e0 <memchr>
 8007354:	2800      	cmp	r0, #0
 8007356:	d038      	beq.n	80073ca <_svfiprintf_r+0x1d6>
 8007358:	4b22      	ldr	r3, [pc, #136]	; (80073e4 <_svfiprintf_r+0x1f0>)
 800735a:	bb1b      	cbnz	r3, 80073a4 <_svfiprintf_r+0x1b0>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	3307      	adds	r3, #7
 8007360:	f023 0307 	bic.w	r3, r3, #7
 8007364:	3308      	adds	r3, #8
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	4433      	add	r3, r6
 800736c:	9309      	str	r3, [sp, #36]	; 0x24
 800736e:	e768      	b.n	8007242 <_svfiprintf_r+0x4e>
 8007370:	fb0c 3202 	mla	r2, ip, r2, r3
 8007374:	460c      	mov	r4, r1
 8007376:	2001      	movs	r0, #1
 8007378:	e7a6      	b.n	80072c8 <_svfiprintf_r+0xd4>
 800737a:	2300      	movs	r3, #0
 800737c:	3401      	adds	r4, #1
 800737e:	9305      	str	r3, [sp, #20]
 8007380:	4619      	mov	r1, r3
 8007382:	f04f 0c0a 	mov.w	ip, #10
 8007386:	4620      	mov	r0, r4
 8007388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800738c:	3a30      	subs	r2, #48	; 0x30
 800738e:	2a09      	cmp	r2, #9
 8007390:	d903      	bls.n	800739a <_svfiprintf_r+0x1a6>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0c6      	beq.n	8007324 <_svfiprintf_r+0x130>
 8007396:	9105      	str	r1, [sp, #20]
 8007398:	e7c4      	b.n	8007324 <_svfiprintf_r+0x130>
 800739a:	fb0c 2101 	mla	r1, ip, r1, r2
 800739e:	4604      	mov	r4, r0
 80073a0:	2301      	movs	r3, #1
 80073a2:	e7f0      	b.n	8007386 <_svfiprintf_r+0x192>
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <_svfiprintf_r+0x1f4>)
 80073ac:	a904      	add	r1, sp, #16
 80073ae:	4638      	mov	r0, r7
 80073b0:	f3af 8000 	nop.w
 80073b4:	1c42      	adds	r2, r0, #1
 80073b6:	4606      	mov	r6, r0
 80073b8:	d1d6      	bne.n	8007368 <_svfiprintf_r+0x174>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	065b      	lsls	r3, r3, #25
 80073be:	f53f af2d 	bmi.w	800721c <_svfiprintf_r+0x28>
 80073c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c4:	b01d      	add	sp, #116	; 0x74
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	ab03      	add	r3, sp, #12
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	462a      	mov	r2, r5
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <_svfiprintf_r+0x1f4>)
 80073d2:	a904      	add	r1, sp, #16
 80073d4:	4638      	mov	r0, r7
 80073d6:	f000 f879 	bl	80074cc <_printf_i>
 80073da:	e7eb      	b.n	80073b4 <_svfiprintf_r+0x1c0>
 80073dc:	08008c18 	.word	0x08008c18
 80073e0:	08008c22 	.word	0x08008c22
 80073e4:	00000000 	.word	0x00000000
 80073e8:	08007141 	.word	0x08007141
 80073ec:	08008c1e 	.word	0x08008c1e

080073f0 <_printf_common>:
 80073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	4616      	mov	r6, r2
 80073f6:	4699      	mov	r9, r3
 80073f8:	688a      	ldr	r2, [r1, #8]
 80073fa:	690b      	ldr	r3, [r1, #16]
 80073fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007400:	4293      	cmp	r3, r2
 8007402:	bfb8      	it	lt
 8007404:	4613      	movlt	r3, r2
 8007406:	6033      	str	r3, [r6, #0]
 8007408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800740c:	4607      	mov	r7, r0
 800740e:	460c      	mov	r4, r1
 8007410:	b10a      	cbz	r2, 8007416 <_printf_common+0x26>
 8007412:	3301      	adds	r3, #1
 8007414:	6033      	str	r3, [r6, #0]
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	0699      	lsls	r1, r3, #26
 800741a:	bf42      	ittt	mi
 800741c:	6833      	ldrmi	r3, [r6, #0]
 800741e:	3302      	addmi	r3, #2
 8007420:	6033      	strmi	r3, [r6, #0]
 8007422:	6825      	ldr	r5, [r4, #0]
 8007424:	f015 0506 	ands.w	r5, r5, #6
 8007428:	d106      	bne.n	8007438 <_printf_common+0x48>
 800742a:	f104 0a19 	add.w	sl, r4, #25
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	6832      	ldr	r2, [r6, #0]
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	42ab      	cmp	r3, r5
 8007436:	dc26      	bgt.n	8007486 <_printf_common+0x96>
 8007438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800743c:	1e13      	subs	r3, r2, #0
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	bf18      	it	ne
 8007442:	2301      	movne	r3, #1
 8007444:	0692      	lsls	r2, r2, #26
 8007446:	d42b      	bmi.n	80074a0 <_printf_common+0xb0>
 8007448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800744c:	4649      	mov	r1, r9
 800744e:	4638      	mov	r0, r7
 8007450:	47c0      	blx	r8
 8007452:	3001      	adds	r0, #1
 8007454:	d01e      	beq.n	8007494 <_printf_common+0xa4>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	6922      	ldr	r2, [r4, #16]
 800745a:	f003 0306 	and.w	r3, r3, #6
 800745e:	2b04      	cmp	r3, #4
 8007460:	bf02      	ittt	eq
 8007462:	68e5      	ldreq	r5, [r4, #12]
 8007464:	6833      	ldreq	r3, [r6, #0]
 8007466:	1aed      	subeq	r5, r5, r3
 8007468:	68a3      	ldr	r3, [r4, #8]
 800746a:	bf0c      	ite	eq
 800746c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007470:	2500      	movne	r5, #0
 8007472:	4293      	cmp	r3, r2
 8007474:	bfc4      	itt	gt
 8007476:	1a9b      	subgt	r3, r3, r2
 8007478:	18ed      	addgt	r5, r5, r3
 800747a:	2600      	movs	r6, #0
 800747c:	341a      	adds	r4, #26
 800747e:	42b5      	cmp	r5, r6
 8007480:	d11a      	bne.n	80074b8 <_printf_common+0xc8>
 8007482:	2000      	movs	r0, #0
 8007484:	e008      	b.n	8007498 <_printf_common+0xa8>
 8007486:	2301      	movs	r3, #1
 8007488:	4652      	mov	r2, sl
 800748a:	4649      	mov	r1, r9
 800748c:	4638      	mov	r0, r7
 800748e:	47c0      	blx	r8
 8007490:	3001      	adds	r0, #1
 8007492:	d103      	bne.n	800749c <_printf_common+0xac>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749c:	3501      	adds	r5, #1
 800749e:	e7c6      	b.n	800742e <_printf_common+0x3e>
 80074a0:	18e1      	adds	r1, r4, r3
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	2030      	movs	r0, #48	; 0x30
 80074a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074aa:	4422      	add	r2, r4
 80074ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074b4:	3302      	adds	r3, #2
 80074b6:	e7c7      	b.n	8007448 <_printf_common+0x58>
 80074b8:	2301      	movs	r3, #1
 80074ba:	4622      	mov	r2, r4
 80074bc:	4649      	mov	r1, r9
 80074be:	4638      	mov	r0, r7
 80074c0:	47c0      	blx	r8
 80074c2:	3001      	adds	r0, #1
 80074c4:	d0e6      	beq.n	8007494 <_printf_common+0xa4>
 80074c6:	3601      	adds	r6, #1
 80074c8:	e7d9      	b.n	800747e <_printf_common+0x8e>
	...

080074cc <_printf_i>:
 80074cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	7e0f      	ldrb	r7, [r1, #24]
 80074d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074d4:	2f78      	cmp	r7, #120	; 0x78
 80074d6:	4691      	mov	r9, r2
 80074d8:	4680      	mov	r8, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	469a      	mov	sl, r3
 80074de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074e2:	d807      	bhi.n	80074f4 <_printf_i+0x28>
 80074e4:	2f62      	cmp	r7, #98	; 0x62
 80074e6:	d80a      	bhi.n	80074fe <_printf_i+0x32>
 80074e8:	2f00      	cmp	r7, #0
 80074ea:	f000 80d4 	beq.w	8007696 <_printf_i+0x1ca>
 80074ee:	2f58      	cmp	r7, #88	; 0x58
 80074f0:	f000 80c0 	beq.w	8007674 <_printf_i+0x1a8>
 80074f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074fc:	e03a      	b.n	8007574 <_printf_i+0xa8>
 80074fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007502:	2b15      	cmp	r3, #21
 8007504:	d8f6      	bhi.n	80074f4 <_printf_i+0x28>
 8007506:	a101      	add	r1, pc, #4	; (adr r1, 800750c <_printf_i+0x40>)
 8007508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800750c:	08007565 	.word	0x08007565
 8007510:	08007579 	.word	0x08007579
 8007514:	080074f5 	.word	0x080074f5
 8007518:	080074f5 	.word	0x080074f5
 800751c:	080074f5 	.word	0x080074f5
 8007520:	080074f5 	.word	0x080074f5
 8007524:	08007579 	.word	0x08007579
 8007528:	080074f5 	.word	0x080074f5
 800752c:	080074f5 	.word	0x080074f5
 8007530:	080074f5 	.word	0x080074f5
 8007534:	080074f5 	.word	0x080074f5
 8007538:	0800767d 	.word	0x0800767d
 800753c:	080075a5 	.word	0x080075a5
 8007540:	08007637 	.word	0x08007637
 8007544:	080074f5 	.word	0x080074f5
 8007548:	080074f5 	.word	0x080074f5
 800754c:	0800769f 	.word	0x0800769f
 8007550:	080074f5 	.word	0x080074f5
 8007554:	080075a5 	.word	0x080075a5
 8007558:	080074f5 	.word	0x080074f5
 800755c:	080074f5 	.word	0x080074f5
 8007560:	0800763f 	.word	0x0800763f
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	1d1a      	adds	r2, r3, #4
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	602a      	str	r2, [r5, #0]
 800756c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007574:	2301      	movs	r3, #1
 8007576:	e09f      	b.n	80076b8 <_printf_i+0x1ec>
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	0607      	lsls	r7, r0, #24
 800757e:	f103 0104 	add.w	r1, r3, #4
 8007582:	6029      	str	r1, [r5, #0]
 8007584:	d501      	bpl.n	800758a <_printf_i+0xbe>
 8007586:	681e      	ldr	r6, [r3, #0]
 8007588:	e003      	b.n	8007592 <_printf_i+0xc6>
 800758a:	0646      	lsls	r6, r0, #25
 800758c:	d5fb      	bpl.n	8007586 <_printf_i+0xba>
 800758e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007592:	2e00      	cmp	r6, #0
 8007594:	da03      	bge.n	800759e <_printf_i+0xd2>
 8007596:	232d      	movs	r3, #45	; 0x2d
 8007598:	4276      	negs	r6, r6
 800759a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759e:	485a      	ldr	r0, [pc, #360]	; (8007708 <_printf_i+0x23c>)
 80075a0:	230a      	movs	r3, #10
 80075a2:	e012      	b.n	80075ca <_printf_i+0xfe>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1d19      	adds	r1, r3, #4
 80075aa:	6029      	str	r1, [r5, #0]
 80075ac:	0605      	lsls	r5, r0, #24
 80075ae:	d501      	bpl.n	80075b4 <_printf_i+0xe8>
 80075b0:	681e      	ldr	r6, [r3, #0]
 80075b2:	e002      	b.n	80075ba <_printf_i+0xee>
 80075b4:	0641      	lsls	r1, r0, #25
 80075b6:	d5fb      	bpl.n	80075b0 <_printf_i+0xe4>
 80075b8:	881e      	ldrh	r6, [r3, #0]
 80075ba:	4853      	ldr	r0, [pc, #332]	; (8007708 <_printf_i+0x23c>)
 80075bc:	2f6f      	cmp	r7, #111	; 0x6f
 80075be:	bf0c      	ite	eq
 80075c0:	2308      	moveq	r3, #8
 80075c2:	230a      	movne	r3, #10
 80075c4:	2100      	movs	r1, #0
 80075c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ca:	6865      	ldr	r5, [r4, #4]
 80075cc:	60a5      	str	r5, [r4, #8]
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	bfa2      	ittt	ge
 80075d2:	6821      	ldrge	r1, [r4, #0]
 80075d4:	f021 0104 	bicge.w	r1, r1, #4
 80075d8:	6021      	strge	r1, [r4, #0]
 80075da:	b90e      	cbnz	r6, 80075e0 <_printf_i+0x114>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	d04b      	beq.n	8007678 <_printf_i+0x1ac>
 80075e0:	4615      	mov	r5, r2
 80075e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075e6:	fb03 6711 	mls	r7, r3, r1, r6
 80075ea:	5dc7      	ldrb	r7, [r0, r7]
 80075ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075f0:	4637      	mov	r7, r6
 80075f2:	42bb      	cmp	r3, r7
 80075f4:	460e      	mov	r6, r1
 80075f6:	d9f4      	bls.n	80075e2 <_printf_i+0x116>
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d10b      	bne.n	8007614 <_printf_i+0x148>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07de      	lsls	r6, r3, #31
 8007600:	d508      	bpl.n	8007614 <_printf_i+0x148>
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	6861      	ldr	r1, [r4, #4]
 8007606:	4299      	cmp	r1, r3
 8007608:	bfde      	ittt	le
 800760a:	2330      	movle	r3, #48	; 0x30
 800760c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007614:	1b52      	subs	r2, r2, r5
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	f8cd a000 	str.w	sl, [sp]
 800761c:	464b      	mov	r3, r9
 800761e:	aa03      	add	r2, sp, #12
 8007620:	4621      	mov	r1, r4
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff fee4 	bl	80073f0 <_printf_common>
 8007628:	3001      	adds	r0, #1
 800762a:	d14a      	bne.n	80076c2 <_printf_i+0x1f6>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	b004      	add	sp, #16
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	f043 0320 	orr.w	r3, r3, #32
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	4833      	ldr	r0, [pc, #204]	; (800770c <_printf_i+0x240>)
 8007640:	2778      	movs	r7, #120	; 0x78
 8007642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	6829      	ldr	r1, [r5, #0]
 800764a:	061f      	lsls	r7, r3, #24
 800764c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007650:	d402      	bmi.n	8007658 <_printf_i+0x18c>
 8007652:	065f      	lsls	r7, r3, #25
 8007654:	bf48      	it	mi
 8007656:	b2b6      	uxthmi	r6, r6
 8007658:	07df      	lsls	r7, r3, #31
 800765a:	bf48      	it	mi
 800765c:	f043 0320 	orrmi.w	r3, r3, #32
 8007660:	6029      	str	r1, [r5, #0]
 8007662:	bf48      	it	mi
 8007664:	6023      	strmi	r3, [r4, #0]
 8007666:	b91e      	cbnz	r6, 8007670 <_printf_i+0x1a4>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	f023 0320 	bic.w	r3, r3, #32
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	2310      	movs	r3, #16
 8007672:	e7a7      	b.n	80075c4 <_printf_i+0xf8>
 8007674:	4824      	ldr	r0, [pc, #144]	; (8007708 <_printf_i+0x23c>)
 8007676:	e7e4      	b.n	8007642 <_printf_i+0x176>
 8007678:	4615      	mov	r5, r2
 800767a:	e7bd      	b.n	80075f8 <_printf_i+0x12c>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	6826      	ldr	r6, [r4, #0]
 8007680:	6961      	ldr	r1, [r4, #20]
 8007682:	1d18      	adds	r0, r3, #4
 8007684:	6028      	str	r0, [r5, #0]
 8007686:	0635      	lsls	r5, r6, #24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	d501      	bpl.n	8007690 <_printf_i+0x1c4>
 800768c:	6019      	str	r1, [r3, #0]
 800768e:	e002      	b.n	8007696 <_printf_i+0x1ca>
 8007690:	0670      	lsls	r0, r6, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0x1c0>
 8007694:	8019      	strh	r1, [r3, #0]
 8007696:	2300      	movs	r3, #0
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	4615      	mov	r5, r2
 800769c:	e7bc      	b.n	8007618 <_printf_i+0x14c>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	602a      	str	r2, [r5, #0]
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	6862      	ldr	r2, [r4, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7f8 fd98 	bl	80001e0 <memchr>
 80076b0:	b108      	cbz	r0, 80076b6 <_printf_i+0x1ea>
 80076b2:	1b40      	subs	r0, r0, r5
 80076b4:	6060      	str	r0, [r4, #4]
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	2300      	movs	r3, #0
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c0:	e7aa      	b.n	8007618 <_printf_i+0x14c>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	462a      	mov	r2, r5
 80076c6:	4649      	mov	r1, r9
 80076c8:	4640      	mov	r0, r8
 80076ca:	47d0      	blx	sl
 80076cc:	3001      	adds	r0, #1
 80076ce:	d0ad      	beq.n	800762c <_printf_i+0x160>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	079b      	lsls	r3, r3, #30
 80076d4:	d413      	bmi.n	80076fe <_printf_i+0x232>
 80076d6:	68e0      	ldr	r0, [r4, #12]
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	4298      	cmp	r0, r3
 80076dc:	bfb8      	it	lt
 80076de:	4618      	movlt	r0, r3
 80076e0:	e7a6      	b.n	8007630 <_printf_i+0x164>
 80076e2:	2301      	movs	r3, #1
 80076e4:	4632      	mov	r2, r6
 80076e6:	4649      	mov	r1, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	47d0      	blx	sl
 80076ec:	3001      	adds	r0, #1
 80076ee:	d09d      	beq.n	800762c <_printf_i+0x160>
 80076f0:	3501      	adds	r5, #1
 80076f2:	68e3      	ldr	r3, [r4, #12]
 80076f4:	9903      	ldr	r1, [sp, #12]
 80076f6:	1a5b      	subs	r3, r3, r1
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dcf2      	bgt.n	80076e2 <_printf_i+0x216>
 80076fc:	e7eb      	b.n	80076d6 <_printf_i+0x20a>
 80076fe:	2500      	movs	r5, #0
 8007700:	f104 0619 	add.w	r6, r4, #25
 8007704:	e7f5      	b.n	80076f2 <_printf_i+0x226>
 8007706:	bf00      	nop
 8007708:	08008c29 	.word	0x08008c29
 800770c:	08008c3a 	.word	0x08008c3a

08007710 <memmove>:
 8007710:	4288      	cmp	r0, r1
 8007712:	b510      	push	{r4, lr}
 8007714:	eb01 0402 	add.w	r4, r1, r2
 8007718:	d902      	bls.n	8007720 <memmove+0x10>
 800771a:	4284      	cmp	r4, r0
 800771c:	4623      	mov	r3, r4
 800771e:	d807      	bhi.n	8007730 <memmove+0x20>
 8007720:	1e43      	subs	r3, r0, #1
 8007722:	42a1      	cmp	r1, r4
 8007724:	d008      	beq.n	8007738 <memmove+0x28>
 8007726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800772e:	e7f8      	b.n	8007722 <memmove+0x12>
 8007730:	4402      	add	r2, r0
 8007732:	4601      	mov	r1, r0
 8007734:	428a      	cmp	r2, r1
 8007736:	d100      	bne.n	800773a <memmove+0x2a>
 8007738:	bd10      	pop	{r4, pc}
 800773a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800773e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007742:	e7f7      	b.n	8007734 <memmove+0x24>

08007744 <memcpy>:
 8007744:	440a      	add	r2, r1
 8007746:	4291      	cmp	r1, r2
 8007748:	f100 33ff 	add.w	r3, r0, #4294967295
 800774c:	d100      	bne.n	8007750 <memcpy+0xc>
 800774e:	4770      	bx	lr
 8007750:	b510      	push	{r4, lr}
 8007752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800775a:	4291      	cmp	r1, r2
 800775c:	d1f9      	bne.n	8007752 <memcpy+0xe>
 800775e:	bd10      	pop	{r4, pc}

08007760 <_realloc_r>:
 8007760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007764:	4680      	mov	r8, r0
 8007766:	4614      	mov	r4, r2
 8007768:	460e      	mov	r6, r1
 800776a:	b921      	cbnz	r1, 8007776 <_realloc_r+0x16>
 800776c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	4611      	mov	r1, r2
 8007772:	f7ff bba9 	b.w	8006ec8 <_malloc_r>
 8007776:	b92a      	cbnz	r2, 8007784 <_realloc_r+0x24>
 8007778:	f7ff fc96 	bl	80070a8 <_free_r>
 800777c:	4625      	mov	r5, r4
 800777e:	4628      	mov	r0, r5
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007784:	f000 f81b 	bl	80077be <_malloc_usable_size_r>
 8007788:	4284      	cmp	r4, r0
 800778a:	4607      	mov	r7, r0
 800778c:	d802      	bhi.n	8007794 <_realloc_r+0x34>
 800778e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007792:	d812      	bhi.n	80077ba <_realloc_r+0x5a>
 8007794:	4621      	mov	r1, r4
 8007796:	4640      	mov	r0, r8
 8007798:	f7ff fb96 	bl	8006ec8 <_malloc_r>
 800779c:	4605      	mov	r5, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	d0ed      	beq.n	800777e <_realloc_r+0x1e>
 80077a2:	42bc      	cmp	r4, r7
 80077a4:	4622      	mov	r2, r4
 80077a6:	4631      	mov	r1, r6
 80077a8:	bf28      	it	cs
 80077aa:	463a      	movcs	r2, r7
 80077ac:	f7ff ffca 	bl	8007744 <memcpy>
 80077b0:	4631      	mov	r1, r6
 80077b2:	4640      	mov	r0, r8
 80077b4:	f7ff fc78 	bl	80070a8 <_free_r>
 80077b8:	e7e1      	b.n	800777e <_realloc_r+0x1e>
 80077ba:	4635      	mov	r5, r6
 80077bc:	e7df      	b.n	800777e <_realloc_r+0x1e>

080077be <_malloc_usable_size_r>:
 80077be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c2:	1f18      	subs	r0, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bfbc      	itt	lt
 80077c8:	580b      	ldrlt	r3, [r1, r0]
 80077ca:	18c0      	addlt	r0, r0, r3
 80077cc:	4770      	bx	lr
	...

080077d0 <_init>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	bf00      	nop
 80077d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d6:	bc08      	pop	{r3}
 80077d8:	469e      	mov	lr, r3
 80077da:	4770      	bx	lr

080077dc <_fini>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr
